
STMXInput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008074  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08008208  08008208  00018208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082e4  080082e4  000203bc  2**0
                  CONTENTS
  4 .ARM          00000008  080082e4  080082e4  000182e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082ec  080082ec  000203bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082ec  080082ec  000182ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082f0  080082f0  000182f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003bc  20000000  080082f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a40  200003bc  080086b0  000203bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dfc  080086b0  00020dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c8b1  00000000  00000000  000203ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004091  00000000  00000000  0003cc9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00040d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00041e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e445  00000000  00000000  00042e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001705b  00000000  00000000  000612cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a15c  00000000  00000000  00078328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00112484  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae0  00000000  00000000  001124d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200003bc 	.word	0x200003bc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080081f0 	.word	0x080081f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200003c0 	.word	0x200003c0
 80001d0:	080081f0 	.word	0x080081f0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_ZN4XUSB4initEv>:
#ifdef __cplusplus

class XUSB
{
public:
	static void init(){ usb_xinput_init(); }
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	f001 fb14 	bl	8001afc <usb_xinput_init>
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <_ZN4XUSB9availableEv>:
	static uint16_t available() { return usb_xinput_available(); }
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
 80004dc:	f001 fab8 	bl	8001a50 <usb_xinput_available>
 80004e0:	4603      	mov	r3, r0
 80004e2:	4618      	mov	r0, r3
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <_ZN4XUSB4sendEPhh>:
	static uint8_t send(uint8_t *buffer, uint8_t nbytes) { return usb_xinput_send(buffer, nbytes); }
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
 80004ee:	460b      	mov	r3, r1
 80004f0:	70fb      	strb	r3, [r7, #3]
 80004f2:	78fb      	ldrb	r3, [r7, #3]
 80004f4:	4619      	mov	r1, r3
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f001 fad0 	bl	8001a9c <usb_xinput_send>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4618      	mov	r0, r3
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <_ZN4XUSB4recvEPhh>:
	static uint8_t recv(uint8_t *buffer, uint8_t nbytes) { return usb_xinput_recv(buffer, nbytes); }
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	460b      	mov	r3, r1
 8000510:	70fb      	strb	r3, [r7, #3]
 8000512:	78fb      	ldrb	r3, [r7, #3]
 8000514:	4619      	mov	r1, r3
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f001 faa6 	bl	8001a68 <usb_xinput_recv>
 800051c:	4603      	mov	r3, r0
 800051e:	4618      	mov	r0, r3
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <_ZN4Xbox8autosendEv>:
		bool newData;  // Flag for tx data changed
		bool autoSendOption;  // Flag for automatically sending data

		void setJoystickDirect(XInputControl joy, int16_t x, int16_t y);

		void inline autosend() {
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
			if (autoSendOption) { send(); }
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	7e5b      	ldrb	r3, [r3, #25]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d002      	beq.n	800053c <_ZN4Xbox8autosendEv+0x16>
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 fa9e 	bl	8000a78 <_ZN4Xbox4sendEv>
		}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <_Z3mapmmmmm>:
#include "Xbox.h"



uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	69b9      	ldr	r1, [r7, #24]
 800055a:	683a      	ldr	r2, [r7, #0]
 800055c:	1a8a      	subs	r2, r1, r2
 800055e:	fb02 f203 	mul.w	r2, r2, r3
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	fbb2 f2f3 	udiv	r2, r2, r3
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	4413      	add	r3, r2
}
 8000570:	4618      	mov	r0, r3
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <_Z17getButtonFromEnum13XInputControl>:
static const XInputMap_Button Map_ButtonA(3, 4);
static const XInputMap_Button Map_ButtonB(3, 5);
static const XInputMap_Button Map_ButtonX(3, 6);
static const XInputMap_Button Map_ButtonY(3, 7);

const XInputMap_Button * getButtonFromEnum(XInputControl ctrl) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	switch (ctrl) {
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b12      	cmp	r3, #18
 800058a:	d847      	bhi.n	800061c <_Z17getButtonFromEnum13XInputControl+0xa0>
 800058c:	a201      	add	r2, pc, #4	; (adr r2, 8000594 <_Z17getButtonFromEnum13XInputControl+0x18>)
 800058e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000592:	bf00      	nop
 8000594:	08000619 	.word	0x08000619
 8000598:	080005f1 	.word	0x080005f1
 800059c:	080005f5 	.word	0x080005f5
 80005a0:	080005f9 	.word	0x080005f9
 80005a4:	080005fd 	.word	0x080005fd
 80005a8:	08000601 	.word	0x08000601
 80005ac:	08000605 	.word	0x08000605
 80005b0:	08000615 	.word	0x08000615
 80005b4:	08000611 	.word	0x08000611
 80005b8:	08000609 	.word	0x08000609
 80005bc:	0800060d 	.word	0x0800060d
 80005c0:	080005e1 	.word	0x080005e1
 80005c4:	080005e5 	.word	0x080005e5
 80005c8:	080005e9 	.word	0x080005e9
 80005cc:	080005ed 	.word	0x080005ed
 80005d0:	0800061d 	.word	0x0800061d
 80005d4:	0800061d 	.word	0x0800061d
 80005d8:	08000609 	.word	0x08000609
 80005dc:	0800060d 	.word	0x0800060d
	case(DPAD_UP):      return &Map_DpadUp;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <_Z17getButtonFromEnum13XInputControl+0xb0>)
 80005e2:	e01c      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(DPAD_DOWN):    return &Map_DpadDown;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <_Z17getButtonFromEnum13XInputControl+0xb4>)
 80005e6:	e01a      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(DPAD_LEFT):    return &Map_DpadLeft;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <_Z17getButtonFromEnum13XInputControl+0xb8>)
 80005ea:	e018      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(DPAD_RIGHT):   return &Map_DpadRight;
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <_Z17getButtonFromEnum13XInputControl+0xbc>)
 80005ee:	e016      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_A):     return &Map_ButtonA;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <_Z17getButtonFromEnum13XInputControl+0xc0>)
 80005f2:	e014      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_B):     return &Map_ButtonB;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <_Z17getButtonFromEnum13XInputControl+0xc4>)
 80005f6:	e012      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_X):     return &Map_ButtonX;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <_Z17getButtonFromEnum13XInputControl+0xc8>)
 80005fa:	e010      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_Y):     return &Map_ButtonY;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <_Z17getButtonFromEnum13XInputControl+0xcc>)
 80005fe:	e00e      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_LB):    return &Map_ButtonLB;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <_Z17getButtonFromEnum13XInputControl+0xd0>)
 8000602:	e00c      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_RB):    return &Map_ButtonRB;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <_Z17getButtonFromEnum13XInputControl+0xd4>)
 8000606:	e00a      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(JOY_LEFT):
	case(BUTTON_L3):    return &Map_ButtonL3;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <_Z17getButtonFromEnum13XInputControl+0xd8>)
 800060a:	e008      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(JOY_RIGHT):
	case(BUTTON_R3):    return &Map_ButtonR3;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <_Z17getButtonFromEnum13XInputControl+0xdc>)
 800060e:	e006      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_START): return &Map_ButtonStart;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <_Z17getButtonFromEnum13XInputControl+0xe0>)
 8000612:	e004      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_BACK):  return &Map_ButtonBack;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <_Z17getButtonFromEnum13XInputControl+0xe4>)
 8000616:	e002      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_LOGO):  return &Map_ButtonLogo;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <_Z17getButtonFromEnum13XInputControl+0xe8>)
 800061a:	e000      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	default: return nullptr;
 800061c:	2300      	movs	r3, #0
	}
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	08008250 	.word	0x08008250
 8000630:	08008254 	.word	0x08008254
 8000634:	08008258 	.word	0x08008258
 8000638:	0800825c 	.word	0x0800825c
 800063c:	0800827c 	.word	0x0800827c
 8000640:	08008280 	.word	0x08008280
 8000644:	08008284 	.word	0x08008284
 8000648:	08008288 	.word	0x08008288
 800064c:	08008270 	.word	0x08008270
 8000650:	08008274 	.word	0x08008274
 8000654:	08008268 	.word	0x08008268
 8000658:	0800826c 	.word	0x0800826c
 800065c:	08008260 	.word	0x08008260
 8000660:	08008264 	.word	0x08008264
 8000664:	08008278 	.word	0x08008278

08000668 <_Z18getTriggerFromEnum13XInputControl>:
const Xbox::Range XInputMap_Trigger::range = { 0, 255 };  // uint8_t

static const XInputMap_Trigger Map_TriggerLeft(4);
static const XInputMap_Trigger Map_TriggerRight(5);

const XInputMap_Trigger * getTriggerFromEnum(XInputControl ctrl) {
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	switch (ctrl) {
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b0f      	cmp	r3, #15
 8000676:	d002      	beq.n	800067e <_Z18getTriggerFromEnum13XInputControl+0x16>
 8000678:	2b10      	cmp	r3, #16
 800067a:	d002      	beq.n	8000682 <_Z18getTriggerFromEnum13XInputControl+0x1a>
 800067c:	e003      	b.n	8000686 <_Z18getTriggerFromEnum13XInputControl+0x1e>
	case(TRIGGER_LEFT): return &Map_TriggerLeft;
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <_Z18getTriggerFromEnum13XInputControl+0x2c>)
 8000680:	e002      	b.n	8000688 <_Z18getTriggerFromEnum13XInputControl+0x20>
	case(TRIGGER_RIGHT): return &Map_TriggerRight;
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <_Z18getTriggerFromEnum13XInputControl+0x30>)
 8000684:	e000      	b.n	8000688 <_Z18getTriggerFromEnum13XInputControl+0x20>
	default: return nullptr;
 8000686:	2300      	movs	r3, #0
	}
}
 8000688:	4618      	mov	r0, r3
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	08008294 	.word	0x08008294
 8000698:	08008298 	.word	0x08008298

0800069c <_Z14getJoyFromEnum13XInputControl>:
const Xbox::Range XInputMap_Joystick::range = { -32768, 32767 };  // int16_t

static const XInputMap_Joystick Map_JoystickLeft(6, 7, 8, 9);
static const XInputMap_Joystick Map_JoystickRight(10, 11, 12, 13);

const XInputMap_Joystick * getJoyFromEnum(XInputControl ctrl) {
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	switch (ctrl) {
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b11      	cmp	r3, #17
 80006aa:	d002      	beq.n	80006b2 <_Z14getJoyFromEnum13XInputControl+0x16>
 80006ac:	2b12      	cmp	r3, #18
 80006ae:	d002      	beq.n	80006b6 <_Z14getJoyFromEnum13XInputControl+0x1a>
 80006b0:	e003      	b.n	80006ba <_Z14getJoyFromEnum13XInputControl+0x1e>
	case(JOY_LEFT): return &Map_JoystickLeft;
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <_Z14getJoyFromEnum13XInputControl+0x2c>)
 80006b4:	e002      	b.n	80006bc <_Z14getJoyFromEnum13XInputControl+0x20>
	case(JOY_RIGHT): return &Map_JoystickRight;
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <_Z14getJoyFromEnum13XInputControl+0x30>)
 80006b8:	e000      	b.n	80006bc <_Z14getJoyFromEnum13XInputControl+0x20>
	default: return nullptr;
 80006ba:	2300      	movs	r3, #0
	}
}
 80006bc:	4618      	mov	r0, r3
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	080082a4 	.word	0x080082a4
 80006cc:	080082a8 	.word	0x080082a8

080006d0 <_ZN4XboxC1Ev>:

// --------------------------------------------------------
// Xbox Class (API)                           |
// --------------------------------------------------------

Xbox::Xbox() :
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	tx(), rumble() // Zero initialize arrays
 80006d8:	4a17      	ldr	r2, [pc, #92]	; (8000738 <_ZN4XboxC1Ev+0x68>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	1d1a      	adds	r2, r3, #4
 80006e2:	2313      	movs	r3, #19
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	db04      	blt.n	80006f2 <_ZN4XboxC1Ev+0x22>
 80006e8:	2100      	movs	r1, #0
 80006ea:	7011      	strb	r1, [r2, #0]
 80006ec:	3201      	adds	r2, #1
 80006ee:	3b01      	subs	r3, #1
 80006f0:	e7f8      	b.n	80006e4 <_ZN4XboxC1Ev+0x14>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f103 021b 	add.w	r2, r3, #27
 80006f8:	2301      	movs	r3, #1
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db04      	blt.n	8000708 <_ZN4XboxC1Ev+0x38>
 80006fe:	2100      	movs	r1, #0
 8000700:	7011      	strb	r1, [r2, #0]
 8000702:	3201      	adds	r2, #1
 8000704:	3b01      	subs	r3, #1
 8000706:	e7f8      	b.n	80006fa <_ZN4XboxC1Ev+0x2a>
{
	this->begin();
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 f817 	bl	800073c <_ZN4Xbox5beginEv>
	reset();
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 fb14 	bl	8000d3c <_ZN4Xbox5resetEv>

	while(this->receive());  // flush USB OUT buffer
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 f9be 	bl	8000a96 <_ZN4Xbox7receiveEv>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	bf14      	ite	ne
 8000720:	2301      	movne	r3, #1
 8000722:	2300      	moveq	r3, #0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d000      	beq.n	800072c <_ZN4XboxC1Ev+0x5c>
 800072a:	e7f3      	b.n	8000714 <_ZN4XboxC1Ev+0x44>

}
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	080082b4 	.word	0x080082b4

0800073c <_ZN4Xbox5beginEv>:

void Xbox::begin() {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	// Empty for now
	//usb_xinput_init();
	XUSB::init();
 8000744:	f7ff fec2 	bl	80004cc <_ZN4XUSB4initEv>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <_ZN4Xbox9setButtonEhb>:

void Xbox::release(uint8_t button) {
	setButton(button, false);
}

void Xbox::setButton(uint8_t button, bool state) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]
 800075c:	4613      	mov	r3, r2
 800075e:	70bb      	strb	r3, [r7, #2]
	const XInputMap_Button * buttonData = getButtonFromEnum((XInputControl) button);
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff0a 	bl	800057c <_Z17getButtonFromEnum13XInputControl>
 8000768:	60f8      	str	r0, [r7, #12]
	if (buttonData != nullptr) {
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d03d      	beq.n	80007ec <_ZN4Xbox9setButtonEhb+0x9c>
		if (getButton(button) == state) return;  // Button hasn't changed
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	4619      	mov	r1, r3
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 f909 	bl	800098c <_ZNK4Xbox9getButtonEh>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	78bb      	ldrb	r3, [r7, #2]
 8000780:	4293      	cmp	r3, r2
 8000782:	bf0c      	ite	eq
 8000784:	2301      	moveq	r3, #1
 8000786:	2300      	movne	r3, #0
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d145      	bne.n	800081a <_ZN4Xbox9setButtonEhb+0xca>

		if (state) { tx[buttonData->index] |= buttonData->mask; }  // Press
 800078e:	78bb      	ldrb	r3, [r7, #2]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00f      	beq.n	80007b4 <_ZN4Xbox9setButtonEhb+0x64>
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	791a      	ldrb	r2, [r3, #4]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	785b      	ldrb	r3, [r3, #1]
 80007a4:	68f9      	ldr	r1, [r7, #12]
 80007a6:	7809      	ldrb	r1, [r1, #0]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	440b      	add	r3, r1
 80007b0:	711a      	strb	r2, [r3, #4]
 80007b2:	e014      	b.n	80007de <_ZN4Xbox9setButtonEhb+0x8e>
		else { tx[buttonData->index] &= ~(buttonData->mask); }  // Release
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	b25a      	sxtb	r2, r3
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	785b      	ldrb	r3, [r3, #1]
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	43db      	mvns	r3, r3
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	4013      	ands	r3, r2
 80007ce:	b25a      	sxtb	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	440b      	add	r3, r1
 80007dc:	711a      	strb	r2, [r3, #4]
		newData = true;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2201      	movs	r2, #1
 80007e2:	761a      	strb	r2, [r3, #24]
		autosend();
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff fe9e 	bl	8000526 <_ZN4Xbox8autosendEv>
 80007ea:	e019      	b.n	8000820 <_ZN4Xbox9setButtonEhb+0xd0>
	}
	else {
		Range * triggerRange = getRangeFromEnum((XInputControl) button);
 80007ec:	78fb      	ldrb	r3, [r7, #3]
 80007ee:	4619      	mov	r1, r3
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f000 f9d9 	bl	8000ba8 <_ZN4Xbox16getRangeFromEnumE13XInputControl>
 80007f6:	60b8      	str	r0, [r7, #8]
		if (triggerRange == nullptr) return;  // Not a trigger (or joystick, but the trigger function will ignore that)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d00f      	beq.n	800081e <_ZN4Xbox9setButtonEhb+0xce>
		setTrigger((XInputControl) button, state ? triggerRange->max : triggerRange->min);  // Treat trigger like a button
 80007fe:	78bb      	ldrb	r3, [r7, #2]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d002      	beq.n	800080a <_ZN4Xbox9setButtonEhb+0xba>
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	e001      	b.n	800080e <_ZN4Xbox9setButtonEhb+0xbe>
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	78f9      	ldrb	r1, [r7, #3]
 8000810:	461a      	mov	r2, r3
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f000 f808 	bl	8000828 <_ZN4Xbox10setTriggerE13XInputControll>
 8000818:	e002      	b.n	8000820 <_ZN4Xbox9setButtonEhb+0xd0>
		if (getButton(button) == state) return;  // Button hasn't changed
 800081a:	bf00      	nop
 800081c:	e000      	b.n	8000820 <_ZN4Xbox9setButtonEhb+0xd0>
		if (triggerRange == nullptr) return;  // Not a trigger (or joystick, but the trigger function will ignore that)
 800081e:	bf00      	nop
	}
}
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <_ZN4Xbox10setTriggerE13XInputControll>:

	autoSendOption = autoSendTemp;  // Re-enable from option
	autosend();
}

void Xbox::setTrigger(XInputControl trigger, int32_t val) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	460b      	mov	r3, r1
 8000832:	607a      	str	r2, [r7, #4]
 8000834:	72fb      	strb	r3, [r7, #11]
	const XInputMap_Trigger * triggerData = getTriggerFromEnum(trigger);
 8000836:	7afb      	ldrb	r3, [r7, #11]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff15 	bl	8000668 <_Z18getTriggerFromEnum13XInputControl>
 800083e:	6178      	str	r0, [r7, #20]
	if (triggerData == nullptr) return;  // Not a trigger
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d029      	beq.n	800089a <_ZN4Xbox10setTriggerE13XInputControll+0x72>

	val = rescaleInput(val, *getRangeFromEnum(trigger), XInputMap_Trigger::range);
 8000846:	7afb      	ldrb	r3, [r7, #11]
 8000848:	4619      	mov	r1, r3
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f000 f9ac 	bl	8000ba8 <_ZN4Xbox16getRangeFromEnumE13XInputControl>
 8000850:	4603      	mov	r3, r0
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <_ZN4Xbox10setTriggerE13XInputControll+0x80>)
 8000854:	4619      	mov	r1, r3
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f000 f9d0 	bl	8000bfc <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_>
 800085c:	6078      	str	r0, [r7, #4]
	if (getTrigger(trigger) == val) return;  // Trigger hasn't changed
 800085e:	7afb      	ldrb	r3, [r7, #11]
 8000860:	4619      	mov	r1, r3
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f000 f8c9 	bl	80009fa <_ZNK4Xbox10getTriggerE13XInputControl>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4293      	cmp	r3, r2
 8000870:	bf0c      	ite	eq
 8000872:	2301      	moveq	r3, #1
 8000874:	2300      	movne	r3, #0
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d110      	bne.n	800089e <_ZN4Xbox10setTriggerE13XInputControll+0x76>

	tx[triggerData->index] = val;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	440b      	add	r3, r1
 800088a:	711a      	strb	r2, [r3, #4]
	newData = true;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2201      	movs	r2, #1
 8000890:	761a      	strb	r2, [r3, #24]
	autosend();
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f7ff fe47 	bl	8000526 <_ZN4Xbox8autosendEv>
 8000898:	e002      	b.n	80008a0 <_ZN4Xbox10setTriggerE13XInputControll+0x78>
	if (triggerData == nullptr) return;  // Not a trigger
 800089a:	bf00      	nop
 800089c:	e000      	b.n	80008a0 <_ZN4Xbox10setTriggerE13XInputControll+0x78>
	if (getTrigger(trigger) == val) return;  // Trigger hasn't changed
 800089e:	bf00      	nop
}
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	0800828c 	.word	0x0800828c

080008ac <_ZN4Xbox12setJoystickXE13XInputControllb>:
	y = rescaleInput(y, *getRangeFromEnum(joy), XInputMap_Joystick::range);

	setJoystickDirect(joy, x, y);
}

void Xbox::setJoystickX(XInputControl joy, int32_t x, bool invert) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	461a      	mov	r2, r3
 80008b8:	460b      	mov	r3, r1
 80008ba:	72fb      	strb	r3, [r7, #11]
 80008bc:	4613      	mov	r3, r2
 80008be:	72bb      	strb	r3, [r7, #10]
	const XInputMap_Joystick * joyData = getJoyFromEnum(joy);
 80008c0:	7afb      	ldrb	r3, [r7, #11]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff feea 	bl	800069c <_Z14getJoyFromEnum13XInputControl>
 80008c8:	6178      	str	r0, [r7, #20]
	if (joyData == nullptr) return;  // Not a joystick
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d03d      	beq.n	800094c <_ZN4Xbox12setJoystickXE13XInputControllb+0xa0>

	x = rescaleInput(x, *getRangeFromEnum(joy), XInputMap_Joystick::range);
 80008d0:	7afb      	ldrb	r3, [r7, #11]
 80008d2:	4619      	mov	r1, r3
 80008d4:	68f8      	ldr	r0, [r7, #12]
 80008d6:	f000 f967 	bl	8000ba8 <_ZN4Xbox16getRangeFromEnumE13XInputControl>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a1e      	ldr	r2, [pc, #120]	; (8000958 <_ZN4Xbox12setJoystickXE13XInputControllb+0xac>)
 80008de:	4619      	mov	r1, r3
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f000 f98b 	bl	8000bfc <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_>
 80008e6:	6078      	str	r0, [r7, #4]
	if (invert) x = invertInput(x, XInputMap_Joystick::range);
 80008e8:	7abb      	ldrb	r3, [r7, #10]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d007      	beq.n	80008fe <_ZN4Xbox12setJoystickXE13XInputControllb+0x52>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	b21b      	sxth	r3, r3
 80008f2:	4919      	ldr	r1, [pc, #100]	; (8000958 <_ZN4Xbox12setJoystickXE13XInputControllb+0xac>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f9ba 	bl	8000c6e <_ZN4Xbox11invertInputEsRKNS_5RangeE>
 80008fa:	4603      	mov	r3, r0
 80008fc:	607b      	str	r3, [r7, #4]

	if (getJoystickX(joy) == x) return;  // Axis hasn't changed
 80008fe:	7afb      	ldrb	r3, [r7, #11]
 8000900:	4619      	mov	r1, r3
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f000 f893 	bl	8000a2e <_ZNK4Xbox12getJoystickXE13XInputControl>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4293      	cmp	r3, r2
 8000910:	bf0c      	ite	eq
 8000912:	2301      	moveq	r3, #1
 8000914:	2300      	movne	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d119      	bne.n	8000950 <_ZN4Xbox12setJoystickXE13XInputControllb+0xa4>

	tx[joyData->x_low] = lowByte(x);
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	440b      	add	r3, r1
 800092a:	711a      	strb	r2, [r3, #4]
	tx[joyData->x_high] = highByte(x);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	121a      	asrs	r2, r3, #8
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	785b      	ldrb	r3, [r3, #1]
 8000934:	4619      	mov	r1, r3
 8000936:	b2d2      	uxtb	r2, r2
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	440b      	add	r3, r1
 800093c:	711a      	strb	r2, [r3, #4]

	newData = true;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2201      	movs	r2, #1
 8000942:	761a      	strb	r2, [r3, #24]
	autosend();
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f7ff fdee 	bl	8000526 <_ZN4Xbox8autosendEv>
 800094a:	e002      	b.n	8000952 <_ZN4Xbox12setJoystickXE13XInputControllb+0xa6>
	if (joyData == nullptr) return;  // Not a joystick
 800094c:	bf00      	nop
 800094e:	e000      	b.n	8000952 <_ZN4Xbox12setJoystickXE13XInputControllb+0xa6>
	if (getJoystickX(joy) == x) return;  // Axis hasn't changed
 8000950:	bf00      	nop
}
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	0800829c 	.word	0x0800829c

0800095c <_ZN4Xbox10releaseAllEv>:
	}

	autosend();
}

void Xbox::releaseAll() {
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	const uint8_t offset = 2;  // Skip message type and packet size
 8000964:	2302      	movs	r3, #2
 8000966:	73fb      	strb	r3, [r7, #15]
	memset(tx + offset, 0x00, sizeof(tx) - offset);  // Clear TX array
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3304      	adds	r3, #4
 800096c:	3302      	adds	r3, #2
 800096e:	2212      	movs	r2, #18
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f007 fb28 	bl	8007fc8 <memset>
	newData = true;  // Data changed and is unsent
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2201      	movs	r2, #1
 800097c:	761a      	strb	r2, [r3, #24]
	autosend();
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff fdd1 	bl	8000526 <_ZN4Xbox8autosendEv>
}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <_ZNK4Xbox9getButtonEh>:

void Xbox::setAutoSend(bool a) {
	autoSendOption = a;
}

bool Xbox::getButton(uint8_t button) const {
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	70fb      	strb	r3, [r7, #3]
	const XInputMap_Button* buttonData = getButtonFromEnum((XInputControl) button);
 8000998:	78fb      	ldrb	r3, [r7, #3]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fdee 	bl	800057c <_Z17getButtonFromEnum13XInputControl>
 80009a0:	60f8      	str	r0, [r7, #12]
	if (buttonData != nullptr) {
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d00f      	beq.n	80009c8 <_ZNK4Xbox9getButtonEh+0x3c>
		return tx[buttonData->index] & buttonData->mask;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	791a      	ldrb	r2, [r3, #4]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	785b      	ldrb	r3, [r3, #1]
 80009b8:	4013      	ands	r3, r2
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf14      	ite	ne
 80009c0:	2301      	movne	r3, #1
 80009c2:	2300      	moveq	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	e014      	b.n	80009f2 <_ZNK4Xbox9getButtonEh+0x66>
	}
	const XInputMap_Trigger* triggerData = getTriggerFromEnum((XInputControl) button);
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe4c 	bl	8000668 <_Z18getTriggerFromEnum13XInputControl>
 80009d0:	60b8      	str	r0, [r7, #8]
	if (triggerData != nullptr) {
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d00b      	beq.n	80009f0 <_ZNK4Xbox9getButtonEh+0x64>
		return getTrigger((XInputControl) button) != 0 ? 1 : 0;
 80009d8:	78fb      	ldrb	r3, [r7, #3]
 80009da:	4619      	mov	r1, r3
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 f80c 	bl	80009fa <_ZNK4Xbox10getTriggerE13XInputControl>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf14      	ite	ne
 80009e8:	2301      	movne	r3, #1
 80009ea:	2300      	moveq	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	e000      	b.n	80009f2 <_ZNK4Xbox9getButtonEh+0x66>
	}
	return 0;  // Not a button or a trigger
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_ZNK4Xbox10getTriggerE13XInputControl>:

bool Xbox::getDpad(XInputControl dpad) const {
	return getButton(dpad);
}

uint8_t Xbox::getTrigger(XInputControl trigger) const {
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b084      	sub	sp, #16
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	70fb      	strb	r3, [r7, #3]
	const XInputMap_Trigger * triggerData = getTriggerFromEnum(trigger);
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fe2d 	bl	8000668 <_Z18getTriggerFromEnum13XInputControl>
 8000a0e:	60f8      	str	r0, [r7, #12]
	if (triggerData == nullptr) return 0;  // Not a trigger
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d101      	bne.n	8000a1a <_ZNK4Xbox10getTriggerE13XInputControl+0x20>
 8000a16:	2300      	movs	r3, #0
 8000a18:	e005      	b.n	8000a26 <_ZNK4Xbox10getTriggerE13XInputControl+0x2c>
	return tx[triggerData->index];
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	791b      	ldrb	r3, [r3, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <_ZNK4Xbox12getJoystickXE13XInputControl>:

int16_t Xbox::getJoystickX(XInputControl joy) const {
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b084      	sub	sp, #16
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	460b      	mov	r3, r1
 8000a38:	70fb      	strb	r3, [r7, #3]
	const XInputMap_Joystick * joyData = getJoyFromEnum(joy);
 8000a3a:	78fb      	ldrb	r3, [r7, #3]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fe2d 	bl	800069c <_Z14getJoyFromEnum13XInputControl>
 8000a42:	60f8      	str	r0, [r7, #12]
	if (joyData == nullptr) return 0;  // Not a joystick
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d101      	bne.n	8000a4e <_ZNK4Xbox12getJoystickXE13XInputControl+0x20>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e010      	b.n	8000a70 <_ZNK4Xbox12getJoystickXE13XInputControl+0x42>
	return (tx[joyData->x_high] << 8) | tx[joyData->x_low];
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	785b      	ldrb	r3, [r3, #1]
 8000a52:	461a      	mov	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	791b      	ldrb	r3, [r3, #4]
 8000a5a:	021b      	lsls	r3, r3, #8
 8000a5c:	b21a      	sxth	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4619      	mov	r1, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	440b      	add	r3, r1
 8000a68:	791b      	ldrb	r3, [r3, #4]
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	b21b      	sxth	r3, r3
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZN4Xbox4sendEv>:
	return ledPattern;
}


//Send an update packet to the PC
int Xbox::send() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	//if (!newData) return 0;  // TX data hasn't changed //here is problem
	//newData = false;

	return XUSB::send(tx, 20);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3304      	adds	r3, #4
 8000a84:	2114      	movs	r1, #20
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fd2d 	bl	80004e6 <_ZN4XUSB4sendEPhh>
 8000a8c:	4603      	mov	r3, r0

}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_ZN4Xbox7receiveEv>:

int Xbox::receive() {
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]

	if (XUSB::available() == 0) {
 8000a9e:	f7ff fd1b 	bl	80004d8 <_ZN4XUSB9availableEv>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	bf0c      	ite	eq
 8000aa8:	2301      	moveq	r3, #1
 8000aaa:	2300      	movne	r3, #0
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <_ZN4Xbox7receiveEv+0x20>
		return 0;  // No packet available
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e02f      	b.n	8000b16 <_ZN4Xbox7receiveEv+0x80>
	}

	// Grab packet and store it in rx array
	uint8_t rx[8];
	const int bytesRecv = XUSB::recv(rx, sizeof(rx));
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2108      	movs	r1, #8
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fd22 	bl	8000506 <_ZN4XUSB4recvEPhh>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	617b      	str	r3, [r7, #20]

	// Only process if received 3 or more bytes (min valid packet size)
	if (bytesRecv >= 3) {
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	dd23      	ble.n	8000b14 <_ZN4Xbox7receiveEv+0x7e>
		const uint8_t PacketType = rx[0];
 8000acc:	7a3b      	ldrb	r3, [r7, #8]
 8000ace:	74fb      	strb	r3, [r7, #19]

		// Rumble Packet
		if (PacketType == (uint8_t)XInputReceiveType::Rumble) {
 8000ad0:	7cfb      	ldrb	r3, [r7, #19]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d116      	bne.n	8000b04 <_ZN4Xbox7receiveEv+0x6e>
			rumble[RumbleLeft.bufferIndex] = rx[RumbleLeft.rxIndex];   // Big weight (Left grip)
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4611      	mov	r1, r2
 8000adc:	f107 0218 	add.w	r2, r7, #24
 8000ae0:	4413      	add	r3, r2
 8000ae2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	440b      	add	r3, r1
 8000aea:	76da      	strb	r2, [r3, #27]
			rumble[RumbleRight.bufferIndex] = rx[RumbleRight.rxIndex];  // Small weight (Right grip)
 8000aec:	2304      	movs	r3, #4
 8000aee:	2201      	movs	r2, #1
 8000af0:	4611      	mov	r1, r2
 8000af2:	f107 0218 	add.w	r2, r7, #24
 8000af6:	4413      	add	r3, r2
 8000af8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	440b      	add	r3, r1
 8000b00:	76da      	strb	r2, [r3, #27]
 8000b02:	e007      	b.n	8000b14 <_ZN4Xbox7receiveEv+0x7e>
		}
		// LED Packet
		else if (PacketType == (uint8_t)XInputReceiveType::LEDs) {
 8000b04:	7cfb      	ldrb	r3, [r7, #19]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d104      	bne.n	8000b14 <_ZN4Xbox7receiveEv+0x7e>
			parseLED(rx[2]);
 8000b0a:	7abb      	ldrb	r3, [r7, #10]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f806 	bl	8000b20 <_ZN4Xbox8parseLEDEh>
		}


	}

	return bytesRecv;
 8000b14:	697b      	ldr	r3, [r7, #20]

}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <_ZN4Xbox8parseLEDEh>:

void Xbox::parseLED(uint8_t leds) {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	70fb      	strb	r3, [r7, #3]
	if (leds > 0x0D) return;  // Not a known pattern
 8000b2c:	78fb      	ldrb	r3, [r7, #3]
 8000b2e:	2b0d      	cmp	r3, #13
 8000b30:	d832      	bhi.n	8000b98 <_ZN4Xbox8parseLEDEh+0x78>

	ledPattern = (XInputLEDPattern) leds;  // Save pattern
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	78fa      	ldrb	r2, [r7, #3]
 8000b36:	775a      	strb	r2, [r3, #29]
	switch (ledPattern) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7f5b      	ldrb	r3, [r3, #29]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b09      	cmp	r3, #9
 8000b40:	d82c      	bhi.n	8000b9c <_ZN4Xbox8parseLEDEh+0x7c>
 8000b42:	a201      	add	r2, pc, #4	; (adr r2, 8000b48 <_ZN4Xbox8parseLEDEh+0x28>)
 8000b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b48:	08000b71 	.word	0x08000b71
 8000b4c:	08000b71 	.word	0x08000b71
 8000b50:	08000b79 	.word	0x08000b79
 8000b54:	08000b81 	.word	0x08000b81
 8000b58:	08000b89 	.word	0x08000b89
 8000b5c:	08000b91 	.word	0x08000b91
 8000b60:	08000b79 	.word	0x08000b79
 8000b64:	08000b81 	.word	0x08000b81
 8000b68:	08000b89 	.word	0x08000b89
 8000b6c:	08000b91 	.word	0x08000b91
	case(XInputLEDPattern::Off):
	case(XInputLEDPattern::Blinking):
		player = 0;  // Not connected
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	769a      	strb	r2, [r3, #26]
		break;
 8000b76:	e012      	b.n	8000b9e <_ZN4Xbox8parseLEDEh+0x7e>
	case(XInputLEDPattern::On1):
	case(XInputLEDPattern::Flash1):
		player = 1;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	769a      	strb	r2, [r3, #26]
		break;
 8000b7e:	e00e      	b.n	8000b9e <_ZN4Xbox8parseLEDEh+0x7e>
	case(XInputLEDPattern::On2):
	case(XInputLEDPattern::Flash2):
		player = 2;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2202      	movs	r2, #2
 8000b84:	769a      	strb	r2, [r3, #26]
		break;
 8000b86:	e00a      	b.n	8000b9e <_ZN4Xbox8parseLEDEh+0x7e>
	case(XInputLEDPattern::On3):
	case(XInputLEDPattern::Flash3):
		player = 3;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	769a      	strb	r2, [r3, #26]
		break;
 8000b8e:	e006      	b.n	8000b9e <_ZN4Xbox8parseLEDEh+0x7e>
	case(XInputLEDPattern::On4):
	case(XInputLEDPattern::Flash4):
		player = 4;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2204      	movs	r2, #4
 8000b94:	769a      	strb	r2, [r3, #26]
		break;
 8000b96:	e002      	b.n	8000b9e <_ZN4Xbox8parseLEDEh+0x7e>
	if (leds > 0x0D) return;  // Not a known pattern
 8000b98:	bf00      	nop
 8000b9a:	e000      	b.n	8000b9e <_ZN4Xbox8parseLEDEh+0x7e>
	default: return;  // Pattern doesn't affect player #
 8000b9c:	bf00      	nop
	}
}
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <_ZN4Xbox16getRangeFromEnumE13XInputControl>:

Xbox::Range * Xbox::getRangeFromEnum(XInputControl ctrl) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	70fb      	strb	r3, [r7, #3]
	switch (ctrl) {
 8000bb4:	78fb      	ldrb	r3, [r7, #3]
 8000bb6:	3b0f      	subs	r3, #15
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d817      	bhi.n	8000bec <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x44>
 8000bbc:	a201      	add	r2, pc, #4	; (adr r2, 8000bc4 <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x1c>)
 8000bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc2:	bf00      	nop
 8000bc4:	08000bd5 	.word	0x08000bd5
 8000bc8:	08000bdb 	.word	0x08000bdb
 8000bcc:	08000be1 	.word	0x08000be1
 8000bd0:	08000be7 	.word	0x08000be7
	case(TRIGGER_LEFT): return &rangeTrigLeft;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3320      	adds	r3, #32
 8000bd8:	e009      	b.n	8000bee <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x46>
	case(TRIGGER_RIGHT): return &rangeTrigRight;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3328      	adds	r3, #40	; 0x28
 8000bde:	e006      	b.n	8000bee <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x46>
	case(JOY_LEFT): return &rangeJoyLeft;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3330      	adds	r3, #48	; 0x30
 8000be4:	e003      	b.n	8000bee <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x46>
	case(JOY_RIGHT): return &rangeJoyRight;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3338      	adds	r3, #56	; 0x38
 8000bea:	e000      	b.n	8000bee <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x46>
	default: return nullptr;
 8000bec:	2300      	movs	r3, #0
	}
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_>:

int32_t Xbox::rescaleInput(int32_t val, const Range& in, const Range& out) {
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b087      	sub	sp, #28
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
	if (val <= in.min) return out.min;  // Out of range -
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	dc02      	bgt.n	8000c18 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x1c>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	e026      	b.n	8000c66 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x6a>
	if (val >= in.max) return out.max;  // Out of range +
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	db02      	blt.n	8000c28 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x2c>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	e01e      	b.n	8000c66 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x6a>
	if (in.min == out.min && in.max == out.max) return val;  // Ranges identical
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d107      	bne.n	8000c44 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x48>
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d101      	bne.n	8000c44 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x48>
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	e010      	b.n	8000c66 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x6a>
	return map(val, in.min, in.max, out.min, out.max);
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	461a      	mov	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	461c      	mov	r4, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	4623      	mov	r3, r4
 8000c60:	f7ff fc70 	bl	8000544 <_Z3mapmmmmm>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd90      	pop	{r4, r7, pc}

08000c6e <_ZN4Xbox11invertInputEsRKNS_5RangeE>:

int16_t Xbox::invertInput(int16_t val, const Range& range) {
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	6039      	str	r1, [r7, #0]
 8000c78:	80fb      	strh	r3, [r7, #6]
	return range.max - val + range.min;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	b21b      	sxth	r3, r3
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_ZN4Xbox15setTriggerRangeEll>:

void Xbox::setTriggerRange(int32_t rangeMin, int32_t rangeMax) {
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	60f8      	str	r0, [r7, #12]
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
	setRange(TRIGGER_LEFT, rangeMin, rangeMax);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	210f      	movs	r1, #15
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f000 f820 	bl	8000cf6 <_ZN4Xbox8setRangeE13XInputControlll>
	setRange(TRIGGER_RIGHT, rangeMin, rangeMax);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68ba      	ldr	r2, [r7, #8]
 8000cba:	2110      	movs	r1, #16
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f000 f81a 	bl	8000cf6 <_ZN4Xbox8setRangeE13XInputControlll>
}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_ZN4Xbox16setJoystickRangeEll>:

void Xbox::setJoystickRange(int32_t rangeMin, int32_t rangeMax) {
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b084      	sub	sp, #16
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
	setRange(JOY_LEFT, rangeMin, rangeMax);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	2111      	movs	r1, #17
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f000 f80a 	bl	8000cf6 <_ZN4Xbox8setRangeE13XInputControlll>
	setRange(JOY_RIGHT, rangeMin, rangeMax);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	2112      	movs	r1, #18
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f000 f804 	bl	8000cf6 <_ZN4Xbox8setRangeE13XInputControlll>
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_ZN4Xbox8setRangeE13XInputControlll>:

void Xbox::setRange(XInputControl ctrl, int32_t rangeMin, int32_t rangeMax) {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	460b      	mov	r3, r1
 8000d04:	72fb      	strb	r3, [r7, #11]
	if (rangeMin >= rangeMax) return;  // Error: Max < Min
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	da0f      	bge.n	8000d2e <_ZN4Xbox8setRangeE13XInputControlll+0x38>

	Range * range = getRangeFromEnum(ctrl);
 8000d0e:	7afb      	ldrb	r3, [r7, #11]
 8000d10:	4619      	mov	r1, r3
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f7ff ff48 	bl	8000ba8 <_ZN4Xbox16getRangeFromEnumE13XInputControl>
 8000d18:	6178      	str	r0, [r7, #20]
	if (range == nullptr) return;  // Not an addressable range
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d008      	beq.n	8000d32 <_ZN4Xbox8setRangeE13XInputControlll+0x3c>

	range->min = rangeMin;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	601a      	str	r2, [r3, #0]
	range->max = rangeMax;
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	e002      	b.n	8000d34 <_ZN4Xbox8setRangeE13XInputControlll+0x3e>
	if (rangeMin >= rangeMax) return;  // Error: Max < Min
 8000d2e:	bf00      	nop
 8000d30:	e000      	b.n	8000d34 <_ZN4Xbox8setRangeE13XInputControlll+0x3e>
	if (range == nullptr) return;  // Not an addressable range
 8000d32:	bf00      	nop
}
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <_ZN4Xbox5resetEv>:

// Resets class back to initial values
void Xbox::reset() {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	// Reset control data (tx)
	autoSendOption = false;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	765a      	strb	r2, [r3, #25]
	releaseAll();  // Clear TX buffer
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff fe06 	bl	800095c <_ZN4Xbox10releaseAllEv>
	tx[0] = 0x00;  // Set tx message type
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	711a      	strb	r2, [r3, #4]
	tx[1] = 0x14;  // Set tx packet size (20)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2214      	movs	r2, #20
 8000d5a:	715a      	strb	r2, [r3, #5]

	// Reset received data (rx)
	player = 0;  // Not connected, no player
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	769a      	strb	r2, [r3, #26]
	memset((void*) rumble, 0x00, sizeof(rumble));  // Clear rumble values
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	331b      	adds	r3, #27
 8000d66:	2202      	movs	r2, #2
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f007 f92c 	bl	8007fc8 <memset>
	ledPattern = XInputLEDPattern::Off;  // No LEDs on
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	775a      	strb	r2, [r3, #29]

	// Reset rescale ranges
	setTriggerRange(XInputMap_Trigger::range.min, XInputMap_Trigger::range.max);
 8000d76:	2300      	movs	r3, #0
 8000d78:	22ff      	movs	r2, #255	; 0xff
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff8e 	bl	8000c9e <_ZN4Xbox15setTriggerRangeEll>
	setJoystickRange(XInputMap_Joystick::range.min, XInputMap_Joystick::range.max);
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <_ZN4Xbox5resetEv+0x64>)
 8000d84:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000d88:	4619      	mov	r1, r3
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff9d 	bl	8000cca <_ZN4Xbox16setJoystickRangeEll>
	this->send();
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff fe71 	bl	8000a78 <_ZN4Xbox4sendEv>
	// Clear user-set options


}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	ffff8000 	.word	0xffff8000

08000da4 <_ZN4XboxD1Ev>:

Xbox::~Xbox() {
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <_ZN4XboxD1Ev+0x1c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	080082b4 	.word	0x080082b4

08000dc4 <_ZN4XboxD0Ev>:
Xbox::~Xbox() {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
}
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ffe9 	bl	8000da4 <_ZN4XboxD1Ev>
 8000dd2:	2140      	movs	r1, #64	; 0x40
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f007 f897 	bl	8007f08 <_ZdlPvj>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_Z14GET_USB_STATUSv>:
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

uint8_t GET_USB_STATUS()
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
	if (hUsbDeviceFS.pClassData == NULL)
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_Z14GET_USB_STATUSv+0x24>)
 8000dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d101      	bne.n	8000df6 <_Z14GET_USB_STATUSv+0x12>
		  {
		    return (uint8_t)USBD_FAIL;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e003      	b.n	8000dfe <_Z14GET_USB_STATUSv+0x1a>
		  }

	return hUsbDeviceFS.dev_state;
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <_Z14GET_USB_STATUSv+0x24>)
 8000df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8000dfc:	b2db      	uxtb	r3, r3
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	20000514 	.word	0x20000514

08000e0c <_Z14IS_USB_SUSPENDv>:

bool IS_USB_SUSPEND()
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	return GET_USB_STATUS()==USBD_STATE_SUSPENDED;
 8000e10:	f7ff ffe8 	bl	8000de4 <_Z14GET_USB_STATUSv>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf0c      	ite	eq
 8000e1a:	2301      	moveq	r3, #1
 8000e1c:	2300      	movne	r3, #0
 8000e1e:	b2db      	uxtb	r3, r3
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <_Z10switch_ADCh>:

void switch_ADC(uint8_t adc)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]

	sConfig.Channel = adc;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = 1;
 8000e40:	2301      	movs	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000e44:	2307      	movs	r3, #7
 8000e46:	613b      	str	r3, [r7, #16]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e48:	f107 0308 	add.w	r3, r7, #8
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480a      	ldr	r0, [pc, #40]	; (8000e78 <_Z10switch_ADCh+0x54>)
 8000e50:	f001 f8de 	bl	8002010 <HAL_ADC_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	bf14      	ite	ne
 8000e5a:	2301      	movne	r3, #1
 8000e5c:	2300      	moveq	r3, #0
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <_Z10switch_ADCh+0x44>
	  {
	    Error_Handler();
 8000e64:	f000 fc9c 	bl	80017a0 <Error_Handler>
	  }

	  curr_adc=adc;
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <_Z10switch_ADCh+0x58>)
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	7013      	strb	r3, [r2, #0]

}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200003d8 	.word	0x200003d8
 8000e7c:	2000049c 	.word	0x2000049c

08000e80 <_Z11rotary_taskv>:

void rotary_task()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	if((HAL_GetTick()- TimeOfLastDebounce) > DelayofDebounce)
 8000e84:	f000 fed0 	bl	8001c28 <HAL_GetTick>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4a86      	ldr	r2, [pc, #536]	; (80010a4 <_Z11rotary_taskv+0x224>)
 8000e8c:	6812      	ldr	r2, [r2, #0]
 8000e8e:	1a9b      	subs	r3, r3, r2
 8000e90:	ee07 3a90 	vmov	s15, r3
 8000e94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e98:	4b83      	ldr	r3, [pc, #524]	; (80010a8 <_Z11rotary_taskv+0x228>)
 8000e9a:	edd3 7a00 	vldr	s15, [r3]
 8000e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea6:	bfcc      	ite	gt
 8000ea8:	2301      	movgt	r3, #1
 8000eaa:	2300      	movle	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 80f6 	beq.w	80010a0 <_Z11rotary_taskv+0x220>
	  {

	    if((PreviousCLK == 0)&&(PreviousDATA == 1))
 8000eb4:	4b7d      	ldr	r3, [pc, #500]	; (80010ac <_Z11rotary_taskv+0x22c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d133      	bne.n	8000f24 <_Z11rotary_taskv+0xa4>
 8000ebc:	4b7c      	ldr	r3, [pc, #496]	; (80010b0 <_Z11rotary_taskv+0x230>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d12f      	bne.n	8000f24 <_Z11rotary_taskv+0xa4>
	    {

	      if((HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT1)==1)&&(HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT2)==0))
 8000ec4:	2112      	movs	r1, #18
 8000ec6:	487b      	ldr	r0, [pc, #492]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8000ec8:	f001 fd56 	bl	8002978 <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d108      	bne.n	8000ee4 <_Z11rotary_taskv+0x64>
 8000ed2:	2113      	movs	r1, #19
 8000ed4:	4877      	ldr	r0, [pc, #476]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8000ed6:	f001 fd4f 	bl	8002978 <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <_Z11rotary_taskv+0x64>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <_Z11rotary_taskv+0x66>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d004      	beq.n	8000ef4 <_Z11rotary_taskv+0x74>
	      {
	        position++;
 8000eea:	4b73      	ldr	r3, [pc, #460]	; (80010b8 <_Z11rotary_taskv+0x238>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	4a71      	ldr	r2, [pc, #452]	; (80010b8 <_Z11rotary_taskv+0x238>)
 8000ef2:	6013      	str	r3, [r2, #0]
	      }
	       if((HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT1)==1)&&(HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT2)==1))
 8000ef4:	2112      	movs	r1, #18
 8000ef6:	486f      	ldr	r0, [pc, #444]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8000ef8:	f001 fd3e 	bl	8002978 <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d108      	bne.n	8000f14 <_Z11rotary_taskv+0x94>
 8000f02:	2113      	movs	r1, #19
 8000f04:	486b      	ldr	r0, [pc, #428]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8000f06:	f001 fd37 	bl	8002978 <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d101      	bne.n	8000f14 <_Z11rotary_taskv+0x94>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <_Z11rotary_taskv+0x96>
 8000f14:	2300      	movs	r3, #0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d004      	beq.n	8000f24 <_Z11rotary_taskv+0xa4>
	      {
	        position--;
 8000f1a:	4b67      	ldr	r3, [pc, #412]	; (80010b8 <_Z11rotary_taskv+0x238>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	4a65      	ldr	r2, [pc, #404]	; (80010b8 <_Z11rotary_taskv+0x238>)
 8000f22:	6013      	str	r3, [r2, #0]



	    }

	    if((PreviousCLK == 1)&&(PreviousDATA == 0))
 8000f24:	4b61      	ldr	r3, [pc, #388]	; (80010ac <_Z11rotary_taskv+0x22c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d133      	bne.n	8000f94 <_Z11rotary_taskv+0x114>
 8000f2c:	4b60      	ldr	r3, [pc, #384]	; (80010b0 <_Z11rotary_taskv+0x230>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d12f      	bne.n	8000f94 <_Z11rotary_taskv+0x114>
	    {

	      if((HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT1)==0)&&(HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT2)==1))
 8000f34:	2112      	movs	r1, #18
 8000f36:	485f      	ldr	r0, [pc, #380]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8000f38:	f001 fd1e 	bl	8002978 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d108      	bne.n	8000f54 <_Z11rotary_taskv+0xd4>
 8000f42:	2113      	movs	r1, #19
 8000f44:	485b      	ldr	r0, [pc, #364]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8000f46:	f001 fd17 	bl	8002978 <HAL_GPIO_ReadPin>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d101      	bne.n	8000f54 <_Z11rotary_taskv+0xd4>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <_Z11rotary_taskv+0xd6>
 8000f54:	2300      	movs	r3, #0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d004      	beq.n	8000f64 <_Z11rotary_taskv+0xe4>
	      {
	        position++;
 8000f5a:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <_Z11rotary_taskv+0x238>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	4a55      	ldr	r2, [pc, #340]	; (80010b8 <_Z11rotary_taskv+0x238>)
 8000f62:	6013      	str	r3, [r2, #0]
	      }
	       if((HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT1)==0)&&(HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT2)==0))
 8000f64:	2112      	movs	r1, #18
 8000f66:	4853      	ldr	r0, [pc, #332]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8000f68:	f001 fd06 	bl	8002978 <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d108      	bne.n	8000f84 <_Z11rotary_taskv+0x104>
 8000f72:	2113      	movs	r1, #19
 8000f74:	484f      	ldr	r0, [pc, #316]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8000f76:	f001 fcff 	bl	8002978 <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <_Z11rotary_taskv+0x104>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <_Z11rotary_taskv+0x106>
 8000f84:	2300      	movs	r3, #0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d004      	beq.n	8000f94 <_Z11rotary_taskv+0x114>
	      {
	        position--;
 8000f8a:	4b4b      	ldr	r3, [pc, #300]	; (80010b8 <_Z11rotary_taskv+0x238>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <_Z11rotary_taskv+0x238>)
 8000f92:	6013      	str	r3, [r2, #0]

	      // make_y_axis_querry(pos_to_angle(position));

	    }

	      if((PreviousCLK == 1)&&(PreviousDATA == 1))
 8000f94:	4b45      	ldr	r3, [pc, #276]	; (80010ac <_Z11rotary_taskv+0x22c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d133      	bne.n	8001004 <_Z11rotary_taskv+0x184>
 8000f9c:	4b44      	ldr	r3, [pc, #272]	; (80010b0 <_Z11rotary_taskv+0x230>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d12f      	bne.n	8001004 <_Z11rotary_taskv+0x184>
	    {

	      if((HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT1)==0)&&(HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT2)==1))
 8000fa4:	2112      	movs	r1, #18
 8000fa6:	4843      	ldr	r0, [pc, #268]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8000fa8:	f001 fce6 	bl	8002978 <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d108      	bne.n	8000fc4 <_Z11rotary_taskv+0x144>
 8000fb2:	2113      	movs	r1, #19
 8000fb4:	483f      	ldr	r0, [pc, #252]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8000fb6:	f001 fcdf 	bl	8002978 <HAL_GPIO_ReadPin>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d101      	bne.n	8000fc4 <_Z11rotary_taskv+0x144>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <_Z11rotary_taskv+0x146>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d004      	beq.n	8000fd4 <_Z11rotary_taskv+0x154>
	      {
	        position++;
 8000fca:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <_Z11rotary_taskv+0x238>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	4a39      	ldr	r2, [pc, #228]	; (80010b8 <_Z11rotary_taskv+0x238>)
 8000fd2:	6013      	str	r3, [r2, #0]
	      }
	       if((HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT1)==0)&&(HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT2)==0))
 8000fd4:	2112      	movs	r1, #18
 8000fd6:	4837      	ldr	r0, [pc, #220]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8000fd8:	f001 fcce 	bl	8002978 <HAL_GPIO_ReadPin>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d108      	bne.n	8000ff4 <_Z11rotary_taskv+0x174>
 8000fe2:	2113      	movs	r1, #19
 8000fe4:	4833      	ldr	r0, [pc, #204]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8000fe6:	f001 fcc7 	bl	8002978 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <_Z11rotary_taskv+0x174>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <_Z11rotary_taskv+0x176>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d004      	beq.n	8001004 <_Z11rotary_taskv+0x184>
	      {
	        position--;
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <_Z11rotary_taskv+0x238>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	4a2d      	ldr	r2, [pc, #180]	; (80010b8 <_Z11rotary_taskv+0x238>)
 8001002:	6013      	str	r3, [r2, #0]

	       //make_y_axis_querry(pos_to_angle(position));

	    }

	      if((PreviousCLK == 0)&&(PreviousDATA == 0))
 8001004:	4b29      	ldr	r3, [pc, #164]	; (80010ac <_Z11rotary_taskv+0x22c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d133      	bne.n	8001074 <_Z11rotary_taskv+0x1f4>
 800100c:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <_Z11rotary_taskv+0x230>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d12f      	bne.n	8001074 <_Z11rotary_taskv+0x1f4>
	    {

	      if((HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT1)==1)&&(HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT2)==0))
 8001014:	2112      	movs	r1, #18
 8001016:	4827      	ldr	r0, [pc, #156]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8001018:	f001 fcae 	bl	8002978 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	2b01      	cmp	r3, #1
 8001020:	d108      	bne.n	8001034 <_Z11rotary_taskv+0x1b4>
 8001022:	2113      	movs	r1, #19
 8001024:	4823      	ldr	r0, [pc, #140]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8001026:	f001 fca7 	bl	8002978 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <_Z11rotary_taskv+0x1b4>
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <_Z11rotary_taskv+0x1b6>
 8001034:	2300      	movs	r3, #0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d004      	beq.n	8001044 <_Z11rotary_taskv+0x1c4>
	      {
	        position++;
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <_Z11rotary_taskv+0x238>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <_Z11rotary_taskv+0x238>)
 8001042:	6013      	str	r3, [r2, #0]
	      }
	       if((HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT1)==1)&&(HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT2)==1))
 8001044:	2112      	movs	r1, #18
 8001046:	481b      	ldr	r0, [pc, #108]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8001048:	f001 fc96 	bl	8002978 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b01      	cmp	r3, #1
 8001050:	d108      	bne.n	8001064 <_Z11rotary_taskv+0x1e4>
 8001052:	2113      	movs	r1, #19
 8001054:	4817      	ldr	r0, [pc, #92]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8001056:	f001 fc8f 	bl	8002978 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b01      	cmp	r3, #1
 800105e:	d101      	bne.n	8001064 <_Z11rotary_taskv+0x1e4>
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <_Z11rotary_taskv+0x1e6>
 8001064:	2300      	movs	r3, #0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <_Z11rotary_taskv+0x1f4>
	      {
	        position--;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <_Z11rotary_taskv+0x238>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3b01      	subs	r3, #1
 8001070:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <_Z11rotary_taskv+0x238>)
 8001072:	6013      	str	r3, [r2, #0]
	       //make_y_axis_querry(pos_to_angle(position));

	    }


	    PreviousCLK=HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT1);
 8001074:	2112      	movs	r1, #18
 8001076:	480f      	ldr	r0, [pc, #60]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8001078:	f001 fc7e 	bl	8002978 <HAL_GPIO_ReadPin>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <_Z11rotary_taskv+0x22c>)
 8001082:	601a      	str	r2, [r3, #0]
	    PreviousDATA=HAL_GPIO_ReadPin(ROT_GPIO_GROUP,ROT2);
 8001084:	2113      	movs	r1, #19
 8001086:	480b      	ldr	r0, [pc, #44]	; (80010b4 <_Z11rotary_taskv+0x234>)
 8001088:	f001 fc76 	bl	8002978 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <_Z11rotary_taskv+0x230>)
 8001092:	601a      	str	r2, [r3, #0]



	    TimeOfLastDebounce=HAL_GetTick();
 8001094:	f000 fdc8 	bl	8001c28 <HAL_GetTick>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b01      	ldr	r3, [pc, #4]	; (80010a4 <_Z11rotary_taskv+0x224>)
 800109e:	601a      	str	r2, [r3, #0]

	  }
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000048c 	.word	0x2000048c
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000494 	.word	0x20000494
 80010b0:	20000498 	.word	0x20000498
 80010b4:	40020400 	.word	0x40020400
 80010b8:	20000484 	.word	0x20000484

080010bc <_Z11button_taskv>:

void button_task()
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

for(int j =0; j < 4; j++){
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	dc0c      	bgt.n	80010e6 <_Z11button_taskv+0x2a>

HAL_GPIO_WritePin(BUTTON_GPIO_GROUP,rows[j],HIGH);
 80010cc:	4a30      	ldr	r2, [pc, #192]	; (8001190 <_Z11button_taskv+0xd4>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	482e      	ldr	r0, [pc, #184]	; (8001194 <_Z11button_taskv+0xd8>)
 80010da:	f001 fc65 	bl	80029a8 <HAL_GPIO_WritePin>
for(int j =0; j < 4; j++){
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3301      	adds	r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	e7ef      	b.n	80010c6 <_Z11button_taskv+0xa>

}


HAL_GPIO_WritePin(BUTTON_GPIO_GROUP,rows[rowCounter],LOW);
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <_Z11button_taskv+0xdc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a29      	ldr	r2, [pc, #164]	; (8001190 <_Z11button_taskv+0xd4>)
 80010ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f0:	2200      	movs	r2, #0
 80010f2:	4619      	mov	r1, r3
 80010f4:	4827      	ldr	r0, [pc, #156]	; (8001194 <_Z11button_taskv+0xd8>)
 80010f6:	f001 fc57 	bl	80029a8 <HAL_GPIO_WritePin>

for(columnCounter=0;columnCounter<4;columnCounter++)
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <_Z11button_taskv+0xe0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <_Z11button_taskv+0xe0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b03      	cmp	r3, #3
 8001106:	dc33      	bgt.n	8001170 <_Z11button_taskv+0xb4>
{

if(!HAL_GPIO_ReadPin(BUTTON_GPIO_GROUP,columns[columnCounter]))
 8001108:	4b24      	ldr	r3, [pc, #144]	; (800119c <_Z11button_taskv+0xe0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <_Z11button_taskv+0xe4>)
 800110e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001112:	4619      	mov	r1, r3
 8001114:	481f      	ldr	r0, [pc, #124]	; (8001194 <_Z11button_taskv+0xd8>)
 8001116:	f001 fc2f 	bl	8002978 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf0c      	ite	eq
 8001120:	2301      	moveq	r3, #1
 8001122:	2300      	movne	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00d      	beq.n	8001146 <_Z11button_taskv+0x8a>
{
keysState |= (1<<(4*rowCounter + columnCounter));
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <_Z11button_taskv+0xdc>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	009a      	lsls	r2, r3, #2
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <_Z11button_taskv+0xe0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4413      	add	r3, r2
 8001136:	2201      	movs	r2, #1
 8001138:	409a      	lsls	r2, r3
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <_Z11button_taskv+0xe8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4313      	orrs	r3, r2
 8001140:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <_Z11button_taskv+0xe8>)
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	e00e      	b.n	8001164 <_Z11button_taskv+0xa8>
}
else
{
keysState &= ~(1<<(4*rowCounter + columnCounter));
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <_Z11button_taskv+0xdc>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	009a      	lsls	r2, r3, #2
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <_Z11button_taskv+0xe0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4413      	add	r3, r2
 8001152:	2201      	movs	r2, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43da      	mvns	r2, r3
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <_Z11button_taskv+0xe8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4013      	ands	r3, r2
 8001160:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <_Z11button_taskv+0xe8>)
 8001162:	6013      	str	r3, [r2, #0]
for(columnCounter=0;columnCounter<4;columnCounter++)
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <_Z11button_taskv+0xe0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a0c      	ldr	r2, [pc, #48]	; (800119c <_Z11button_taskv+0xe0>)
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e7c7      	b.n	8001100 <_Z11button_taskv+0x44>
}

}

rowCounter++;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <_Z11button_taskv+0xdc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <_Z11button_taskv+0xdc>)
 8001178:	6013      	str	r3, [r2, #0]

if(rowCounter>=4)
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <_Z11button_taskv+0xdc>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b03      	cmp	r3, #3
 8001180:	dd02      	ble.n	8001188 <_Z11button_taskv+0xcc>
{
  rowCounter=0;
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <_Z11button_taskv+0xdc>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
}

}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	080082c4 	.word	0x080082c4
 8001194:	40020400 	.word	0x40020400
 8001198:	20000474 	.word	0x20000474
 800119c:	20000478 	.word	0x20000478
 80011a0:	080082bc 	.word	0x080082bc
 80011a4:	20000490 	.word	0x20000490

080011a8 <_Z6pedalsP4Xbox>:


void pedals(Xbox* _pad)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

if(HAL_ADC_PollForConversion(&hadc1,10)== HAL_OK)
 80011b0:	210a      	movs	r1, #10
 80011b2:	481a      	ldr	r0, [pc, #104]	; (800121c <_Z6pedalsP4Xbox+0x74>)
 80011b4:	f000 fe93 	bl	8001ede <HAL_ADC_PollForConversion>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bf0c      	ite	eq
 80011be:	2301      	moveq	r3, #1
 80011c0:	2300      	movne	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d025      	beq.n	8001214 <_Z6pedalsP4Xbox+0x6c>
{


	uint16_t adc_read=0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	81fb      	strh	r3, [r7, #14]

adc_read=HAL_ADC_GetValue(&hadc1);
 80011cc:	4813      	ldr	r0, [pc, #76]	; (800121c <_Z6pedalsP4Xbox+0x74>)
 80011ce:	f000 ff11 	bl	8001ff4 <HAL_ADC_GetValue>
 80011d2:	4603      	mov	r3, r0
 80011d4:	81fb      	strh	r3, [r7, #14]


//out=map(adc_read,PEDAL_LOW,PEDAL_HIGH,0,255);

_pad->setTrigger((XInputControl)(TRIGGER_LEFT+curr_adc),adc_read);
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <_Z6pedalsP4Xbox+0x78>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	330f      	adds	r3, #15
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	89fa      	ldrh	r2, [r7, #14]
 80011e0:	4619      	mov	r1, r3
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff fb20 	bl	8000828 <_ZN4Xbox10setTriggerE13XInputControll>

HAL_ADC_Stop(&hadc1);
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <_Z6pedalsP4Xbox+0x74>)
 80011ea:	f000 fe45 	bl	8001e78 <HAL_ADC_Stop>

if(curr_adc==0)
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <_Z6pedalsP4Xbox+0x78>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d103      	bne.n	80011fe <_Z6pedalsP4Xbox+0x56>
{
	curr_adc=1;
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <_Z6pedalsP4Xbox+0x78>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	e002      	b.n	8001204 <_Z6pedalsP4Xbox+0x5c>
}
else
{
	curr_adc=0;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <_Z6pedalsP4Xbox+0x78>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
}

switch_ADC(curr_adc);
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <_Z6pedalsP4Xbox+0x78>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fe0b 	bl	8000e24 <_Z10switch_ADCh>

HAL_ADC_Start(&hadc1);
 800120e:	4803      	ldr	r0, [pc, #12]	; (800121c <_Z6pedalsP4Xbox+0x74>)
 8001210:	f000 fd7e 	bl	8001d10 <HAL_ADC_Start>
}

//memmove(msg+(sizeof(int)*2)+(i*sizeof(short)),(const void*)&out,sizeof(short));


}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200003d8 	.word	0x200003d8
 8001220:	2000049c 	.word	0x2000049c

08001224 <_Z17read_button_stateii>:

bool read_button_state(int row , int column)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	return keysState ^= (1<<(4*row + column));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	009a      	lsls	r2, r3, #2
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	4413      	add	r3, r2
 8001236:	2201      	movs	r2, #1
 8001238:	409a      	lsls	r2, r3
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <_Z17read_button_stateii+0x3c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4053      	eors	r3, r2
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <_Z17read_button_stateii+0x3c>)
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <_Z17read_button_stateii+0x3c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	bf14      	ite	ne
 800124c:	2301      	movne	r3, #1
 800124e:	2300      	moveq	r3, #0
 8001250:	b2db      	uxtb	r3, r3
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000490 	.word	0x20000490

08001264 <_Z14decode_buttonsP4Xbox>:

#define R3_BUTTON read_button_state(0,0)
#define L3_BUTTON read_button_state(3,0)

void decode_buttons(Xbox *pad)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	pad->setButton(DPAD_LEFT,_DPAD_LEFT);
 800126c:	2103      	movs	r1, #3
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff ffd8 	bl	8001224 <_Z17read_button_stateii>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	210d      	movs	r1, #13
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fa68 	bl	8000750 <_ZN4Xbox9setButtonEhb>
	pad->setButton(DPAD_RIGHT,_DPAD_RIGHT);
 8001280:	2103      	movs	r1, #3
 8001282:	2003      	movs	r0, #3
 8001284:	f7ff ffce 	bl	8001224 <_Z17read_button_stateii>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	210e      	movs	r1, #14
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fa5e 	bl	8000750 <_ZN4Xbox9setButtonEhb>
	pad->setButton(DPAD_UP,_DPAD_UP);
 8001294:	2103      	movs	r1, #3
 8001296:	2002      	movs	r0, #2
 8001298:	f7ff ffc4 	bl	8001224 <_Z17read_button_stateii>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	210b      	movs	r1, #11
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff fa54 	bl	8000750 <_ZN4Xbox9setButtonEhb>
	pad->setButton(DPAD_DOWN,_DPAD_DOWN);
 80012a8:	2103      	movs	r1, #3
 80012aa:	2001      	movs	r0, #1
 80012ac:	f7ff ffba 	bl	8001224 <_Z17read_button_stateii>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	210c      	movs	r1, #12
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff fa4a 	bl	8000750 <_ZN4Xbox9setButtonEhb>

	pad->setButton(BUTTON_A,A_BUTTON);
 80012bc:	2102      	movs	r1, #2
 80012be:	2000      	movs	r0, #0
 80012c0:	f7ff ffb0 	bl	8001224 <_Z17read_button_stateii>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	2101      	movs	r1, #1
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fa40 	bl	8000750 <_ZN4Xbox9setButtonEhb>
	pad->setButton(BUTTON_B,B_BUTTON);
 80012d0:	2102      	movs	r1, #2
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff ffa6 	bl	8001224 <_Z17read_button_stateii>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	2102      	movs	r1, #2
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fa36 	bl	8000750 <_ZN4Xbox9setButtonEhb>
	pad->setButton(BUTTON_X,X_BUTTON);
 80012e4:	2102      	movs	r1, #2
 80012e6:	2002      	movs	r0, #2
 80012e8:	f7ff ff9c 	bl	8001224 <_Z17read_button_stateii>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	2103      	movs	r1, #3
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fa2c 	bl	8000750 <_ZN4Xbox9setButtonEhb>
	pad->setButton(BUTTON_Y,Y_BUTTON);
 80012f8:	2102      	movs	r1, #2
 80012fa:	2003      	movs	r0, #3
 80012fc:	f7ff ff92 	bl	8001224 <_Z17read_button_stateii>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	2104      	movs	r1, #4
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fa22 	bl	8000750 <_ZN4Xbox9setButtonEhb>

	pad->setButton(BUTTON_RB,R2_BUTTON);
 800130c:	2101      	movs	r1, #1
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff ff88 	bl	8001224 <_Z17read_button_stateii>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	2106      	movs	r1, #6
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fa18 	bl	8000750 <_ZN4Xbox9setButtonEhb>
	pad->setButton(BUTTON_START,_START_BUTTON);
 8001320:	2101      	movs	r1, #1
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff ff7e 	bl	8001224 <_Z17read_button_stateii>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	2108      	movs	r1, #8
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fa0e 	bl	8000750 <_ZN4Xbox9setButtonEhb>
	pad->setButton(BUTTON_BACK,_BACK_BUTTON);
 8001334:	2101      	movs	r1, #1
 8001336:	2002      	movs	r0, #2
 8001338:	f7ff ff74 	bl	8001224 <_Z17read_button_stateii>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	2107      	movs	r1, #7
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fa04 	bl	8000750 <_ZN4Xbox9setButtonEhb>
	pad->setButton(BUTTON_LB,L2_BUTTON);
 8001348:	2101      	movs	r1, #1
 800134a:	2003      	movs	r0, #3
 800134c:	f7ff ff6a 	bl	8001224 <_Z17read_button_stateii>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	2105      	movs	r1, #5
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff f9fa 	bl	8000750 <_ZN4Xbox9setButtonEhb>

	pad->setButton(BUTTON_R3,R3_BUTTON);
 800135c:	2100      	movs	r1, #0
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff ff60 	bl	8001224 <_Z17read_button_stateii>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	210a      	movs	r1, #10
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff f9f0 	bl	8000750 <_ZN4Xbox9setButtonEhb>
	pad->setButton(BUTTON_L3,L3_BUTTON);
 8001370:	2100      	movs	r1, #0
 8001372:	2003      	movs	r0, #3
 8001374:	f7ff ff56 	bl	8001224 <_Z17read_button_stateii>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	2109      	movs	r1, #9
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff f9e6 	bl	8000750 <_ZN4Xbox9setButtonEhb>

}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <main>:


Xbox *gamepad;

int main(void)
{
 800138c:	b598      	push	{r3, r4, r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001390:	f000 fbe4 	bl	8001b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001394:	f000 f89c 	bl	80014d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001398:	f000 f988 	bl	80016ac <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800139c:	f000 f90c 	bl	80015b8 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 80013a0:	f000 f950 	bl	8001644 <_ZL12MX_I2C1_Initv>
  //MX_USB_DEVICE_Init();
  gamepad=new Xbox();
 80013a4:	2040      	movs	r0, #64	; 0x40
 80013a6:	f006 fdb1 	bl	8007f0c <_Znwj>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461c      	mov	r4, r3
 80013ae:	4620      	mov	r0, r4
 80013b0:	f7ff f98e 	bl	80006d0 <_ZN4XboxC1Ev>
 80013b4:	4b3e      	ldr	r3, [pc, #248]	; (80014b0 <main+0x124>)
 80013b6:	601c      	str	r4, [r3, #0]

  gamepad->setTriggerRange(PEDAL_LOW, PEDAL_HIGH);
 80013b8:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <main+0x124>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80013c0:	f240 21aa 	movw	r1, #682	; 0x2aa
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fc6a 	bl	8000c9e <_ZN4Xbox15setTriggerRangeEll>
  gamepad->setJoystickRange(-500,500);
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <main+0x124>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013d2:	4938      	ldr	r1, [pc, #224]	; (80014b4 <main+0x128>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fc78 	bl	8000cca <_ZN4Xbox16setJoystickRangeEll>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e0:	4835      	ldr	r0, [pc, #212]	; (80014b8 <main+0x12c>)
 80013e2:	f001 fae1 	bl	80029a8 <HAL_GPIO_WritePin>

HAL_Delay(2000);
 80013e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013ea:	f000 fc29 	bl	8001c40 <HAL_Delay>

HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f4:	4830      	ldr	r0, [pc, #192]	; (80014b8 <main+0x12c>)
 80013f6:	f001 fad7 	bl	80029a8 <HAL_GPIO_WritePin>

//bool but=false;

//gamepad->press(BUTTON_A);

HAL_ADC_Start(&hadc1);
 80013fa:	4830      	ldr	r0, [pc, #192]	; (80014bc <main+0x130>)
 80013fc:	f000 fc88 	bl	8001d10 <HAL_ADC_Start>
	 // USBD_LL_Transmit(&hUsbDeviceFS,0x81,tx,20);
	  //gamepad->setButton(BUTTON_A,but);

	  //HAL_Delay(2000);

	  if(IS_USB_SUSPEND())
 8001400:	f7ff fd04 	bl	8000e0c <_Z14IS_USB_SUSPENDv>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <main+0x8c>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001410:	4829      	ldr	r0, [pc, #164]	; (80014b8 <main+0x12c>)
 8001412:	f001 fac9 	bl	80029a8 <HAL_GPIO_WritePin>
 8001416:	e005      	b.n	8001424 <main+0x98>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001418:	2201      	movs	r2, #1
 800141a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141e:	4826      	ldr	r0, [pc, #152]	; (80014b8 <main+0x12c>)
 8001420:	f001 fac2 	bl	80029a8 <HAL_GPIO_WritePin>
	  }

	  while(!IS_USB_SUSPEND())
 8001424:	f7ff fcf2 	bl	8000e0c <_Z14IS_USB_SUSPENDv>
 8001428:	4603      	mov	r3, r0
 800142a:	f083 0301 	eor.w	r3, r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0e5      	beq.n	8001400 <main+0x74>
	  {

		  rotary_task();
 8001434:	f7ff fd24 	bl	8000e80 <_Z11rotary_taskv>

		  //Gamepad.yAxis(pos_to_angle(position));
		  if(position!=lastPos)
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <main+0x134>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <main+0x138>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d00b      	beq.n	800145c <main+0xd0>
		  {
			  gamepad->setJoystickX(JOY_LEFT, position);
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <main+0x124>)
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <main+0x134>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2300      	movs	r3, #0
 800144e:	2111      	movs	r1, #17
 8001450:	f7ff fa2c 	bl	80008ac <_ZN4Xbox12setJoystickXE13XInputControllb>

		   lastPos=position;
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <main+0x134>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1a      	ldr	r2, [pc, #104]	; (80014c4 <main+0x138>)
 800145a:	6013      	str	r3, [r2, #0]
		  }

		  if(stop-start>=BUTTON_REFRESH)
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <main+0x13c>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <main+0x140>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b63      	cmp	r3, #99	; 0x63
 8001468:	dd0c      	ble.n	8001484 <main+0xf8>
		  {

		  button_task();
 800146a:	f7ff fe27 	bl	80010bc <_Z11button_taskv>

		  decode_buttons(gamepad);
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <main+0x124>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fef6 	bl	8001264 <_Z14decode_buttonsP4Xbox>

		  start=HAL_GetTick();
 8001478:	f000 fbd6 	bl	8001c28 <HAL_GetTick>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <main+0x140>)
 8001482:	601a      	str	r2, [r3, #0]
		  }

		  pedals(gamepad);
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <main+0x124>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fe8d 	bl	80011a8 <_Z6pedalsP4Xbox>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_SET);
	  }*/

	 // but=!but;

	  gamepad->send();
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <main+0x124>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff faf0 	bl	8000a78 <_ZN4Xbox4sendEv>


	  gamepad->receive();
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <main+0x124>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fafa 	bl	8000a96 <_ZN4Xbox7receiveEv>
	 // HAL_Delay(500);

    /* USER CODE BEGIN 3 */

	  stop=HAL_GetTick();
 80014a2:	f000 fbc1 	bl	8001c28 <HAL_GetTick>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <main+0x13c>)
 80014ac:	601a      	str	r2, [r3, #0]
	  while(!IS_USB_SUSPEND())
 80014ae:	e7b9      	b.n	8001424 <main+0x98>
 80014b0:	200004a0 	.word	0x200004a0
 80014b4:	fffffe0c 	.word	0xfffffe0c
 80014b8:	40020800 	.word	0x40020800
 80014bc:	200003d8 	.word	0x200003d8
 80014c0:	20000484 	.word	0x20000484
 80014c4:	20000488 	.word	0x20000488
 80014c8:	20000480 	.word	0x20000480
 80014cc:	2000047c 	.word	0x2000047c

080014d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b094      	sub	sp, #80	; 0x50
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	2230      	movs	r2, #48	; 0x30
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f006 fd72 	bl	8007fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <_Z18SystemClock_Configv+0xe0>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a2c      	ldr	r2, [pc, #176]	; (80015b0 <_Z18SystemClock_Configv+0xe0>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
 8001504:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <_Z18SystemClock_Configv+0xe0>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <_Z18SystemClock_Configv+0xe4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800151c:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <_Z18SystemClock_Configv+0xe4>)
 800151e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <_Z18SystemClock_Configv+0xe4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001530:	2301      	movs	r3, #1
 8001532:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153a:	2302      	movs	r3, #2
 800153c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001542:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001544:	230f      	movs	r3, #15
 8001546:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001548:	2390      	movs	r3, #144	; 0x90
 800154a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800154c:	2302      	movs	r3, #2
 800154e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001550:	2305      	movs	r3, #5
 8001552:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001554:	f107 0320 	add.w	r3, r7, #32
 8001558:	4618      	mov	r0, r3
 800155a:	f002 fd07 	bl	8003f6c <HAL_RCC_OscConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf14      	ite	ne
 8001564:	2301      	movne	r3, #1
 8001566:	2300      	moveq	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800156e:	f000 f917 	bl	80017a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
 8001574:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001576:	2301      	movs	r3, #1
 8001578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f002 ff65 	bl	800445c <HAL_RCC_ClockConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf14      	ite	ne
 8001598:	2301      	movne	r3, #1
 800159a:	2300      	moveq	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80015a2:	f000 f8fd 	bl	80017a0 <Error_Handler>
  }
}
 80015a6:	bf00      	nop
 80015a8:	3750      	adds	r7, #80	; 0x50
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40007000 	.word	0x40007000

080015b8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <_ZL12MX_ADC1_Initv+0x7c>)
 80015be:	4a1e      	ldr	r2, [pc, #120]	; (8001638 <_ZL12MX_ADC1_Initv+0x80>)
 80015c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <_ZL12MX_ADC1_Initv+0x7c>)
 80015c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <_ZL12MX_ADC1_Initv+0x7c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <_ZL12MX_ADC1_Initv+0x7c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <_ZL12MX_ADC1_Initv+0x7c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <_ZL12MX_ADC1_Initv+0x7c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <_ZL12MX_ADC1_Initv+0x7c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <_ZL12MX_ADC1_Initv+0x7c>)
 80015ec:	4a13      	ldr	r2, [pc, #76]	; (800163c <_ZL12MX_ADC1_Initv+0x84>)
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <_ZL12MX_ADC1_Initv+0x7c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <_ZL12MX_ADC1_Initv+0x7c>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <_ZL12MX_ADC1_Initv+0x7c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <_ZL12MX_ADC1_Initv+0x7c>)
 8001606:	2201      	movs	r2, #1
 8001608:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800160a:	480a      	ldr	r0, [pc, #40]	; (8001634 <_ZL12MX_ADC1_Initv+0x7c>)
 800160c:	f000 fb3c 	bl	8001c88 <HAL_ADC_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	bf14      	ite	ne
 8001616:	2301      	movne	r3, #1
 8001618:	2300      	moveq	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <_ZL12MX_ADC1_Initv+0x6c>
  {
    Error_Handler();
 8001620:	f000 f8be 	bl	80017a0 <Error_Handler>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }*/

  switch_ADC(curr_adc);
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <_ZL12MX_ADC1_Initv+0x88>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fbfb 	bl	8000e24 <_Z10switch_ADCh>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200003d8 	.word	0x200003d8
 8001638:	40012000 	.word	0x40012000
 800163c:	0f000001 	.word	0x0f000001
 8001640:	2000049c 	.word	0x2000049c

08001644 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800164a:	4a16      	ldr	r2, [pc, #88]	; (80016a4 <_ZL12MX_I2C1_Initv+0x60>)
 800164c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001650:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <_ZL12MX_I2C1_Initv+0x64>)
 8001652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <_ZL12MX_I2C1_Initv+0x5c>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001680:	4807      	ldr	r0, [pc, #28]	; (80016a0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001682:	f001 f9ab 	bl	80029dc <HAL_I2C_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	bf14      	ite	ne
 800168c:	2301      	movne	r3, #1
 800168e:	2300      	moveq	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001696:	f000 f883 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000420 	.word	0x20000420
 80016a4:	40005400 	.word	0x40005400
 80016a8:	00061a80 	.word	0x00061a80

080016ac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <_ZL12MX_GPIO_Initv+0xe8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a32      	ldr	r2, [pc, #200]	; (8001794 <_ZL12MX_GPIO_Initv+0xe8>)
 80016cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b30      	ldr	r3, [pc, #192]	; (8001794 <_ZL12MX_GPIO_Initv+0xe8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <_ZL12MX_GPIO_Initv+0xe8>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a2b      	ldr	r2, [pc, #172]	; (8001794 <_ZL12MX_GPIO_Initv+0xe8>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b29      	ldr	r3, [pc, #164]	; (8001794 <_ZL12MX_GPIO_Initv+0xe8>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <_ZL12MX_GPIO_Initv+0xe8>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a24      	ldr	r2, [pc, #144]	; (8001794 <_ZL12MX_GPIO_Initv+0xe8>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <_ZL12MX_GPIO_Initv+0xe8>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800171c:	481e      	ldr	r0, [pc, #120]	; (8001798 <_ZL12MX_GPIO_Initv+0xec>)
 800171e:	f001 f943 	bl	80029a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001722:	2303      	movs	r3, #3
 8001724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	4619      	mov	r1, r3
 8001734:	4818      	ldr	r0, [pc, #96]	; (8001798 <_ZL12MX_GPIO_Initv+0xec>)
 8001736:	f000 ff9b 	bl	8002670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800173a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800173e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	4619      	mov	r1, r3
 8001752:	4811      	ldr	r0, [pc, #68]	; (8001798 <_ZL12MX_GPIO_Initv+0xec>)
 8001754:	f000 ff8c 	bl	8002670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 8001758:	f44f 739c 	mov.w	r3, #312	; 0x138
 800175c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001762:	2301      	movs	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	4619      	mov	r1, r3
 800176c:	480a      	ldr	r0, [pc, #40]	; (8001798 <_ZL12MX_GPIO_Initv+0xec>)
 800176e:	f000 ff7f 	bl	8002670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001776:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177c:	2301      	movs	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	4619      	mov	r1, r3
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <_ZL12MX_GPIO_Initv+0xf0>)
 8001788:	f000 ff72 	bl	8002670 <HAL_GPIO_Init>

}
 800178c:	bf00      	nop
 800178e:	3720      	adds	r7, #32
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	40020400 	.word	0x40020400
 800179c:	40020000 	.word	0x40020000

080017a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a4:	b672      	cpsid	i
}
 80017a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <Error_Handler+0x8>
	...

080017ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_MspInit+0x4c>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <HAL_MspInit+0x4c>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_MspInit+0x4c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_MspInit+0x4c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_MspInit+0x4c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_MspInit+0x4c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_ADC_MspInit+0x7c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d127      	bne.n	800186e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_ADC_MspInit+0x80>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a15      	ldr	r2, [pc, #84]	; (800187c <HAL_ADC_MspInit+0x80>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_ADC_MspInit+0x80>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <HAL_ADC_MspInit+0x80>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <HAL_ADC_MspInit+0x80>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_ADC_MspInit+0x80>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001856:	2303      	movs	r3, #3
 8001858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185a:	2303      	movs	r3, #3
 800185c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <HAL_ADC_MspInit+0x84>)
 800186a:	f000 ff01 	bl	8002670 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800186e:	bf00      	nop
 8001870:	3728      	adds	r7, #40	; 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40012000 	.word	0x40012000
 800187c:	40023800 	.word	0x40023800
 8001880:	40020000 	.word	0x40020000

08001884 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a19      	ldr	r2, [pc, #100]	; (8001908 <HAL_I2C_MspInit+0x84>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d12b      	bne.n	80018fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_I2C_MspInit+0x88>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a17      	ldr	r2, [pc, #92]	; (800190c <HAL_I2C_MspInit+0x88>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_I2C_MspInit+0x88>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018c2:	23c0      	movs	r3, #192	; 0xc0
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c6:	2312      	movs	r3, #18
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018d2:	2304      	movs	r3, #4
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <HAL_I2C_MspInit+0x8c>)
 80018de:	f000 fec7 	bl	8002670 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_I2C_MspInit+0x88>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_I2C_MspInit+0x88>)
 80018ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_I2C_MspInit+0x88>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018fe:	bf00      	nop
 8001900:	3728      	adds	r7, #40	; 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40005400 	.word	0x40005400
 800190c:	40023800 	.word	0x40023800
 8001910:	40020400 	.word	0x40020400

08001914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <NMI_Handler+0x4>

0800191a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <HardFault_Handler+0x4>

08001920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <MemManage_Handler+0x4>

08001926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <BusFault_Handler+0x4>

0800192c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <UsageFault_Handler+0x4>

08001932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001960:	f000 f94e 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <OTG_FS_IRQHandler+0x10>)
 800196e:	f001 fac9 	bl	8002f04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200009e4 	.word	0x200009e4

0800197c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
	return 1;
 8001980:	2301      	movs	r3, #1
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_kill>:

int _kill(int pid, int sig)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001996:	f006 fadd 	bl	8007f54 <__errno>
 800199a:	4603      	mov	r3, r0
 800199c:	2216      	movs	r2, #22
 800199e:	601a      	str	r2, [r3, #0]
	return -1;
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_exit>:

void _exit (int status)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ffe7 	bl	800198c <_kill>
	while (1) {}		/* Make sure we hang here */
 80019be:	e7fe      	b.n	80019be <_exit+0x12>

080019c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <_sbrk+0x5c>)
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <_sbrk+0x60>)
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <_sbrk+0x64>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <_sbrk+0x68>)
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d207      	bcs.n	8001a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f0:	f006 fab0 	bl	8007f54 <__errno>
 80019f4:	4603      	mov	r3, r0
 80019f6:	220c      	movs	r2, #12
 80019f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	e009      	b.n	8001a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <_sbrk+0x64>)
 8001a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20010000 	.word	0x20010000
 8001a20:	00000400 	.word	0x00000400
 8001a24:	200004a4 	.word	0x200004a4
 8001a28:	20000e00 	.word	0x20000e00

08001a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <SystemInit+0x20>)
 8001a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <SystemInit+0x20>)
 8001a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <usb_xinput_available>:
}*/

// Function to check if packets are available
// to be received on the RX endpoint
uint16_t usb_xinput_available()
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	return USBD_LL_GetRxDataSize(&hUsbDeviceFS,2);
 8001a54:	2102      	movs	r1, #2
 8001a56:	4803      	ldr	r0, [pc, #12]	; (8001a64 <usb_xinput_available+0x14>)
 8001a58:	f006 f9ff 	bl	8007e5a <USBD_LL_GetRxDataSize>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b29b      	uxth	r3, r3
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000514 	.word	0x20000514

08001a68 <usb_xinput_recv>:


// Function receives packets from the RX endpoint
uint8_t usb_xinput_recv(uint8_t *buffer, uint8_t nbytes)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	70fb      	strb	r3, [r7, #3]
	if (hUsbDeviceFS.pClassData == NULL)
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <usb_xinput_recv+0x30>)
 8001a76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <usb_xinput_recv+0x1a>
		  {
		    return (uint8_t)USBD_FAIL;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e006      	b.n	8001a90 <usb_xinput_recv+0x28>
		  }

		 USBD_LL_PrepareReceive(&hUsbDeviceFS,CUSTOM_HID_EPOUT_ADDR,buffer,nbytes);
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	2101      	movs	r1, #1
 8001a88:	4803      	ldr	r0, [pc, #12]	; (8001a98 <usb_xinput_recv+0x30>)
 8001a8a:	f006 f9c5 	bl	8007e18 <USBD_LL_PrepareReceive>

	return USBD_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000514 	.word	0x20000514

08001a9c <usb_xinput_send>:


// Function used to send packets out of the TX endpoint
// This is used to send button reports
uint8_t usb_xinput_send(uint8_t *buffer, uint8_t nbytes)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
	//while(USBD_LL_IsStallEP()){}

	if (hUsbDeviceFS.pClassData == NULL)
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <usb_xinput_send+0x5c>)
 8001aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <usb_xinput_send+0x1a>
	  {
	    return (uint8_t)USBD_FAIL;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e01c      	b.n	8001af0 <usb_xinput_send+0x54>
	  }

	USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <usb_xinput_send+0x5c>)
 8001ab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001abc:	60fb      	str	r3, [r7, #12]

	if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <usb_xinput_send+0x5c>)
 8001ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d111      	bne.n	8001aee <usb_xinput_send+0x52>
	  {
	    if (hhid->state == CUSTOM_HID_IDLE)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10a      	bne.n	8001aea <usb_xinput_send+0x4e>
	    {
	      hhid->state = CUSTOM_HID_BUSY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	      USBD_LL_Transmit(&hUsbDeviceFS,CUSTOM_HID_EPIN_ADDR,buffer,nbytes);
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	2181      	movs	r1, #129	; 0x81
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <usb_xinput_send+0x5c>)
 8001ae4:	f006 f977 	bl	8007dd6 <USBD_LL_Transmit>
 8001ae8:	e001      	b.n	8001aee <usb_xinput_send+0x52>
	    }
	    else
	    {
	      return (uint8_t)USBD_BUSY;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <usb_xinput_send+0x54>
	    }
	  }


	return USBD_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000514 	.word	0x20000514

08001afc <usb_xinput_init>:

void usb_xinput_init()
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	MX_USB_DEVICE_Init();
 8001b00:	f005 fd9a 	bl	8007638 <MX_USB_DEVICE_Init>
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b0e:	490e      	ldr	r1, [pc, #56]	; (8001b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b10:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b24:	4c0b      	ldr	r4, [pc, #44]	; (8001b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b32:	f7ff ff7b 	bl	8001a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f006 fa13 	bl	8007f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7ff fc27 	bl	800138c <main>
  bx  lr    
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b40:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	200003bc 	.word	0x200003bc
  ldr r2, =_sidata
 8001b4c:	080082f4 	.word	0x080082f4
  ldr r2, =_sbss
 8001b50:	200003bc 	.word	0x200003bc
  ldr r4, =_ebss
 8001b54:	20000dfc 	.word	0x20000dfc

08001b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <HAL_Init+0x40>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <HAL_Init+0x40>)
 8001b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <HAL_Init+0x40>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 fd31 	bl	80025ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8a:	200f      	movs	r0, #15
 8001b8c:	f000 f808 	bl	8001ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b90:	f7ff fe0c 	bl	80017ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_InitTick+0x54>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_InitTick+0x58>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 fd49 	bl	8002656 <HAL_SYSTICK_Config>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00e      	b.n	8001bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0f      	cmp	r3, #15
 8001bd2:	d80a      	bhi.n	8001bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f000 fd11 	bl	8002602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be0:	4a06      	ldr	r2, [pc, #24]	; (8001bfc <HAL_InitTick+0x5c>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000004 	.word	0x20000004
 8001bf8:	2000000c 	.word	0x2000000c
 8001bfc:	20000008 	.word	0x20000008

08001c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x20>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_IncTick+0x24>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <HAL_IncTick+0x24>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	2000000c 	.word	0x2000000c
 8001c24:	20000510 	.word	0x20000510

08001c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_GetTick+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000510 	.word	0x20000510

08001c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff ffee 	bl	8001c28 <HAL_GetTick>
 8001c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d005      	beq.n	8001c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_Delay+0x44>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c66:	bf00      	nop
 8001c68:	f7ff ffde 	bl	8001c28 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d8f7      	bhi.n	8001c68 <HAL_Delay+0x28>
  {
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000000c 	.word	0x2000000c

08001c88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e033      	b.n	8001d06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fda8 	bl	80017fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d118      	bne.n	8001cf8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cce:	f023 0302 	bic.w	r3, r3, #2
 8001cd2:	f043 0202 	orr.w	r2, r3, #2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 faba 	bl	8002254 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cf6:	e001      	b.n	8001cfc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_Start+0x1a>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e097      	b.n	8001e5a <HAL_ADC_Start+0x14a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d018      	beq.n	8001d72 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d50:	4b45      	ldr	r3, [pc, #276]	; (8001e68 <HAL_ADC_Start+0x158>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a45      	ldr	r2, [pc, #276]	; (8001e6c <HAL_ADC_Start+0x15c>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	0c9a      	lsrs	r2, r3, #18
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d64:	e002      	b.n	8001d6c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f9      	bne.n	8001d66 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d15f      	bne.n	8001e40 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001daa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dbe:	d106      	bne.n	8001dce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	f023 0206 	bic.w	r2, r3, #6
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	645a      	str	r2, [r3, #68]	; 0x44
 8001dcc:	e002      	b.n	8001dd4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ddc:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <HAL_ADC_Start+0x160>)
 8001dde:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001de8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 031f 	and.w	r3, r3, #31
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10f      	bne.n	8001e16 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d129      	bne.n	8001e58 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	e020      	b.n	8001e58 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a16      	ldr	r2, [pc, #88]	; (8001e74 <HAL_ADC_Start+0x164>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d11b      	bne.n	8001e58 <HAL_ADC_Start+0x148>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d114      	bne.n	8001e58 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	e00b      	b.n	8001e58 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f043 0210 	orr.w	r2, r3, #16
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000004 	.word	0x20000004
 8001e6c:	431bde83 	.word	0x431bde83
 8001e70:	40012300 	.word	0x40012300
 8001e74:	40012000 	.word	0x40012000

08001e78 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_Stop+0x16>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e021      	b.n	8001ed2 <HAL_ADC_Stop+0x5a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efa:	d113      	bne.n	8001f24 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f0a:	d10b      	bne.n	8001f24 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f043 0220 	orr.w	r2, r3, #32
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e063      	b.n	8001fec <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f24:	f7ff fe80 	bl	8001c28 <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f2a:	e021      	b.n	8001f70 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f32:	d01d      	beq.n	8001f70 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <HAL_ADC_PollForConversion+0x6c>
 8001f3a:	f7ff fe75 	bl	8001c28 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d212      	bcs.n	8001f70 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d00b      	beq.n	8001f70 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f043 0204 	orr.w	r2, r3, #4
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e03d      	b.n	8001fec <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d1d6      	bne.n	8001f2c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f06f 0212 	mvn.w	r2, #18
 8001f86:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d123      	bne.n	8001fea <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d11f      	bne.n	8001fea <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d111      	bne.n	8001fea <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d105      	bne.n	8001fea <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f043 0201 	orr.w	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_ADC_ConfigChannel+0x1c>
 8002028:	2302      	movs	r3, #2
 800202a:	e105      	b.n	8002238 <HAL_ADC_ConfigChannel+0x228>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b09      	cmp	r3, #9
 800203a:	d925      	bls.n	8002088 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68d9      	ldr	r1, [r3, #12]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	3b1e      	subs	r3, #30
 8002052:	2207      	movs	r2, #7
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43da      	mvns	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	400a      	ands	r2, r1
 8002060:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68d9      	ldr	r1, [r3, #12]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	4618      	mov	r0, r3
 8002074:	4603      	mov	r3, r0
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4403      	add	r3, r0
 800207a:	3b1e      	subs	r3, #30
 800207c:	409a      	lsls	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	e022      	b.n	80020ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6919      	ldr	r1, [r3, #16]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	2207      	movs	r2, #7
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	400a      	ands	r2, r1
 80020aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6919      	ldr	r1, [r3, #16]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4618      	mov	r0, r3
 80020be:	4603      	mov	r3, r0
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4403      	add	r3, r0
 80020c4:	409a      	lsls	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d824      	bhi.n	8002120 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	3b05      	subs	r3, #5
 80020e8:	221f      	movs	r2, #31
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	400a      	ands	r2, r1
 80020f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	4618      	mov	r0, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3b05      	subs	r3, #5
 8002112:	fa00 f203 	lsl.w	r2, r0, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	635a      	str	r2, [r3, #52]	; 0x34
 800211e:	e04c      	b.n	80021ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b0c      	cmp	r3, #12
 8002126:	d824      	bhi.n	8002172 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	3b23      	subs	r3, #35	; 0x23
 800213a:	221f      	movs	r2, #31
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43da      	mvns	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	400a      	ands	r2, r1
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	b29b      	uxth	r3, r3
 8002156:	4618      	mov	r0, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	3b23      	subs	r3, #35	; 0x23
 8002164:	fa00 f203 	lsl.w	r2, r0, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
 8002170:	e023      	b.n	80021ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	3b41      	subs	r3, #65	; 0x41
 8002184:	221f      	movs	r2, #31
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43da      	mvns	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	400a      	ands	r2, r1
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	4618      	mov	r0, r3
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	3b41      	subs	r3, #65	; 0x41
 80021ae:	fa00 f203 	lsl.w	r2, r0, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ba:	4b22      	ldr	r3, [pc, #136]	; (8002244 <HAL_ADC_ConfigChannel+0x234>)
 80021bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a21      	ldr	r2, [pc, #132]	; (8002248 <HAL_ADC_ConfigChannel+0x238>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d109      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x1cc>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b12      	cmp	r3, #18
 80021ce:	d105      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a19      	ldr	r2, [pc, #100]	; (8002248 <HAL_ADC_ConfigChannel+0x238>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d123      	bne.n	800222e <HAL_ADC_ConfigChannel+0x21e>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d003      	beq.n	80021f6 <HAL_ADC_ConfigChannel+0x1e6>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b11      	cmp	r3, #17
 80021f4:	d11b      	bne.n	800222e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b10      	cmp	r3, #16
 8002208:	d111      	bne.n	800222e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <HAL_ADC_ConfigChannel+0x23c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a10      	ldr	r2, [pc, #64]	; (8002250 <HAL_ADC_ConfigChannel+0x240>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	0c9a      	lsrs	r2, r3, #18
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002220:	e002      	b.n	8002228 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	3b01      	subs	r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f9      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40012300 	.word	0x40012300
 8002248:	40012000 	.word	0x40012000
 800224c:	20000004 	.word	0x20000004
 8002250:	431bde83 	.word	0x431bde83

08002254 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800225c:	4b79      	ldr	r3, [pc, #484]	; (8002444 <ADC_Init+0x1f0>)
 800225e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	431a      	orrs	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002288:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	021a      	lsls	r2, r3, #8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6899      	ldr	r1, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e6:	4a58      	ldr	r2, [pc, #352]	; (8002448 <ADC_Init+0x1f4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d022      	beq.n	8002332 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6899      	ldr	r1, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800231c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6899      	ldr	r1, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	e00f      	b.n	8002352 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002340:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002350:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0202 	bic.w	r2, r2, #2
 8002360:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6899      	ldr	r1, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	7e1b      	ldrb	r3, [r3, #24]
 800236c:	005a      	lsls	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01b      	beq.n	80023b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800238e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800239e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6859      	ldr	r1, [r3, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	3b01      	subs	r3, #1
 80023ac:	035a      	lsls	r2, r3, #13
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	e007      	b.n	80023c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	051a      	lsls	r2, r3, #20
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6899      	ldr	r1, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800240a:	025a      	lsls	r2, r3, #9
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002422:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6899      	ldr	r1, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	029a      	lsls	r2, r3, #10
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	609a      	str	r2, [r3, #8]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	40012300 	.word	0x40012300
 8002448:	0f000001 	.word	0x0f000001

0800244c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002468:	4013      	ands	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800247e:	4a04      	ldr	r2, [pc, #16]	; (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	60d3      	str	r3, [r2, #12]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <__NVIC_GetPriorityGrouping+0x18>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	f003 0307 	and.w	r3, r3, #7
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	db0b      	blt.n	80024da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	f003 021f 	and.w	r2, r3, #31
 80024c8:	4907      	ldr	r1, [pc, #28]	; (80024e8 <__NVIC_EnableIRQ+0x38>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	2001      	movs	r0, #1
 80024d2:	fa00 f202 	lsl.w	r2, r0, r2
 80024d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000e100 	.word	0xe000e100

080024ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	db0a      	blt.n	8002516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	490c      	ldr	r1, [pc, #48]	; (8002538 <__NVIC_SetPriority+0x4c>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	0112      	lsls	r2, r2, #4
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	440b      	add	r3, r1
 8002510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002514:	e00a      	b.n	800252c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4908      	ldr	r1, [pc, #32]	; (800253c <__NVIC_SetPriority+0x50>)
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	3b04      	subs	r3, #4
 8002524:	0112      	lsls	r2, r2, #4
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	440b      	add	r3, r1
 800252a:	761a      	strb	r2, [r3, #24]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000e100 	.word	0xe000e100
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f1c3 0307 	rsb	r3, r3, #7
 800255a:	2b04      	cmp	r3, #4
 800255c:	bf28      	it	cs
 800255e:	2304      	movcs	r3, #4
 8002560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3304      	adds	r3, #4
 8002566:	2b06      	cmp	r3, #6
 8002568:	d902      	bls.n	8002570 <NVIC_EncodePriority+0x30>
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3b03      	subs	r3, #3
 800256e:	e000      	b.n	8002572 <NVIC_EncodePriority+0x32>
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	f04f 32ff 	mov.w	r2, #4294967295
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	401a      	ands	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	43d9      	mvns	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002598:	4313      	orrs	r3, r2
         );
}
 800259a:	4618      	mov	r0, r3
 800259c:	3724      	adds	r7, #36	; 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b8:	d301      	bcc.n	80025be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00f      	b.n	80025de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025be:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <SysTick_Config+0x40>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c6:	210f      	movs	r1, #15
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f7ff ff8e 	bl	80024ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <SysTick_Config+0x40>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d6:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <SysTick_Config+0x40>)
 80025d8:	2207      	movs	r2, #7
 80025da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff29 	bl	800244c <__NVIC_SetPriorityGrouping>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002614:	f7ff ff3e 	bl	8002494 <__NVIC_GetPriorityGrouping>
 8002618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f7ff ff8e 	bl	8002540 <NVIC_EncodePriority>
 8002624:	4602      	mov	r2, r0
 8002626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff5d 	bl	80024ec <__NVIC_SetPriority>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff31 	bl	80024b0 <__NVIC_EnableIRQ>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ffa2 	bl	80025a8 <SysTick_Config>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	e159      	b.n	8002940 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800268c:	2201      	movs	r2, #1
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	f040 8148 	bne.w	800293a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d005      	beq.n	80026c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d130      	bne.n	8002724 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	2203      	movs	r2, #3
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026f8:	2201      	movs	r2, #1
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 0201 	and.w	r2, r3, #1
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b03      	cmp	r3, #3
 800272e:	d017      	beq.n	8002760 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	2203      	movs	r2, #3
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d123      	bne.n	80027b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	08da      	lsrs	r2, r3, #3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3208      	adds	r2, #8
 8002774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	220f      	movs	r2, #15
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	08da      	lsrs	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3208      	adds	r2, #8
 80027ae:	69b9      	ldr	r1, [r7, #24]
 80027b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	2203      	movs	r2, #3
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0203 	and.w	r2, r3, #3
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80a2 	beq.w	800293a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	4b57      	ldr	r3, [pc, #348]	; (8002958 <HAL_GPIO_Init+0x2e8>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4a56      	ldr	r2, [pc, #344]	; (8002958 <HAL_GPIO_Init+0x2e8>)
 8002800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002804:	6453      	str	r3, [r2, #68]	; 0x44
 8002806:	4b54      	ldr	r3, [pc, #336]	; (8002958 <HAL_GPIO_Init+0x2e8>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002812:	4a52      	ldr	r2, [pc, #328]	; (800295c <HAL_GPIO_Init+0x2ec>)
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	089b      	lsrs	r3, r3, #2
 8002818:	3302      	adds	r3, #2
 800281a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	220f      	movs	r2, #15
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a49      	ldr	r2, [pc, #292]	; (8002960 <HAL_GPIO_Init+0x2f0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d019      	beq.n	8002872 <HAL_GPIO_Init+0x202>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a48      	ldr	r2, [pc, #288]	; (8002964 <HAL_GPIO_Init+0x2f4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <HAL_GPIO_Init+0x1fe>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a47      	ldr	r2, [pc, #284]	; (8002968 <HAL_GPIO_Init+0x2f8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00d      	beq.n	800286a <HAL_GPIO_Init+0x1fa>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a46      	ldr	r2, [pc, #280]	; (800296c <HAL_GPIO_Init+0x2fc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <HAL_GPIO_Init+0x1f6>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a45      	ldr	r2, [pc, #276]	; (8002970 <HAL_GPIO_Init+0x300>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <HAL_GPIO_Init+0x1f2>
 800285e:	2304      	movs	r3, #4
 8002860:	e008      	b.n	8002874 <HAL_GPIO_Init+0x204>
 8002862:	2307      	movs	r3, #7
 8002864:	e006      	b.n	8002874 <HAL_GPIO_Init+0x204>
 8002866:	2303      	movs	r3, #3
 8002868:	e004      	b.n	8002874 <HAL_GPIO_Init+0x204>
 800286a:	2302      	movs	r3, #2
 800286c:	e002      	b.n	8002874 <HAL_GPIO_Init+0x204>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_GPIO_Init+0x204>
 8002872:	2300      	movs	r3, #0
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	f002 0203 	and.w	r2, r2, #3
 800287a:	0092      	lsls	r2, r2, #2
 800287c:	4093      	lsls	r3, r2
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002884:	4935      	ldr	r1, [pc, #212]	; (800295c <HAL_GPIO_Init+0x2ec>)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	3302      	adds	r3, #2
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002892:	4b38      	ldr	r3, [pc, #224]	; (8002974 <HAL_GPIO_Init+0x304>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028b6:	4a2f      	ldr	r2, [pc, #188]	; (8002974 <HAL_GPIO_Init+0x304>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028bc:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_GPIO_Init+0x304>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028e0:	4a24      	ldr	r2, [pc, #144]	; (8002974 <HAL_GPIO_Init+0x304>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028e6:	4b23      	ldr	r3, [pc, #140]	; (8002974 <HAL_GPIO_Init+0x304>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800290a:	4a1a      	ldr	r2, [pc, #104]	; (8002974 <HAL_GPIO_Init+0x304>)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_GPIO_Init+0x304>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002934:	4a0f      	ldr	r2, [pc, #60]	; (8002974 <HAL_GPIO_Init+0x304>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3301      	adds	r3, #1
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	2b0f      	cmp	r3, #15
 8002944:	f67f aea2 	bls.w	800268c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800
 800295c:	40013800 	.word	0x40013800
 8002960:	40020000 	.word	0x40020000
 8002964:	40020400 	.word	0x40020400
 8002968:	40020800 	.word	0x40020800
 800296c:	40020c00 	.word	0x40020c00
 8002970:	40021000 	.word	0x40021000
 8002974:	40013c00 	.word	0x40013c00

08002978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	887b      	ldrh	r3, [r7, #2]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
 8002994:	e001      	b.n	800299a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800299a:	7bfb      	ldrb	r3, [r7, #15]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	807b      	strh	r3, [r7, #2]
 80029b4:	4613      	mov	r3, r2
 80029b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b8:	787b      	ldrb	r3, [r7, #1]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029be:	887a      	ldrh	r2, [r7, #2]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029c4:	e003      	b.n	80029ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029c6:	887b      	ldrh	r3, [r7, #2]
 80029c8:	041a      	lsls	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	619a      	str	r2, [r3, #24]
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e12b      	b.n	8002c46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe ff3e 	bl	8001884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2224      	movs	r2, #36	; 0x24
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a40:	f001 feb4 	bl	80047ac <HAL_RCC_GetPCLK1Freq>
 8002a44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4a81      	ldr	r2, [pc, #516]	; (8002c50 <HAL_I2C_Init+0x274>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d807      	bhi.n	8002a60 <HAL_I2C_Init+0x84>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4a80      	ldr	r2, [pc, #512]	; (8002c54 <HAL_I2C_Init+0x278>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	bf94      	ite	ls
 8002a58:	2301      	movls	r3, #1
 8002a5a:	2300      	movhi	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	e006      	b.n	8002a6e <HAL_I2C_Init+0x92>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a7d      	ldr	r2, [pc, #500]	; (8002c58 <HAL_I2C_Init+0x27c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	bf94      	ite	ls
 8002a68:	2301      	movls	r3, #1
 8002a6a:	2300      	movhi	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0e7      	b.n	8002c46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4a78      	ldr	r2, [pc, #480]	; (8002c5c <HAL_I2C_Init+0x280>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	0c9b      	lsrs	r3, r3, #18
 8002a80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4a6a      	ldr	r2, [pc, #424]	; (8002c50 <HAL_I2C_Init+0x274>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d802      	bhi.n	8002ab0 <HAL_I2C_Init+0xd4>
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	3301      	adds	r3, #1
 8002aae:	e009      	b.n	8002ac4 <HAL_I2C_Init+0xe8>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	4a69      	ldr	r2, [pc, #420]	; (8002c60 <HAL_I2C_Init+0x284>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	099b      	lsrs	r3, r3, #6
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ad6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	495c      	ldr	r1, [pc, #368]	; (8002c50 <HAL_I2C_Init+0x274>)
 8002ae0:	428b      	cmp	r3, r1
 8002ae2:	d819      	bhi.n	8002b18 <HAL_I2C_Init+0x13c>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1e59      	subs	r1, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af2:	1c59      	adds	r1, r3, #1
 8002af4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002af8:	400b      	ands	r3, r1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_I2C_Init+0x138>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1e59      	subs	r1, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b12:	e051      	b.n	8002bb8 <HAL_I2C_Init+0x1dc>
 8002b14:	2304      	movs	r3, #4
 8002b16:	e04f      	b.n	8002bb8 <HAL_I2C_Init+0x1dc>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d111      	bne.n	8002b44 <HAL_I2C_Init+0x168>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1e58      	subs	r0, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	440b      	add	r3, r1
 8002b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b32:	3301      	adds	r3, #1
 8002b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	e012      	b.n	8002b6a <HAL_I2C_Init+0x18e>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1e58      	subs	r0, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	0099      	lsls	r1, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf0c      	ite	eq
 8002b64:	2301      	moveq	r3, #1
 8002b66:	2300      	movne	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_I2C_Init+0x196>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e022      	b.n	8002bb8 <HAL_I2C_Init+0x1dc>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10e      	bne.n	8002b98 <HAL_I2C_Init+0x1bc>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1e58      	subs	r0, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6859      	ldr	r1, [r3, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	440b      	add	r3, r1
 8002b88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b96:	e00f      	b.n	8002bb8 <HAL_I2C_Init+0x1dc>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1e58      	subs	r0, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6859      	ldr	r1, [r3, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	0099      	lsls	r1, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	6809      	ldr	r1, [r1, #0]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002be6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6911      	ldr	r1, [r2, #16]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68d2      	ldr	r2, [r2, #12]
 8002bf2:	4311      	orrs	r1, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	000186a0 	.word	0x000186a0
 8002c54:	001e847f 	.word	0x001e847f
 8002c58:	003d08ff 	.word	0x003d08ff
 8002c5c:	431bde83 	.word	0x431bde83
 8002c60:	10624dd3 	.word	0x10624dd3

08002c64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c66:	b08f      	sub	sp, #60	; 0x3c
 8002c68:	af0a      	add	r7, sp, #40	; 0x28
 8002c6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e10f      	b.n	8002e96 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d106      	bne.n	8002c96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f004 fe2f 	bl	80078f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 fea2 	bl	80049fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	687e      	ldr	r6, [r7, #4]
 8002cc2:	466d      	mov	r5, sp
 8002cc4:	f106 0410 	add.w	r4, r6, #16
 8002cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cd8:	1d33      	adds	r3, r6, #4
 8002cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cdc:	6838      	ldr	r0, [r7, #0]
 8002cde:	f001 fd79 	bl	80047d4 <USB_CoreInit>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0d0      	b.n	8002e96 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 fe90 	bl	8004a20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]
 8002d04:	e04a      	b.n	8002d9c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	333d      	adds	r3, #61	; 0x3d
 8002d16:	2201      	movs	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d1a:	7bfa      	ldrb	r2, [r7, #15]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	333c      	adds	r3, #60	; 0x3c
 8002d2a:	7bfa      	ldrb	r2, [r7, #15]
 8002d2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	b298      	uxth	r0, r3
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	3342      	adds	r3, #66	; 0x42
 8002d42:	4602      	mov	r2, r0
 8002d44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d46:	7bfa      	ldrb	r2, [r7, #15]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	333f      	adds	r3, #63	; 0x3f
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	3344      	adds	r3, #68	; 0x44
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3348      	adds	r3, #72	; 0x48
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d82:	7bfa      	ldrb	r2, [r7, #15]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3350      	adds	r3, #80	; 0x50
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	7bfa      	ldrb	r2, [r7, #15]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d3af      	bcc.n	8002d06 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	73fb      	strb	r3, [r7, #15]
 8002daa:	e044      	b.n	8002e36 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dac:	7bfa      	ldrb	r2, [r7, #15]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dc2:	7bfa      	ldrb	r2, [r7, #15]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002dd4:	7bfa      	ldrb	r2, [r7, #15]
 8002dd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dd8:	7bfa      	ldrb	r2, [r7, #15]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dee:	7bfa      	ldrb	r2, [r7, #15]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	3301      	adds	r3, #1
 8002e34:	73fb      	strb	r3, [r7, #15]
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d3b5      	bcc.n	8002dac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	687e      	ldr	r6, [r7, #4]
 8002e48:	466d      	mov	r5, sp
 8002e4a:	f106 0410 	add.w	r4, r6, #16
 8002e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e5e:	1d33      	adds	r3, r6, #4
 8002e60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e62:	6838      	ldr	r0, [r7, #0]
 8002e64:	f001 fe28 	bl	8004ab8 <USB_DevInit>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e00d      	b.n	8002e96 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f002 fea4 	bl	8005bdc <USB_DevDisconnect>

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e9e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_PCD_Start+0x1c>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e020      	b.n	8002efc <HAL_PCD_Start+0x5e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d109      	bne.n	8002ede <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d005      	beq.n	8002ede <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 fd7a 	bl	80049dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f002 fe54 	bl	8005b9a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b08d      	sub	sp, #52	; 0x34
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f002 ff12 	bl	8005d44 <USB_GetMode>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 839d 	bne.w	8003662 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f002 fe76 	bl	8005c1e <USB_ReadInterrupts>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8393 	beq.w	8003660 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f002 fe6d 	bl	8005c1e <USB_ReadInterrupts>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d107      	bne.n	8002f5e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f002 0202 	and.w	r2, r2, #2
 8002f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f002 fe5b 	bl	8005c1e <USB_ReadInterrupts>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b10      	cmp	r3, #16
 8002f70:	d161      	bne.n	8003036 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0210 	bic.w	r2, r2, #16
 8002f80:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	f003 020f 	and.w	r2, r3, #15
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	0c5b      	lsrs	r3, r3, #17
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d124      	bne.n	8002ff8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d035      	beq.n	8003026 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	6a38      	ldr	r0, [r7, #32]
 8002fce:	f002 fc92 	bl	80058f6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fde:	441a      	add	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	699a      	ldr	r2, [r3, #24]
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	091b      	lsrs	r3, r3, #4
 8002fec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ff0:	441a      	add	r2, r3
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	619a      	str	r2, [r3, #24]
 8002ff6:	e016      	b.n	8003026 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	0c5b      	lsrs	r3, r3, #17
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	2b06      	cmp	r3, #6
 8003002:	d110      	bne.n	8003026 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800300a:	2208      	movs	r2, #8
 800300c:	4619      	mov	r1, r3
 800300e:	6a38      	ldr	r0, [r7, #32]
 8003010:	f002 fc71 	bl	80058f6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	699a      	ldr	r2, [r3, #24]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003020:	441a      	add	r2, r3
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0210 	orr.w	r2, r2, #16
 8003034:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f002 fdef 	bl	8005c1e <USB_ReadInterrupts>
 8003040:	4603      	mov	r3, r0
 8003042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003046:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800304a:	d16e      	bne.n	800312a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f002 fdf5 	bl	8005c44 <USB_ReadDevAllOutEpInterrupt>
 800305a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800305c:	e062      	b.n	8003124 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d057      	beq.n	8003118 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f002 fe1a 	bl	8005cac <USB_ReadDevOutEPInterrupt>
 8003078:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00c      	beq.n	800309e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	4413      	add	r3, r2
 800308c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003090:	461a      	mov	r2, r3
 8003092:	2301      	movs	r3, #1
 8003094:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003096:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fdb1 	bl	8003c00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00c      	beq.n	80030c2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b4:	461a      	mov	r2, r3
 80030b6:	2308      	movs	r3, #8
 80030b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80030ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 feab 	bl	8003e18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d8:	461a      	mov	r2, r3
 80030da:	2310      	movs	r3, #16
 80030dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f4:	461a      	mov	r2, r3
 80030f6:	2320      	movs	r3, #32
 80030f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d009      	beq.n	8003118 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	4413      	add	r3, r2
 800310c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003110:	461a      	mov	r2, r3
 8003112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003116:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	3301      	adds	r3, #1
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	085b      	lsrs	r3, r3, #1
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	2b00      	cmp	r3, #0
 8003128:	d199      	bne.n	800305e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f002 fd75 	bl	8005c1e <USB_ReadInterrupts>
 8003134:	4603      	mov	r3, r0
 8003136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800313e:	f040 80c0 	bne.w	80032c2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f002 fd96 	bl	8005c78 <USB_ReadDevAllInEpInterrupt>
 800314c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003152:	e0b2      	b.n	80032ba <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80a7 	beq.w	80032ae <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f002 fdbc 	bl	8005ce8 <USB_ReadDevInEPInterrupt>
 8003170:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d057      	beq.n	800322c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	2201      	movs	r2, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	43db      	mvns	r3, r3
 8003196:	69f9      	ldr	r1, [r7, #28]
 8003198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800319c:	4013      	ands	r3, r2
 800319e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ac:	461a      	mov	r2, r3
 80031ae:	2301      	movs	r3, #1
 80031b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d132      	bne.n	8003220 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	3348      	adds	r3, #72	; 0x48
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4403      	add	r3, r0
 80031da:	3344      	adds	r3, #68	; 0x44
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4419      	add	r1, r3
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4403      	add	r3, r0
 80031ee:	3348      	adds	r3, #72	; 0x48
 80031f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d113      	bne.n	8003220 <HAL_PCD_IRQHandler+0x31c>
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	3350      	adds	r3, #80	; 0x50
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d108      	bne.n	8003220 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003218:	461a      	mov	r2, r3
 800321a:	2101      	movs	r1, #1
 800321c:	f002 fdc4 	bl	8005da8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	b2db      	uxtb	r3, r3
 8003224:	4619      	mov	r1, r3
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f004 fbe5 	bl	80079f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003242:	461a      	mov	r2, r3
 8003244:	2308      	movs	r3, #8
 8003246:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800325e:	461a      	mov	r2, r3
 8003260:	2310      	movs	r3, #16
 8003262:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	4413      	add	r3, r2
 8003276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327a:	461a      	mov	r2, r3
 800327c:	2340      	movs	r3, #64	; 0x40
 800327e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d008      	beq.n	800329c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	4413      	add	r3, r2
 8003292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003296:	461a      	mov	r2, r3
 8003298:	2302      	movs	r3, #2
 800329a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fc1b 	bl	8003ae4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	3301      	adds	r3, #1
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f47f af49 	bne.w	8003154 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f002 fca9 	bl	8005c1e <USB_ReadInterrupts>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032d6:	d122      	bne.n	800331e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d108      	bne.n	8003308 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032fe:	2100      	movs	r1, #0
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fe27 	bl	8003f54 <HAL_PCDEx_LPM_Callback>
 8003306:	e002      	b.n	800330e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f004 fbe1 	bl	8007ad0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800331c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f002 fc7b 	bl	8005c1e <USB_ReadInterrupts>
 8003328:	4603      	mov	r3, r0
 800332a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003332:	d112      	bne.n	800335a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d102      	bne.n	800334a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f004 fb9d 	bl	8007a84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003358:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f002 fc5d 	bl	8005c1e <USB_ReadInterrupts>
 8003364:	4603      	mov	r3, r0
 8003366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336e:	f040 80c7 	bne.w	8003500 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2110      	movs	r1, #16
 800338c:	4618      	mov	r0, r3
 800338e:	f001 fcf7 	bl	8004d80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003392:	2300      	movs	r3, #0
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003396:	e056      	b.n	8003446 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a4:	461a      	mov	r2, r3
 80033a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033bc:	0151      	lsls	r1, r2, #5
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	440a      	add	r2, r1
 80033c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033ca:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033dc:	0151      	lsls	r1, r2, #5
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	440a      	add	r2, r1
 80033e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f8:	461a      	mov	r2, r3
 80033fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003410:	0151      	lsls	r1, r2, #5
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	440a      	add	r2, r1
 8003416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800341a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800341e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003430:	0151      	lsls	r1, r2, #5
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	440a      	add	r2, r1
 8003436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800343a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800343e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	3301      	adds	r3, #1
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800344c:	429a      	cmp	r2, r3
 800344e:	d3a3      	bcc.n	8003398 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800345e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003462:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	2b00      	cmp	r3, #0
 800346a:	d016      	beq.n	800349a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800347c:	f043 030b 	orr.w	r3, r3, #11
 8003480:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003492:	f043 030b 	orr.w	r3, r3, #11
 8003496:	6453      	str	r3, [r2, #68]	; 0x44
 8003498:	e015      	b.n	80034c6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80034b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c0:	f043 030b 	orr.w	r3, r3, #11
 80034c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034ea:	461a      	mov	r2, r3
 80034ec:	f002 fc5c 	bl	8005da8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80034fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f002 fb8a 	bl	8005c1e <USB_ReadInterrupts>
 800350a:	4603      	mov	r3, r0
 800350c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003514:	d124      	bne.n	8003560 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f002 fc20 	bl	8005d60 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f001 fc88 	bl	8004e3a <USB_GetDevSpeed>
 800352a:	4603      	mov	r3, r0
 800352c:	461a      	mov	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681c      	ldr	r4, [r3, #0]
 8003536:	f001 f92d 	bl	8004794 <HAL_RCC_GetHCLKFreq>
 800353a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	4620      	mov	r0, r4
 8003546:	f001 f9a7 	bl	8004898 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f004 fa7b 	bl	8007a46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800355e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f002 fb5a 	bl	8005c1e <USB_ReadInterrupts>
 800356a:	4603      	mov	r3, r0
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b08      	cmp	r3, #8
 8003572:	d10a      	bne.n	800358a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f004 fa58 	bl	8007a2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f002 0208 	and.w	r2, r2, #8
 8003588:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f002 fb45 	bl	8005c1e <USB_ReadInterrupts>
 8003594:	4603      	mov	r3, r0
 8003596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800359a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800359e:	d10f      	bne.n	80035c0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	4619      	mov	r1, r3
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f004 fab0 	bl	8007b10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 fb2a 	bl	8005c1e <USB_ReadInterrupts>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d4:	d10f      	bne.n	80035f6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	4619      	mov	r1, r3
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f004 fa83 	bl	8007aec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f002 fb0f 	bl	8005c1e <USB_ReadInterrupts>
 8003600:	4603      	mov	r3, r0
 8003602:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360a:	d10a      	bne.n	8003622 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f004 fa91 	bl	8007b34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003620:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f002 faf9 	bl	8005c1e <USB_ReadInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b04      	cmp	r3, #4
 8003634:	d115      	bne.n	8003662 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f004 fa81 	bl	8007b50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	e000      	b.n	8003662 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003660:	bf00      	nop
    }
  }
}
 8003662:	3734      	adds	r7, #52	; 0x34
 8003664:	46bd      	mov	sp, r7
 8003666:	bd90      	pop	{r4, r7, pc}

08003668 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_PCD_SetAddress+0x1a>
 800367e:	2302      	movs	r3, #2
 8003680:	e013      	b.n	80036aa <HAL_PCD_SetAddress+0x42>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f002 fa57 	bl	8005b4e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	4608      	mov	r0, r1
 80036bc:	4611      	mov	r1, r2
 80036be:	461a      	mov	r2, r3
 80036c0:	4603      	mov	r3, r0
 80036c2:	70fb      	strb	r3, [r7, #3]
 80036c4:	460b      	mov	r3, r1
 80036c6:	803b      	strh	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	da0f      	bge.n	80036f8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	f003 020f 	and.w	r2, r3, #15
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	3338      	adds	r3, #56	; 0x38
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4413      	add	r3, r2
 80036ec:	3304      	adds	r3, #4
 80036ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	705a      	strb	r2, [r3, #1]
 80036f6:	e00f      	b.n	8003718 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	f003 020f 	and.w	r2, r3, #15
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	3304      	adds	r3, #4
 8003710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003724:	883a      	ldrh	r2, [r7, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	78ba      	ldrb	r2, [r7, #2]
 800372e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	785b      	ldrb	r3, [r3, #1]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d004      	beq.n	8003742 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003742:	78bb      	ldrb	r3, [r7, #2]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d102      	bne.n	800374e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_PCD_EP_Open+0xaa>
 8003758:	2302      	movs	r3, #2
 800375a:	e00e      	b.n	800377a <HAL_PCD_EP_Open+0xc8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68f9      	ldr	r1, [r7, #12]
 800376a:	4618      	mov	r0, r3
 800376c:	f001 fb8a 	bl	8004e84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003778:	7afb      	ldrb	r3, [r7, #11]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	460b      	mov	r3, r1
 800378c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800378e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003792:	2b00      	cmp	r3, #0
 8003794:	da0f      	bge.n	80037b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003796:	78fb      	ldrb	r3, [r7, #3]
 8003798:	f003 020f 	and.w	r2, r3, #15
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	3338      	adds	r3, #56	; 0x38
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	4413      	add	r3, r2
 80037aa:	3304      	adds	r3, #4
 80037ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	705a      	strb	r2, [r3, #1]
 80037b4:	e00f      	b.n	80037d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037b6:	78fb      	ldrb	r3, [r7, #3]
 80037b8:	f003 020f 	and.w	r2, r3, #15
 80037bc:	4613      	mov	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	3304      	adds	r3, #4
 80037ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_PCD_EP_Close+0x6e>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e00e      	b.n	800380e <HAL_PCD_EP_Close+0x8c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68f9      	ldr	r1, [r7, #12]
 80037fe:	4618      	mov	r0, r3
 8003800:	f001 fbc8 	bl	8004f94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b086      	sub	sp, #24
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	460b      	mov	r3, r1
 8003824:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003826:	7afb      	ldrb	r3, [r7, #11]
 8003828:	f003 020f 	and.w	r2, r3, #15
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	3304      	adds	r3, #4
 800383e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2200      	movs	r2, #0
 8003850:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2200      	movs	r2, #0
 8003856:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003858:	7afb      	ldrb	r3, [r7, #11]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	b2da      	uxtb	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d102      	bne.n	8003872 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003872:	7afb      	ldrb	r3, [r7, #11]
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	2b00      	cmp	r3, #0
 800387a:	d109      	bne.n	8003890 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	461a      	mov	r2, r3
 8003888:	6979      	ldr	r1, [r7, #20]
 800388a:	f001 fea3 	bl	80055d4 <USB_EP0StartXfer>
 800388e:	e008      	b.n	80038a2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6818      	ldr	r0, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	6979      	ldr	r1, [r7, #20]
 800389e:	f001 fc55 	bl	800514c <USB_EPStartXfer>
  }

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 020f 	and.w	r2, r3, #15
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	460b      	mov	r3, r1
 80038ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ec:	7afb      	ldrb	r3, [r7, #11]
 80038ee:	f003 020f 	and.w	r2, r3, #15
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	3338      	adds	r3, #56	; 0x38
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	3304      	adds	r3, #4
 8003902:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2200      	movs	r2, #0
 8003914:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2201      	movs	r2, #1
 800391a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800391c:	7afb      	ldrb	r3, [r7, #11]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	b2da      	uxtb	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d102      	bne.n	8003936 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003936:	7afb      	ldrb	r3, [r7, #11]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	6979      	ldr	r1, [r7, #20]
 800394e:	f001 fe41 	bl	80055d4 <USB_EP0StartXfer>
 8003952:	e008      	b.n	8003966 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	6979      	ldr	r1, [r7, #20]
 8003962:	f001 fbf3 	bl	800514c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	f003 020f 	and.w	r2, r3, #15
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	429a      	cmp	r2, r3
 8003988:	d901      	bls.n	800398e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e050      	b.n	8003a30 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800398e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003992:	2b00      	cmp	r3, #0
 8003994:	da0f      	bge.n	80039b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	f003 020f 	and.w	r2, r3, #15
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	3338      	adds	r3, #56	; 0x38
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	3304      	adds	r3, #4
 80039ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	705a      	strb	r2, [r3, #1]
 80039b4:	e00d      	b.n	80039d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	4413      	add	r3, r2
 80039c8:	3304      	adds	r3, #4
 80039ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_PCD_EP_SetStall+0x82>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e01e      	b.n	8003a30 <HAL_PCD_EP_SetStall+0xc0>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68f9      	ldr	r1, [r7, #12]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f001 ffd0 	bl	80059a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10a      	bne.n	8003a26 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	b2d9      	uxtb	r1, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a20:	461a      	mov	r2, r3
 8003a22:	f002 f9c1 	bl	8005da8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	f003 020f 	and.w	r2, r3, #15
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d901      	bls.n	8003a56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e042      	b.n	8003adc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	da0f      	bge.n	8003a7e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	f003 020f 	and.w	r2, r3, #15
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	3338      	adds	r3, #56	; 0x38
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	3304      	adds	r3, #4
 8003a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	705a      	strb	r2, [r3, #1]
 8003a7c:	e00f      	b.n	8003a9e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	f003 020f 	and.w	r2, r3, #15
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	4413      	add	r3, r2
 8003a94:	3304      	adds	r3, #4
 8003a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_PCD_EP_ClrStall+0x86>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e00e      	b.n	8003adc <HAL_PCD_EP_ClrStall+0xa4>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68f9      	ldr	r1, [r7, #12]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 ffd8 	bl	8005a82 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	; 0x28
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	3338      	adds	r3, #56	; 0x38
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	3304      	adds	r3, #4
 8003b0a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d901      	bls.n	8003b1c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e06c      	b.n	8003bf6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d902      	bls.n	8003b38 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	3303      	adds	r3, #3
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b40:	e02b      	b.n	8003b9a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d902      	bls.n	8003b5e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3303      	adds	r3, #3
 8003b62:	089b      	lsrs	r3, r3, #2
 8003b64:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	68d9      	ldr	r1, [r3, #12]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	6978      	ldr	r0, [r7, #20]
 8003b7e:	f001 fe7c 	bl	800587a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	441a      	add	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	441a      	add	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d809      	bhi.n	8003bc4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d203      	bcs.n	8003bc4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1be      	bne.n	8003b42 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d811      	bhi.n	8003bf4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	6939      	ldr	r1, [r7, #16]
 8003bec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	333c      	adds	r3, #60	; 0x3c
 8003c18:	3304      	adds	r3, #4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	f040 80a0 	bne.w	8003d78 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d015      	beq.n	8003c6e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a72      	ldr	r2, [pc, #456]	; (8003e10 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	f240 80dd 	bls.w	8003e06 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 80d7 	beq.w	8003e06 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	461a      	mov	r2, r3
 8003c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c6a:	6093      	str	r3, [r2, #8]
 8003c6c:	e0cb      	b.n	8003e06 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d009      	beq.n	8003c8c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c84:	461a      	mov	r2, r3
 8003c86:	2320      	movs	r3, #32
 8003c88:	6093      	str	r3, [r2, #8]
 8003c8a:	e0bc      	b.n	8003e06 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f040 80b7 	bne.w	8003e06 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a5d      	ldr	r2, [pc, #372]	; (8003e10 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d90f      	bls.n	8003cc0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cbc:	6093      	str	r3, [r2, #8]
 8003cbe:	e0a2      	b.n	8003e06 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003cd2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	0159      	lsls	r1, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	440b      	add	r3, r1
 8003cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003ce6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4403      	add	r3, r0
 8003cf6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003cfa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d0e:	6819      	ldr	r1, [r3, #0]
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4403      	add	r3, r0
 8003d1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4419      	add	r1, r3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4403      	add	r3, r0
 8003d34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d38:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d114      	bne.n	8003d6a <PCD_EP_OutXfrComplete_int+0x16a>
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d108      	bne.n	8003d6a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d62:	461a      	mov	r2, r3
 8003d64:	2101      	movs	r1, #1
 8003d66:	f002 f81f 	bl	8005da8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f003 fe25 	bl	80079c0 <HAL_PCD_DataOutStageCallback>
 8003d76:	e046      	b.n	8003e06 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <PCD_EP_OutXfrComplete_int+0x214>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d124      	bne.n	8003dca <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d96:	461a      	mov	r2, r3
 8003d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d9c:	6093      	str	r3, [r2, #8]
 8003d9e:	e032      	b.n	8003e06 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db6:	461a      	mov	r2, r3
 8003db8:	2320      	movs	r3, #32
 8003dba:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f003 fdfc 	bl	80079c0 <HAL_PCD_DataOutStageCallback>
 8003dc8:	e01d      	b.n	8003e06 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d114      	bne.n	8003dfa <PCD_EP_OutXfrComplete_int+0x1fa>
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d108      	bne.n	8003dfa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003df2:	461a      	mov	r2, r3
 8003df4:	2100      	movs	r1, #0
 8003df6:	f001 ffd7 	bl	8005da8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f003 fddd 	bl	80079c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	4f54300a 	.word	0x4f54300a
 8003e14:	4f54310a 	.word	0x4f54310a

08003e18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	333c      	adds	r3, #60	; 0x3c
 8003e30:	3304      	adds	r3, #4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4a15      	ldr	r2, [pc, #84]	; (8003ea0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d90e      	bls.n	8003e6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d009      	beq.n	8003e6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e64:	461a      	mov	r2, r3
 8003e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f003 fd95 	bl	800799c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d90c      	bls.n	8003e94 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d108      	bne.n	8003e94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2101      	movs	r1, #1
 8003e90:	f001 ff8a 	bl	8005da8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	4f54300a 	.word	0x4f54300a

08003ea4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	70fb      	strb	r3, [r7, #3]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d107      	bne.n	8003ed2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ec2:	883b      	ldrh	r3, [r7, #0]
 8003ec4:	0419      	lsls	r1, r3, #16
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	629a      	str	r2, [r3, #40]	; 0x28
 8003ed0:	e028      	b.n	8003f24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	0c1b      	lsrs	r3, r3, #16
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	4413      	add	r3, r2
 8003ede:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	73fb      	strb	r3, [r7, #15]
 8003ee4:	e00d      	b.n	8003f02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	3340      	adds	r3, #64	; 0x40
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	4413      	add	r3, r2
 8003efa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	3301      	adds	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
 8003f02:	7bfa      	ldrb	r2, [r7, #15]
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d3ec      	bcc.n	8003ee6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f0c:	883b      	ldrh	r3, [r7, #0]
 8003f0e:	0418      	lsls	r0, r3, #16
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6819      	ldr	r1, [r3, #0]
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	4302      	orrs	r2, r0
 8003f1c:	3340      	adds	r3, #64	; 0x40
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	887a      	ldrh	r2, [r7, #2]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e264      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d075      	beq.n	8004076 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f8a:	4ba3      	ldr	r3, [pc, #652]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d00c      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f96:	4ba0      	ldr	r3, [pc, #640]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d112      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fa2:	4b9d      	ldr	r3, [pc, #628]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fae:	d10b      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb0:	4b99      	ldr	r3, [pc, #612]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d05b      	beq.n	8004074 <HAL_RCC_OscConfig+0x108>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d157      	bne.n	8004074 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e23f      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd0:	d106      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x74>
 8003fd2:	4b91      	ldr	r3, [pc, #580]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a90      	ldr	r2, [pc, #576]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e01d      	b.n	800401c <HAL_RCC_OscConfig+0xb0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCC_OscConfig+0x98>
 8003fea:	4b8b      	ldr	r3, [pc, #556]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a8a      	ldr	r2, [pc, #552]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	4b88      	ldr	r3, [pc, #544]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a87      	ldr	r2, [pc, #540]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e00b      	b.n	800401c <HAL_RCC_OscConfig+0xb0>
 8004004:	4b84      	ldr	r3, [pc, #528]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a83      	ldr	r2, [pc, #524]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	4b81      	ldr	r3, [pc, #516]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a80      	ldr	r2, [pc, #512]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d013      	beq.n	800404c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7fd fe00 	bl	8001c28 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800402c:	f7fd fdfc 	bl	8001c28 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e204      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	4b76      	ldr	r3, [pc, #472]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0xc0>
 800404a:	e014      	b.n	8004076 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fd fdec 	bl	8001c28 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004054:	f7fd fde8 	bl	8001c28 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e1f0      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	4b6c      	ldr	r3, [pc, #432]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0xe8>
 8004072:	e000      	b.n	8004076 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d063      	beq.n	800414a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004082:	4b65      	ldr	r3, [pc, #404]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408e:	4b62      	ldr	r3, [pc, #392]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004096:	2b08      	cmp	r3, #8
 8004098:	d11c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800409a:	4b5f      	ldr	r3, [pc, #380]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d116      	bne.n	80040d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a6:	4b5c      	ldr	r3, [pc, #368]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_RCC_OscConfig+0x152>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d001      	beq.n	80040be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e1c4      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040be:	4b56      	ldr	r3, [pc, #344]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4952      	ldr	r1, [pc, #328]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d2:	e03a      	b.n	800414a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d020      	beq.n	800411e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040dc:	4b4f      	ldr	r3, [pc, #316]	; (800421c <HAL_RCC_OscConfig+0x2b0>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e2:	f7fd fda1 	bl	8001c28 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ea:	f7fd fd9d 	bl	8001c28 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e1a5      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fc:	4b46      	ldr	r3, [pc, #280]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004108:	4b43      	ldr	r3, [pc, #268]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4940      	ldr	r1, [pc, #256]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	4313      	orrs	r3, r2
 800411a:	600b      	str	r3, [r1, #0]
 800411c:	e015      	b.n	800414a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800411e:	4b3f      	ldr	r3, [pc, #252]	; (800421c <HAL_RCC_OscConfig+0x2b0>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7fd fd80 	bl	8001c28 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800412c:	f7fd fd7c 	bl	8001c28 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e184      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413e:	4b36      	ldr	r3, [pc, #216]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d030      	beq.n	80041b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d016      	beq.n	800418c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415e:	4b30      	ldr	r3, [pc, #192]	; (8004220 <HAL_RCC_OscConfig+0x2b4>)
 8004160:	2201      	movs	r2, #1
 8004162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004164:	f7fd fd60 	bl	8001c28 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800416c:	f7fd fd5c 	bl	8001c28 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e164      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417e:	4b26      	ldr	r3, [pc, #152]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0x200>
 800418a:	e015      	b.n	80041b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800418c:	4b24      	ldr	r3, [pc, #144]	; (8004220 <HAL_RCC_OscConfig+0x2b4>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004192:	f7fd fd49 	bl	8001c28 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800419a:	f7fd fd45 	bl	8001c28 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e14d      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ac:	4b1a      	ldr	r3, [pc, #104]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80041ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f0      	bne.n	800419a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80a0 	beq.w	8004306 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c6:	2300      	movs	r3, #0
 80041c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ca:	4b13      	ldr	r3, [pc, #76]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10f      	bne.n	80041f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	4a0e      	ldr	r2, [pc, #56]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e4:	6413      	str	r3, [r2, #64]	; 0x40
 80041e6:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f2:	2301      	movs	r3, #1
 80041f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f6:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_OscConfig+0x2b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d121      	bne.n	8004246 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004202:	4b08      	ldr	r3, [pc, #32]	; (8004224 <HAL_RCC_OscConfig+0x2b8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a07      	ldr	r2, [pc, #28]	; (8004224 <HAL_RCC_OscConfig+0x2b8>)
 8004208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420e:	f7fd fd0b 	bl	8001c28 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004214:	e011      	b.n	800423a <HAL_RCC_OscConfig+0x2ce>
 8004216:	bf00      	nop
 8004218:	40023800 	.word	0x40023800
 800421c:	42470000 	.word	0x42470000
 8004220:	42470e80 	.word	0x42470e80
 8004224:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004228:	f7fd fcfe 	bl	8001c28 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e106      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423a:	4b85      	ldr	r3, [pc, #532]	; (8004450 <HAL_RCC_OscConfig+0x4e4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d106      	bne.n	800425c <HAL_RCC_OscConfig+0x2f0>
 800424e:	4b81      	ldr	r3, [pc, #516]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a80      	ldr	r2, [pc, #512]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6713      	str	r3, [r2, #112]	; 0x70
 800425a:	e01c      	b.n	8004296 <HAL_RCC_OscConfig+0x32a>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b05      	cmp	r3, #5
 8004262:	d10c      	bne.n	800427e <HAL_RCC_OscConfig+0x312>
 8004264:	4b7b      	ldr	r3, [pc, #492]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a7a      	ldr	r2, [pc, #488]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 800426a:	f043 0304 	orr.w	r3, r3, #4
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
 8004270:	4b78      	ldr	r3, [pc, #480]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	4a77      	ldr	r2, [pc, #476]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	6713      	str	r3, [r2, #112]	; 0x70
 800427c:	e00b      	b.n	8004296 <HAL_RCC_OscConfig+0x32a>
 800427e:	4b75      	ldr	r3, [pc, #468]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	4a74      	ldr	r2, [pc, #464]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	6713      	str	r3, [r2, #112]	; 0x70
 800428a:	4b72      	ldr	r3, [pc, #456]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a71      	ldr	r2, [pc, #452]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 8004290:	f023 0304 	bic.w	r3, r3, #4
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d015      	beq.n	80042ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429e:	f7fd fcc3 	bl	8001c28 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a4:	e00a      	b.n	80042bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a6:	f7fd fcbf 	bl	8001c28 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e0c5      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042bc:	4b65      	ldr	r3, [pc, #404]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 80042be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0ee      	beq.n	80042a6 <HAL_RCC_OscConfig+0x33a>
 80042c8:	e014      	b.n	80042f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ca:	f7fd fcad 	bl	8001c28 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fd fca9 	bl	8001c28 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e0af      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e8:	4b5a      	ldr	r3, [pc, #360]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ee      	bne.n	80042d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d105      	bne.n	8004306 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fa:	4b56      	ldr	r3, [pc, #344]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	4a55      	ldr	r2, [pc, #340]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 8004300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004304:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 809b 	beq.w	8004446 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004310:	4b50      	ldr	r3, [pc, #320]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b08      	cmp	r3, #8
 800431a:	d05c      	beq.n	80043d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d141      	bne.n	80043a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004324:	4b4c      	ldr	r3, [pc, #304]	; (8004458 <HAL_RCC_OscConfig+0x4ec>)
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432a:	f7fd fc7d 	bl	8001c28 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004332:	f7fd fc79 	bl	8001c28 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e081      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004344:	4b43      	ldr	r3, [pc, #268]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69da      	ldr	r2, [r3, #28]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	019b      	lsls	r3, r3, #6
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004366:	085b      	lsrs	r3, r3, #1
 8004368:	3b01      	subs	r3, #1
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	061b      	lsls	r3, r3, #24
 8004374:	4937      	ldr	r1, [pc, #220]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 8004376:	4313      	orrs	r3, r2
 8004378:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800437a:	4b37      	ldr	r3, [pc, #220]	; (8004458 <HAL_RCC_OscConfig+0x4ec>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004380:	f7fd fc52 	bl	8001c28 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004388:	f7fd fc4e 	bl	8001c28 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e056      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439a:	4b2e      	ldr	r3, [pc, #184]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0x41c>
 80043a6:	e04e      	b.n	8004446 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a8:	4b2b      	ldr	r3, [pc, #172]	; (8004458 <HAL_RCC_OscConfig+0x4ec>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ae:	f7fd fc3b 	bl	8001c28 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b6:	f7fd fc37 	bl	8001c28 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e03f      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c8:	4b22      	ldr	r3, [pc, #136]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f0      	bne.n	80043b6 <HAL_RCC_OscConfig+0x44a>
 80043d4:	e037      	b.n	8004446 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e032      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043e2:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <HAL_RCC_OscConfig+0x4e8>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d028      	beq.n	8004442 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d121      	bne.n	8004442 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d11a      	bne.n	8004442 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004412:	4013      	ands	r3, r2
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004418:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800441a:	4293      	cmp	r3, r2
 800441c:	d111      	bne.n	8004442 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	3b01      	subs	r3, #1
 800442c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d107      	bne.n	8004442 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d001      	beq.n	8004446 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40007000 	.word	0x40007000
 8004454:	40023800 	.word	0x40023800
 8004458:	42470060 	.word	0x42470060

0800445c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0cc      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004470:	4b68      	ldr	r3, [pc, #416]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d90c      	bls.n	8004498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447e:	4b65      	ldr	r3, [pc, #404]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004486:	4b63      	ldr	r3, [pc, #396]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d001      	beq.n	8004498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0b8      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d020      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b0:	4b59      	ldr	r3, [pc, #356]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4a58      	ldr	r2, [pc, #352]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c8:	4b53      	ldr	r3, [pc, #332]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a52      	ldr	r2, [pc, #328]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d4:	4b50      	ldr	r3, [pc, #320]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	494d      	ldr	r1, [pc, #308]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d044      	beq.n	800457c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d107      	bne.n	800450a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fa:	4b47      	ldr	r3, [pc, #284]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d119      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e07f      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d003      	beq.n	800451a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004516:	2b03      	cmp	r3, #3
 8004518:	d107      	bne.n	800452a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451a:	4b3f      	ldr	r3, [pc, #252]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e06f      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452a:	4b3b      	ldr	r3, [pc, #236]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e067      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800453a:	4b37      	ldr	r3, [pc, #220]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f023 0203 	bic.w	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4934      	ldr	r1, [pc, #208]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	4313      	orrs	r3, r2
 800454a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800454c:	f7fd fb6c 	bl	8001c28 <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	e00a      	b.n	800456a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004554:	f7fd fb68 	bl	8001c28 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e04f      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456a:	4b2b      	ldr	r3, [pc, #172]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 020c 	and.w	r2, r3, #12
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	429a      	cmp	r2, r3
 800457a:	d1eb      	bne.n	8004554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800457c:	4b25      	ldr	r3, [pc, #148]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d20c      	bcs.n	80045a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b22      	ldr	r3, [pc, #136]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e032      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b0:	4b19      	ldr	r3, [pc, #100]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	4916      	ldr	r1, [pc, #88]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ce:	4b12      	ldr	r3, [pc, #72]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	490e      	ldr	r1, [pc, #56]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045e2:	f000 f821 	bl	8004628 <HAL_RCC_GetSysClockFreq>
 80045e6:	4602      	mov	r2, r0
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	490a      	ldr	r1, [pc, #40]	; (800461c <HAL_RCC_ClockConfig+0x1c0>)
 80045f4:	5ccb      	ldrb	r3, [r1, r3]
 80045f6:	fa22 f303 	lsr.w	r3, r2, r3
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045fe:	4b09      	ldr	r3, [pc, #36]	; (8004624 <HAL_RCC_ClockConfig+0x1c8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7fd facc 	bl	8001ba0 <HAL_InitTick>

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40023c00 	.word	0x40023c00
 8004618:	40023800 	.word	0x40023800
 800461c:	080082cc 	.word	0x080082cc
 8004620:	20000004 	.word	0x20000004
 8004624:	20000008 	.word	0x20000008

08004628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004628:	b5b0      	push	{r4, r5, r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800462e:	2100      	movs	r1, #0
 8004630:	6079      	str	r1, [r7, #4]
 8004632:	2100      	movs	r1, #0
 8004634:	60f9      	str	r1, [r7, #12]
 8004636:	2100      	movs	r1, #0
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800463a:	2100      	movs	r1, #0
 800463c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800463e:	4952      	ldr	r1, [pc, #328]	; (8004788 <HAL_RCC_GetSysClockFreq+0x160>)
 8004640:	6889      	ldr	r1, [r1, #8]
 8004642:	f001 010c 	and.w	r1, r1, #12
 8004646:	2908      	cmp	r1, #8
 8004648:	d00d      	beq.n	8004666 <HAL_RCC_GetSysClockFreq+0x3e>
 800464a:	2908      	cmp	r1, #8
 800464c:	f200 8094 	bhi.w	8004778 <HAL_RCC_GetSysClockFreq+0x150>
 8004650:	2900      	cmp	r1, #0
 8004652:	d002      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0x32>
 8004654:	2904      	cmp	r1, #4
 8004656:	d003      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x38>
 8004658:	e08e      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800465a:	4b4c      	ldr	r3, [pc, #304]	; (800478c <HAL_RCC_GetSysClockFreq+0x164>)
 800465c:	60bb      	str	r3, [r7, #8]
       break;
 800465e:	e08e      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004660:	4b4b      	ldr	r3, [pc, #300]	; (8004790 <HAL_RCC_GetSysClockFreq+0x168>)
 8004662:	60bb      	str	r3, [r7, #8]
      break;
 8004664:	e08b      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004666:	4948      	ldr	r1, [pc, #288]	; (8004788 <HAL_RCC_GetSysClockFreq+0x160>)
 8004668:	6849      	ldr	r1, [r1, #4]
 800466a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800466e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004670:	4945      	ldr	r1, [pc, #276]	; (8004788 <HAL_RCC_GetSysClockFreq+0x160>)
 8004672:	6849      	ldr	r1, [r1, #4]
 8004674:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004678:	2900      	cmp	r1, #0
 800467a:	d024      	beq.n	80046c6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467c:	4942      	ldr	r1, [pc, #264]	; (8004788 <HAL_RCC_GetSysClockFreq+0x160>)
 800467e:	6849      	ldr	r1, [r1, #4]
 8004680:	0989      	lsrs	r1, r1, #6
 8004682:	4608      	mov	r0, r1
 8004684:	f04f 0100 	mov.w	r1, #0
 8004688:	f240 14ff 	movw	r4, #511	; 0x1ff
 800468c:	f04f 0500 	mov.w	r5, #0
 8004690:	ea00 0204 	and.w	r2, r0, r4
 8004694:	ea01 0305 	and.w	r3, r1, r5
 8004698:	493d      	ldr	r1, [pc, #244]	; (8004790 <HAL_RCC_GetSysClockFreq+0x168>)
 800469a:	fb01 f003 	mul.w	r0, r1, r3
 800469e:	2100      	movs	r1, #0
 80046a0:	fb01 f102 	mul.w	r1, r1, r2
 80046a4:	1844      	adds	r4, r0, r1
 80046a6:	493a      	ldr	r1, [pc, #232]	; (8004790 <HAL_RCC_GetSysClockFreq+0x168>)
 80046a8:	fba2 0101 	umull	r0, r1, r2, r1
 80046ac:	1863      	adds	r3, r4, r1
 80046ae:	4619      	mov	r1, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	461a      	mov	r2, r3
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	f7fb fd8c 	bl	80001d4 <__aeabi_uldivmod>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4613      	mov	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	e04a      	b.n	800475c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c6:	4b30      	ldr	r3, [pc, #192]	; (8004788 <HAL_RCC_GetSysClockFreq+0x160>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	099b      	lsrs	r3, r3, #6
 80046cc:	461a      	mov	r2, r3
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046d6:	f04f 0100 	mov.w	r1, #0
 80046da:	ea02 0400 	and.w	r4, r2, r0
 80046de:	ea03 0501 	and.w	r5, r3, r1
 80046e2:	4620      	mov	r0, r4
 80046e4:	4629      	mov	r1, r5
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	014b      	lsls	r3, r1, #5
 80046f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046f4:	0142      	lsls	r2, r0, #5
 80046f6:	4610      	mov	r0, r2
 80046f8:	4619      	mov	r1, r3
 80046fa:	1b00      	subs	r0, r0, r4
 80046fc:	eb61 0105 	sbc.w	r1, r1, r5
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	018b      	lsls	r3, r1, #6
 800470a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800470e:	0182      	lsls	r2, r0, #6
 8004710:	1a12      	subs	r2, r2, r0
 8004712:	eb63 0301 	sbc.w	r3, r3, r1
 8004716:	f04f 0000 	mov.w	r0, #0
 800471a:	f04f 0100 	mov.w	r1, #0
 800471e:	00d9      	lsls	r1, r3, #3
 8004720:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004724:	00d0      	lsls	r0, r2, #3
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	1912      	adds	r2, r2, r4
 800472c:	eb45 0303 	adc.w	r3, r5, r3
 8004730:	f04f 0000 	mov.w	r0, #0
 8004734:	f04f 0100 	mov.w	r1, #0
 8004738:	0299      	lsls	r1, r3, #10
 800473a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800473e:	0290      	lsls	r0, r2, #10
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4610      	mov	r0, r2
 8004746:	4619      	mov	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	461a      	mov	r2, r3
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	f7fb fd40 	bl	80001d4 <__aeabi_uldivmod>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4613      	mov	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800475c:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <HAL_RCC_GetSysClockFreq+0x160>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	3301      	adds	r3, #1
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	60bb      	str	r3, [r7, #8]
      break;
 8004776:	e002      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004778:	4b04      	ldr	r3, [pc, #16]	; (800478c <HAL_RCC_GetSysClockFreq+0x164>)
 800477a:	60bb      	str	r3, [r7, #8]
      break;
 800477c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800477e:	68bb      	ldr	r3, [r7, #8]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bdb0      	pop	{r4, r5, r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	00f42400 	.word	0x00f42400
 8004790:	017d7840 	.word	0x017d7840

08004794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004798:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800479a:	681b      	ldr	r3, [r3, #0]
}
 800479c:	4618      	mov	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	20000004 	.word	0x20000004

080047ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047b0:	f7ff fff0 	bl	8004794 <HAL_RCC_GetHCLKFreq>
 80047b4:	4602      	mov	r2, r0
 80047b6:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	0a9b      	lsrs	r3, r3, #10
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	4903      	ldr	r1, [pc, #12]	; (80047d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047c2:	5ccb      	ldrb	r3, [r1, r3]
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40023800 	.word	0x40023800
 80047d0:	080082dc 	.word	0x080082dc

080047d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047d4:	b084      	sub	sp, #16
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	f107 001c 	add.w	r0, r7, #28
 80047e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d122      	bne.n	8004832 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004816:	2b01      	cmp	r3, #1
 8004818:	d105      	bne.n	8004826 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f001 fb1c 	bl	8005e64 <USB_CoreReset>
 800482c:	4603      	mov	r3, r0
 800482e:	73fb      	strb	r3, [r7, #15]
 8004830:	e01a      	b.n	8004868 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f001 fb10 	bl	8005e64 <USB_CoreReset>
 8004844:	4603      	mov	r3, r0
 8004846:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	639a      	str	r2, [r3, #56]	; 0x38
 800485a:	e005      	b.n	8004868 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	2b01      	cmp	r3, #1
 800486c:	d10b      	bne.n	8004886 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f043 0206 	orr.w	r2, r3, #6
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f043 0220 	orr.w	r2, r3, #32
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004892:	b004      	add	sp, #16
 8004894:	4770      	bx	lr
	...

08004898 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	4613      	mov	r3, r2
 80048a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d165      	bne.n	8004978 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4a41      	ldr	r2, [pc, #260]	; (80049b4 <USB_SetTurnaroundTime+0x11c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d906      	bls.n	80048c2 <USB_SetTurnaroundTime+0x2a>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4a40      	ldr	r2, [pc, #256]	; (80049b8 <USB_SetTurnaroundTime+0x120>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d202      	bcs.n	80048c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048bc:	230f      	movs	r3, #15
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	e062      	b.n	8004988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4a3c      	ldr	r2, [pc, #240]	; (80049b8 <USB_SetTurnaroundTime+0x120>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d306      	bcc.n	80048d8 <USB_SetTurnaroundTime+0x40>
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4a3b      	ldr	r2, [pc, #236]	; (80049bc <USB_SetTurnaroundTime+0x124>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d202      	bcs.n	80048d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80048d2:	230e      	movs	r3, #14
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e057      	b.n	8004988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4a38      	ldr	r2, [pc, #224]	; (80049bc <USB_SetTurnaroundTime+0x124>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d306      	bcc.n	80048ee <USB_SetTurnaroundTime+0x56>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4a37      	ldr	r2, [pc, #220]	; (80049c0 <USB_SetTurnaroundTime+0x128>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d202      	bcs.n	80048ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80048e8:	230d      	movs	r3, #13
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	e04c      	b.n	8004988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4a33      	ldr	r2, [pc, #204]	; (80049c0 <USB_SetTurnaroundTime+0x128>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d306      	bcc.n	8004904 <USB_SetTurnaroundTime+0x6c>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4a32      	ldr	r2, [pc, #200]	; (80049c4 <USB_SetTurnaroundTime+0x12c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d802      	bhi.n	8004904 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80048fe:	230c      	movs	r3, #12
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	e041      	b.n	8004988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4a2f      	ldr	r2, [pc, #188]	; (80049c4 <USB_SetTurnaroundTime+0x12c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d906      	bls.n	800491a <USB_SetTurnaroundTime+0x82>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4a2e      	ldr	r2, [pc, #184]	; (80049c8 <USB_SetTurnaroundTime+0x130>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d802      	bhi.n	800491a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004914:	230b      	movs	r3, #11
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	e036      	b.n	8004988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	4a2a      	ldr	r2, [pc, #168]	; (80049c8 <USB_SetTurnaroundTime+0x130>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d906      	bls.n	8004930 <USB_SetTurnaroundTime+0x98>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4a29      	ldr	r2, [pc, #164]	; (80049cc <USB_SetTurnaroundTime+0x134>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d802      	bhi.n	8004930 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800492a:	230a      	movs	r3, #10
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	e02b      	b.n	8004988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4a26      	ldr	r2, [pc, #152]	; (80049cc <USB_SetTurnaroundTime+0x134>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d906      	bls.n	8004946 <USB_SetTurnaroundTime+0xae>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4a25      	ldr	r2, [pc, #148]	; (80049d0 <USB_SetTurnaroundTime+0x138>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d202      	bcs.n	8004946 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004940:	2309      	movs	r3, #9
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	e020      	b.n	8004988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <USB_SetTurnaroundTime+0x138>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d306      	bcc.n	800495c <USB_SetTurnaroundTime+0xc4>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4a20      	ldr	r2, [pc, #128]	; (80049d4 <USB_SetTurnaroundTime+0x13c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d802      	bhi.n	800495c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004956:	2308      	movs	r3, #8
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	e015      	b.n	8004988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4a1d      	ldr	r2, [pc, #116]	; (80049d4 <USB_SetTurnaroundTime+0x13c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d906      	bls.n	8004972 <USB_SetTurnaroundTime+0xda>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4a1c      	ldr	r2, [pc, #112]	; (80049d8 <USB_SetTurnaroundTime+0x140>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d202      	bcs.n	8004972 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800496c:	2307      	movs	r3, #7
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	e00a      	b.n	8004988 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004972:	2306      	movs	r3, #6
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	e007      	b.n	8004988 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800497e:	2309      	movs	r3, #9
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	e001      	b.n	8004988 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004984:	2309      	movs	r3, #9
 8004986:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	029b      	lsls	r3, r3, #10
 800499c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80049a0:	431a      	orrs	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	00d8acbf 	.word	0x00d8acbf
 80049b8:	00e4e1c0 	.word	0x00e4e1c0
 80049bc:	00f42400 	.word	0x00f42400
 80049c0:	01067380 	.word	0x01067380
 80049c4:	011a499f 	.word	0x011a499f
 80049c8:	01312cff 	.word	0x01312cff
 80049cc:	014ca43f 	.word	0x014ca43f
 80049d0:	016e3600 	.word	0x016e3600
 80049d4:	01a6ab1f 	.word	0x01a6ab1f
 80049d8:	01e84800 	.word	0x01e84800

080049dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f043 0201 	orr.w	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f023 0201 	bic.w	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d115      	bne.n	8004a6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a4e:	2001      	movs	r0, #1
 8004a50:	f7fd f8f6 	bl	8001c40 <HAL_Delay>
      ms++;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3301      	adds	r3, #1
 8004a58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f001 f972 	bl	8005d44 <USB_GetMode>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d01e      	beq.n	8004aa4 <USB_SetCurrentMode+0x84>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b31      	cmp	r3, #49	; 0x31
 8004a6a:	d9f0      	bls.n	8004a4e <USB_SetCurrentMode+0x2e>
 8004a6c:	e01a      	b.n	8004aa4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d115      	bne.n	8004aa0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a80:	2001      	movs	r0, #1
 8004a82:	f7fd f8dd 	bl	8001c40 <HAL_Delay>
      ms++;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f001 f959 	bl	8005d44 <USB_GetMode>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <USB_SetCurrentMode+0x84>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b31      	cmp	r3, #49	; 0x31
 8004a9c:	d9f0      	bls.n	8004a80 <USB_SetCurrentMode+0x60>
 8004a9e:	e001      	b.n	8004aa4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e005      	b.n	8004ab0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b32      	cmp	r3, #50	; 0x32
 8004aa8:	d101      	bne.n	8004aae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ab8:	b084      	sub	sp, #16
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b086      	sub	sp, #24
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	e009      	b.n	8004aec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	3340      	adds	r3, #64	; 0x40
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2b0e      	cmp	r3, #14
 8004af0:	d9f2      	bls.n	8004ad8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d11c      	bne.n	8004b32 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b06:	f043 0302 	orr.w	r3, r3, #2
 8004b0a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	639a      	str	r2, [r3, #56]	; 0x38
 8004b30:	e00b      	b.n	8004b4a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b50:	461a      	mov	r2, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b64:	461a      	mov	r2, r3
 8004b66:	680b      	ldr	r3, [r1, #0]
 8004b68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d10c      	bne.n	8004b8a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d104      	bne.n	8004b80 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b76:	2100      	movs	r1, #0
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f945 	bl	8004e08 <USB_SetDevSpeed>
 8004b7e:	e008      	b.n	8004b92 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b80:	2101      	movs	r1, #1
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f940 	bl	8004e08 <USB_SetDevSpeed>
 8004b88:	e003      	b.n	8004b92 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b8a:	2103      	movs	r1, #3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f93b 	bl	8004e08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b92:	2110      	movs	r1, #16
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f8f3 	bl	8004d80 <USB_FlushTxFifo>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f90f 	bl	8004dc8 <USB_FlushRxFifo>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bba:	461a      	mov	r2, r3
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	2300      	movs	r3, #0
 8004bca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	e043      	b.n	8004c66 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bf4:	d118      	bne.n	8004c28 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	e013      	b.n	8004c3a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	e008      	b.n	8004c3a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c34:	461a      	mov	r2, r3
 8004c36:	2300      	movs	r3, #0
 8004c38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c46:	461a      	mov	r2, r3
 8004c48:	2300      	movs	r3, #0
 8004c4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	3301      	adds	r3, #1
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d3b7      	bcc.n	8004bde <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	e043      	b.n	8004cfc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c8a:	d118      	bne.n	8004cbe <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	e013      	b.n	8004cd0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	e008      	b.n	8004cd0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cca:	461a      	mov	r2, r3
 8004ccc:	2300      	movs	r3, #0
 8004cce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cdc:	461a      	mov	r2, r3
 8004cde:	2300      	movs	r3, #0
 8004ce0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d3b7      	bcc.n	8004c74 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d105      	bne.n	8004d38 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f043 0210 	orr.w	r2, r3, #16
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699a      	ldr	r2, [r3, #24]
 8004d3c:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <USB_DevInit+0x2c4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	f043 0208 	orr.w	r2, r3, #8
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d107      	bne.n	8004d6c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d64:	f043 0304 	orr.w	r3, r3, #4
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d78:	b004      	add	sp, #16
 8004d7a:	4770      	bx	lr
 8004d7c:	803c3800 	.word	0x803c3800

08004d80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	019b      	lsls	r3, r3, #6
 8004d92:	f043 0220 	orr.w	r2, r3, #32
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <USB_FlushTxFifo+0x44>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e006      	b.n	8004db8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d0f1      	beq.n	8004d9a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	00030d40 	.word	0x00030d40

08004dc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2210      	movs	r2, #16
 8004dd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	4a08      	ldr	r2, [pc, #32]	; (8004e04 <USB_FlushRxFifo+0x3c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e006      	b.n	8004df8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	2b10      	cmp	r3, #16
 8004df4:	d0f1      	beq.n	8004dda <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	00030d40 	.word	0x00030d40

08004e08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	68f9      	ldr	r1, [r7, #12]
 8004e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b087      	sub	sp, #28
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 0306 	and.w	r3, r3, #6
 8004e52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d102      	bne.n	8004e60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	75fb      	strb	r3, [r7, #23]
 8004e5e:	e00a      	b.n	8004e76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d002      	beq.n	8004e6c <USB_GetDevSpeed+0x32>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b06      	cmp	r3, #6
 8004e6a:	d102      	bne.n	8004e72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	75fb      	strb	r3, [r7, #23]
 8004e70:	e001      	b.n	8004e76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e72:	230f      	movs	r3, #15
 8004e74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	785b      	ldrb	r3, [r3, #1]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d13a      	bne.n	8004f16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	68f9      	ldr	r1, [r7, #12]
 8004eba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d155      	bne.n	8004f84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	78db      	ldrb	r3, [r3, #3]
 8004ef2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ef4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	059b      	lsls	r3, r3, #22
 8004efa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004efc:	4313      	orrs	r3, r2
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	0151      	lsls	r1, r2, #5
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	440a      	add	r2, r1
 8004f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	e036      	b.n	8004f84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1c:	69da      	ldr	r2, [r3, #28]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	2101      	movs	r1, #1
 8004f28:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2c:	041b      	lsls	r3, r3, #16
 8004f2e:	68f9      	ldr	r1, [r7, #12]
 8004f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d11a      	bne.n	8004f84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	78db      	ldrb	r3, [r3, #3]
 8004f68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	785b      	ldrb	r3, [r3, #1]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d161      	bne.n	8005074 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fc6:	d11f      	bne.n	8005008 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	0151      	lsls	r1, r2, #5
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fe6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	0151      	lsls	r1, r2, #5
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	440a      	add	r2, r1
 8004ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005002:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005006:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	2101      	movs	r1, #1
 800501a:	fa01 f303 	lsl.w	r3, r1, r3
 800501e:	b29b      	uxth	r3, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005028:	4013      	ands	r3, r2
 800502a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	2101      	movs	r1, #1
 800503e:	fa01 f303 	lsl.w	r3, r1, r3
 8005042:	b29b      	uxth	r3, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	68f9      	ldr	r1, [r7, #12]
 8005048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800504c:	4013      	ands	r3, r2
 800504e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	0159      	lsls	r1, r3, #5
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	440b      	add	r3, r1
 8005066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506a:	4619      	mov	r1, r3
 800506c:	4b35      	ldr	r3, [pc, #212]	; (8005144 <USB_DeactivateEndpoint+0x1b0>)
 800506e:	4013      	ands	r3, r2
 8005070:	600b      	str	r3, [r1, #0]
 8005072:	e060      	b.n	8005136 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800508a:	d11f      	bne.n	80050cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	f003 030f 	and.w	r3, r3, #15
 80050dc:	2101      	movs	r1, #1
 80050de:	fa01 f303 	lsl.w	r3, r1, r3
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	43db      	mvns	r3, r3
 80050e6:	68f9      	ldr	r1, [r7, #12]
 80050e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050ec:	4013      	ands	r3, r2
 80050ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f6:	69da      	ldr	r2, [r3, #28]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	2101      	movs	r1, #1
 8005102:	fa01 f303 	lsl.w	r3, r1, r3
 8005106:	041b      	lsls	r3, r3, #16
 8005108:	43db      	mvns	r3, r3
 800510a:	68f9      	ldr	r1, [r7, #12]
 800510c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005110:	4013      	ands	r3, r2
 8005112:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	0159      	lsls	r1, r3, #5
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	440b      	add	r3, r1
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	4619      	mov	r1, r3
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <USB_DeactivateEndpoint+0x1b4>)
 8005132:	4013      	ands	r3, r2
 8005134:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	ec337800 	.word	0xec337800
 8005148:	eff37800 	.word	0xeff37800

0800514c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08a      	sub	sp, #40	; 0x28
 8005150:	af02      	add	r7, sp, #8
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	4613      	mov	r3, r2
 8005158:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	785b      	ldrb	r3, [r3, #1]
 8005168:	2b01      	cmp	r3, #1
 800516a:	f040 815c 	bne.w	8005426 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d132      	bne.n	80051dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005190:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005194:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005198:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d4:	0cdb      	lsrs	r3, r3, #19
 80051d6:	04db      	lsls	r3, r3, #19
 80051d8:	6113      	str	r3, [r2, #16]
 80051da:	e074      	b.n	80052c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f6:	0cdb      	lsrs	r3, r3, #19
 80051f8:	04db      	lsls	r3, r3, #19
 80051fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	440a      	add	r2, r1
 8005212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005216:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800521a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800521e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	6959      	ldr	r1, [r3, #20]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	440b      	add	r3, r1
 8005238:	1e59      	subs	r1, r3, #1
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005242:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005244:	4b9d      	ldr	r3, [pc, #628]	; (80054bc <USB_EPStartXfer+0x370>)
 8005246:	400b      	ands	r3, r1
 8005248:	69b9      	ldr	r1, [r7, #24]
 800524a:	0148      	lsls	r0, r1, #5
 800524c:	69f9      	ldr	r1, [r7, #28]
 800524e:	4401      	add	r1, r0
 8005250:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005254:	4313      	orrs	r3, r2
 8005256:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800526e:	69b9      	ldr	r1, [r7, #24]
 8005270:	0148      	lsls	r0, r1, #5
 8005272:	69f9      	ldr	r1, [r7, #28]
 8005274:	4401      	add	r1, r0
 8005276:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800527a:	4313      	orrs	r3, r2
 800527c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	78db      	ldrb	r3, [r3, #3]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d11f      	bne.n	80052c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	440a      	add	r2, r1
 800529c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80052a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	0151      	lsls	r1, r2, #5
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	440a      	add	r2, r1
 80052bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80052c6:	79fb      	ldrb	r3, [r7, #7]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d14b      	bne.n	8005364 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d009      	beq.n	80052e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e0:	461a      	mov	r2, r3
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	78db      	ldrb	r3, [r3, #3]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d128      	bne.n	8005342 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d110      	bne.n	8005322 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	e00f      	b.n	8005342 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005340:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e12f      	b.n	80055c4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	440a      	add	r2, r1
 800537a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005382:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	78db      	ldrb	r3, [r3, #3]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d015      	beq.n	80053b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 8117 	beq.w	80055c4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	2101      	movs	r1, #1
 80053a8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ac:	69f9      	ldr	r1, [r7, #28]
 80053ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053b2:	4313      	orrs	r3, r2
 80053b4:	634b      	str	r3, [r1, #52]	; 0x34
 80053b6:	e105      	b.n	80055c4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d110      	bne.n	80053ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	0151      	lsls	r1, r2, #5
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	440a      	add	r2, r1
 80053de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	e00f      	b.n	800540a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	0151      	lsls	r1, r2, #5
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	440a      	add	r2, r1
 8005400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005408:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	68d9      	ldr	r1, [r3, #12]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	b298      	uxth	r0, r3
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	4603      	mov	r3, r0
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 fa2b 	bl	800587a <USB_WritePacket>
 8005424:	e0ce      	b.n	80055c4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	0151      	lsls	r1, r2, #5
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	440a      	add	r2, r1
 800543c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005440:	0cdb      	lsrs	r3, r3, #19
 8005442:	04db      	lsls	r3, r3, #19
 8005444:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	0151      	lsls	r1, r2, #5
 8005458:	69fa      	ldr	r2, [r7, #28]
 800545a:	440a      	add	r2, r1
 800545c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005460:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005464:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005468:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d126      	bne.n	80054c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005488:	69b9      	ldr	r1, [r7, #24]
 800548a:	0148      	lsls	r0, r1, #5
 800548c:	69f9      	ldr	r1, [r7, #28]
 800548e:	4401      	add	r1, r0
 8005490:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005494:	4313      	orrs	r3, r2
 8005496:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	0151      	lsls	r1, r2, #5
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	440a      	add	r2, r1
 80054ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054b6:	6113      	str	r3, [r2, #16]
 80054b8:	e036      	b.n	8005528 <USB_EPStartXfer+0x3dc>
 80054ba:	bf00      	nop
 80054bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	4413      	add	r3, r2
 80054ca:	1e5a      	subs	r2, r3, #1
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	8afb      	ldrh	r3, [r7, #22]
 80054e6:	04d9      	lsls	r1, r3, #19
 80054e8:	4b39      	ldr	r3, [pc, #228]	; (80055d0 <USB_EPStartXfer+0x484>)
 80054ea:	400b      	ands	r3, r1
 80054ec:	69b9      	ldr	r1, [r7, #24]
 80054ee:	0148      	lsls	r0, r1, #5
 80054f0:	69f9      	ldr	r1, [r7, #28]
 80054f2:	4401      	add	r1, r0
 80054f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054f8:	4313      	orrs	r3, r2
 80054fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	8af9      	ldrh	r1, [r7, #22]
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005518:	69b9      	ldr	r1, [r7, #24]
 800551a:	0148      	lsls	r0, r1, #5
 800551c:	69f9      	ldr	r1, [r7, #28]
 800551e:	4401      	add	r1, r0
 8005520:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005524:	4313      	orrs	r3, r2
 8005526:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005528:	79fb      	ldrb	r3, [r7, #7]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d10d      	bne.n	800554a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d009      	beq.n	800554a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	68d9      	ldr	r1, [r3, #12]
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005546:	460a      	mov	r2, r1
 8005548:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	78db      	ldrb	r3, [r3, #3]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d128      	bne.n	80055a4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d110      	bne.n	8005584 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	440a      	add	r2, r1
 8005578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800557c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e00f      	b.n	80055a4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	1ff80000 	.word	0x1ff80000

080055d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	4613      	mov	r3, r2
 80055e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	f040 80cd 	bne.w	8005790 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d132      	bne.n	8005664 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	0151      	lsls	r1, r2, #5
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	440a      	add	r2, r1
 8005614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005618:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800561c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005620:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005640:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	440a      	add	r2, r1
 8005658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565c:	0cdb      	lsrs	r3, r3, #19
 800565e:	04db      	lsls	r3, r3, #19
 8005660:	6113      	str	r3, [r2, #16]
 8005662:	e04e      	b.n	8005702 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	0151      	lsls	r1, r2, #5
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	440a      	add	r2, r1
 800567a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567e:	0cdb      	lsrs	r3, r3, #19
 8005680:	04db      	lsls	r3, r3, #19
 8005682:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	0151      	lsls	r1, r2, #5
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	440a      	add	r2, r1
 800569a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d903      	bls.n	80056bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	0151      	lsls	r1, r2, #5
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	440a      	add	r2, r1
 80056d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056f2:	6939      	ldr	r1, [r7, #16]
 80056f4:	0148      	lsls	r0, r1, #5
 80056f6:	6979      	ldr	r1, [r7, #20]
 80056f8:	4401      	add	r1, r0
 80056fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056fe:	4313      	orrs	r3, r2
 8005700:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d11e      	bne.n	8005746 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d009      	beq.n	8005724 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571c:	461a      	mov	r2, r3
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	e092      	b.n	800586c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	440a      	add	r2, r1
 800575c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005760:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005764:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d07e      	beq.n	800586c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	2101      	movs	r1, #1
 8005780:	fa01 f303 	lsl.w	r3, r1, r3
 8005784:	6979      	ldr	r1, [r7, #20]
 8005786:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800578a:	4313      	orrs	r3, r2
 800578c:	634b      	str	r3, [r1, #52]	; 0x34
 800578e:	e06d      	b.n	800586c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057aa:	0cdb      	lsrs	r3, r3, #19
 80057ac:	04db      	lsls	r3, r3, #19
 80057ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057d2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005802:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005810:	691a      	ldr	r2, [r3, #16]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800581a:	6939      	ldr	r1, [r7, #16]
 800581c:	0148      	lsls	r0, r1, #5
 800581e:	6979      	ldr	r1, [r7, #20]
 8005820:	4401      	add	r1, r0
 8005822:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005826:	4313      	orrs	r3, r2
 8005828:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d10d      	bne.n	800584c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d009      	beq.n	800584c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	68d9      	ldr	r1, [r3, #12]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005848:	460a      	mov	r2, r1
 800584a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	440a      	add	r2, r1
 8005862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005866:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800586a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800587a:	b480      	push	{r7}
 800587c:	b089      	sub	sp, #36	; 0x24
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	4611      	mov	r1, r2
 8005886:	461a      	mov	r2, r3
 8005888:	460b      	mov	r3, r1
 800588a:	71fb      	strb	r3, [r7, #7]
 800588c:	4613      	mov	r3, r2
 800588e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	d123      	bne.n	80058e8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058a0:	88bb      	ldrh	r3, [r7, #4]
 80058a2:	3303      	adds	r3, #3
 80058a4:	089b      	lsrs	r3, r3, #2
 80058a6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058a8:	2300      	movs	r3, #0
 80058aa:	61bb      	str	r3, [r7, #24]
 80058ac:	e018      	b.n	80058e0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	031a      	lsls	r2, r3, #12
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ba:	461a      	mov	r2, r3
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3301      	adds	r3, #1
 80058c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	3301      	adds	r3, #1
 80058cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	3301      	adds	r3, #1
 80058d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	3301      	adds	r3, #1
 80058d8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	3301      	adds	r3, #1
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d3e2      	bcc.n	80058ae <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3724      	adds	r7, #36	; 0x24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b08b      	sub	sp, #44	; 0x2c
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	4613      	mov	r3, r2
 8005902:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800590c:	88fb      	ldrh	r3, [r7, #6]
 800590e:	089b      	lsrs	r3, r3, #2
 8005910:	b29b      	uxth	r3, r3
 8005912:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005914:	88fb      	ldrh	r3, [r7, #6]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800591c:	2300      	movs	r3, #0
 800591e:	623b      	str	r3, [r7, #32]
 8005920:	e014      	b.n	800594c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	601a      	str	r2, [r3, #0]
    pDest++;
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	3301      	adds	r3, #1
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	3301      	adds	r3, #1
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	3301      	adds	r3, #1
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	3301      	adds	r3, #1
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	3301      	adds	r3, #1
 800594a:	623b      	str	r3, [r7, #32]
 800594c:	6a3a      	ldr	r2, [r7, #32]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	429a      	cmp	r2, r3
 8005952:	d3e6      	bcc.n	8005922 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005954:	8bfb      	ldrh	r3, [r7, #30]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d01e      	beq.n	8005998 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005964:	461a      	mov	r2, r3
 8005966:	f107 0310 	add.w	r3, r7, #16
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	b2db      	uxtb	r3, r3
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	fa22 f303 	lsr.w	r3, r2, r3
 800597a:	b2da      	uxtb	r2, r3
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	701a      	strb	r2, [r3, #0]
      i++;
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	3301      	adds	r3, #1
 8005984:	623b      	str	r3, [r7, #32]
      pDest++;
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	3301      	adds	r3, #1
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800598c:	8bfb      	ldrh	r3, [r7, #30]
 800598e:	3b01      	subs	r3, #1
 8005990:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005992:	8bfb      	ldrh	r3, [r7, #30]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1ea      	bne.n	800596e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800599a:	4618      	mov	r0, r3
 800599c:	372c      	adds	r7, #44	; 0x2c
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b085      	sub	sp, #20
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d12c      	bne.n	8005a1c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	db12      	blt.n	80059fa <USB_EPSetStall+0x54>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00f      	beq.n	80059fa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	0151      	lsls	r1, r2, #5
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	440a      	add	r2, r1
 80059f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059f8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	0151      	lsls	r1, r2, #5
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	440a      	add	r2, r1
 8005a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	e02b      	b.n	8005a74 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	db12      	blt.n	8005a54 <USB_EPSetStall+0xae>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00f      	beq.n	8005a54 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a52:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	785b      	ldrb	r3, [r3, #1]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d128      	bne.n	8005af0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	0151      	lsls	r1, r2, #5
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	440a      	add	r2, r1
 8005ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005abc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	78db      	ldrb	r3, [r3, #3]
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d003      	beq.n	8005ace <USB_EPClearStall+0x4c>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	78db      	ldrb	r3, [r3, #3]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d138      	bne.n	8005b40 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	e027      	b.n	8005b40 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	78db      	ldrb	r3, [r3, #3]
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d003      	beq.n	8005b20 <USB_EPClearStall+0x9e>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	78db      	ldrb	r3, [r3, #3]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d10f      	bne.n	8005b40 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	0151      	lsls	r1, r2, #5
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	440a      	add	r2, r1
 8005b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b3e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	460b      	mov	r3, r1
 8005b58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b70:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	78fb      	ldrb	r3, [r7, #3]
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b82:	68f9      	ldr	r1, [r7, #12]
 8005b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bb4:	f023 0303 	bic.w	r3, r3, #3
 8005bb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bc8:	f023 0302 	bic.w	r3, r3, #2
 8005bcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bf6:	f023 0303 	bic.w	r3, r3, #3
 8005bfa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c0a:	f043 0302 	orr.w	r3, r3, #2
 8005c0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4013      	ands	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c36:	68fb      	ldr	r3, [r7, #12]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	4013      	ands	r3, r2
 8005c66:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	0c1b      	lsrs	r3, r3, #16
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	b29b      	uxth	r3, r3
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cda:	68bb      	ldr	r3, [r7, #8]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	fa22 f303 	lsr.w	r3, r2, r3
 8005d18:	01db      	lsls	r3, r3, #7
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4013      	ands	r3, r2
 8005d34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d36:	68bb      	ldr	r3, [r7, #8]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	371c      	adds	r7, #28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	f003 0301 	and.w	r3, r3, #1
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d7e:	f023 0307 	bic.w	r3, r3, #7
 8005d82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	460b      	mov	r3, r1
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	333c      	adds	r3, #60	; 0x3c
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4a26      	ldr	r2, [pc, #152]	; (8005e60 <USB_EP0_OutStart+0xb8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d90a      	bls.n	8005de2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ddc:	d101      	bne.n	8005de2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	e037      	b.n	8005e52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de8:	461a      	mov	r2, r3
 8005dea:	2300      	movs	r3, #0
 8005dec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e10:	f043 0318 	orr.w	r3, r3, #24
 8005e14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e2a:	7afb      	ldrb	r3, [r7, #11]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d10f      	bne.n	8005e50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e36:	461a      	mov	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	4f54300a 	.word	0x4f54300a

08005e64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3301      	adds	r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	4a13      	ldr	r2, [pc, #76]	; (8005ec4 <USB_CoreReset+0x60>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d901      	bls.n	8005e80 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e01a      	b.n	8005eb6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	daf3      	bge.n	8005e70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f043 0201 	orr.w	r2, r3, #1
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	4a09      	ldr	r2, [pc, #36]	; (8005ec4 <USB_CoreReset+0x60>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d901      	bls.n	8005ea8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e006      	b.n	8005eb6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d0f1      	beq.n	8005e98 <USB_CoreReset+0x34>

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	00030d40 	.word	0x00030d40

08005ec8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005ed4:	2054      	movs	r0, #84	; 0x54
 8005ed6:	f001 ffd3 	bl	8007e80 <USBD_static_malloc>
 8005eda:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d105      	bne.n	8005eee <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005eea:	2302      	movs	r3, #2
 8005eec:	e039      	b.n	8005f62 <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	7c1b      	ldrb	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d107      	bne.n	8005f0e <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2205      	movs	r2, #5
 8005f02:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2205      	movs	r2, #5
 8005f08:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8005f0c:	e006      	b.n	8005f1c <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2205      	movs	r2, #5
 8005f12:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2205      	movs	r2, #5
 8005f18:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8005f1c:	2314      	movs	r3, #20
 8005f1e:	2203      	movs	r2, #3
 8005f20:	2181      	movs	r1, #129	; 0x81
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f001 fe89 	bl	8007c3a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8005f2e:	2308      	movs	r3, #8
 8005f30:	2203      	movs	r2, #3
 8005f32:	2101      	movs	r1, #1
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f001 fe80 	bl	8007c3a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	2340      	movs	r3, #64	; 0x40
 8005f58:	2101      	movs	r1, #1
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f001 ff5c 	bl	8007e18 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	460b      	mov	r3, r1
 8005f74:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8005f76:	2181      	movs	r1, #129	; 0x81
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 fe84 	bl	8007c86 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 fe7a 	bl	8007c86 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00e      	beq.n	8005fca <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 ff6d 	bl	8007e9c <USBD_static_free>
    pdev->pClassData = NULL;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fe4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e0ed      	b.n	80061dc <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006008:	2b00      	cmp	r3, #0
 800600a:	d052      	beq.n	80060b2 <USBD_CUSTOM_HID_Setup+0xde>
 800600c:	2b20      	cmp	r3, #32
 800600e:	f040 80dd 	bne.w	80061cc <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	3b02      	subs	r3, #2
 8006018:	2b09      	cmp	r3, #9
 800601a:	d842      	bhi.n	80060a2 <USBD_CUSTOM_HID_Setup+0xce>
 800601c:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <USBD_CUSTOM_HID_Setup+0x50>)
 800601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006022:	bf00      	nop
 8006024:	0800607d 	.word	0x0800607d
 8006028:	0800605b 	.word	0x0800605b
 800602c:	080060a3 	.word	0x080060a3
 8006030:	080060a3 	.word	0x080060a3
 8006034:	080060a3 	.word	0x080060a3
 8006038:	080060a3 	.word	0x080060a3
 800603c:	080060a3 	.word	0x080060a3
 8006040:	0800608d 	.word	0x0800608d
 8006044:	0800606b 	.word	0x0800606b
 8006048:	0800604d 	.word	0x0800604d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	885b      	ldrh	r3, [r3, #2]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8006058:	e02a      	b.n	80060b0 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	3340      	adds	r3, #64	; 0x40
 800605e:	2201      	movs	r2, #1
 8006060:	4619      	mov	r1, r3
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f001 fa67 	bl	8007536 <USBD_CtlSendData>
          break;
 8006068:	e022      	b.n	80060b0 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	885b      	ldrh	r3, [r3, #2]
 800606e:	0a1b      	lsrs	r3, r3, #8
 8006070:	b29b      	uxth	r3, r3
 8006072:	b2db      	uxtb	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 800607a:	e019      	b.n	80060b0 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	3344      	adds	r3, #68	; 0x44
 8006080:	2201      	movs	r2, #1
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 fa56 	bl	8007536 <USBD_CtlSendData>
          break;
 800608a:	e011      	b.n	80060b0 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2201      	movs	r2, #1
 8006090:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8006092:	6939      	ldr	r1, [r7, #16]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	88db      	ldrh	r3, [r3, #6]
 8006098:	461a      	mov	r2, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f001 fa77 	bl	800758e <USBD_CtlPrepareRx>
          break;
 80060a0:	e006      	b.n	80060b0 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f001 f9d5 	bl	8007454 <USBD_CtlError>
          ret = USBD_FAIL;
 80060aa:	2303      	movs	r3, #3
 80060ac:	75fb      	strb	r3, [r7, #23]
          break;
 80060ae:	bf00      	nop
      }
      break;
 80060b0:	e093      	b.n	80061da <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	785b      	ldrb	r3, [r3, #1]
 80060b6:	2b0b      	cmp	r3, #11
 80060b8:	d87f      	bhi.n	80061ba <USBD_CUSTOM_HID_Setup+0x1e6>
 80060ba:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <USBD_CUSTOM_HID_Setup+0xec>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060f1 	.word	0x080060f1
 80060c4:	080061c9 	.word	0x080061c9
 80060c8:	080061bb 	.word	0x080061bb
 80060cc:	080061bb 	.word	0x080061bb
 80060d0:	080061bb 	.word	0x080061bb
 80060d4:	080061bb 	.word	0x080061bb
 80060d8:	0800611b 	.word	0x0800611b
 80060dc:	080061bb 	.word	0x080061bb
 80060e0:	080061bb 	.word	0x080061bb
 80060e4:	080061bb 	.word	0x080061bb
 80060e8:	08006169 	.word	0x08006169
 80060ec:	08006193 	.word	0x08006193
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d107      	bne.n	800610c <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80060fc:	f107 030e 	add.w	r3, r7, #14
 8006100:	2202      	movs	r2, #2
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 fa16 	bl	8007536 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800610a:	e05e      	b.n	80061ca <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f001 f9a0 	bl	8007454 <USBD_CtlError>
            ret = USBD_FAIL;
 8006114:	2303      	movs	r3, #3
 8006116:	75fb      	strb	r3, [r7, #23]
          break;
 8006118:	e057      	b.n	80061ca <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	885b      	ldrh	r3, [r3, #2]
 800611e:	0a1b      	lsrs	r3, r3, #8
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b22      	cmp	r3, #34	; 0x22
 8006124:	d10b      	bne.n	800613e <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	88db      	ldrh	r3, [r3, #6]
 800612a:	2bc4      	cmp	r3, #196	; 0xc4
 800612c:	bf28      	it	cs
 800612e:	23c4      	movcs	r3, #196	; 0xc4
 8006130:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	61bb      	str	r3, [r7, #24]
 800613c:	e00d      	b.n	800615a <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	885b      	ldrh	r3, [r3, #2]
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b21      	cmp	r3, #33	; 0x21
 8006148:	d107      	bne.n	800615a <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800614a:	4b26      	ldr	r3, [pc, #152]	; (80061e4 <USBD_CUSTOM_HID_Setup+0x210>)
 800614c:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	88db      	ldrh	r3, [r3, #6]
 8006152:	2b09      	cmp	r3, #9
 8006154:	bf28      	it	cs
 8006156:	2309      	movcs	r3, #9
 8006158:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800615a:	8bfb      	ldrh	r3, [r7, #30]
 800615c:	461a      	mov	r2, r3
 800615e:	69b9      	ldr	r1, [r7, #24]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f001 f9e8 	bl	8007536 <USBD_CtlSendData>
          break;
 8006166:	e030      	b.n	80061ca <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b03      	cmp	r3, #3
 8006172:	d107      	bne.n	8006184 <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	3348      	adds	r3, #72	; 0x48
 8006178:	2201      	movs	r2, #1
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 f9da 	bl	8007536 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006182:	e022      	b.n	80061ca <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 f964 	bl	8007454 <USBD_CtlError>
            ret = USBD_FAIL;
 800618c:	2303      	movs	r3, #3
 800618e:	75fb      	strb	r3, [r7, #23]
          break;
 8006190:	e01b      	b.n	80061ca <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b03      	cmp	r3, #3
 800619c:	d106      	bne.n	80061ac <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	885b      	ldrh	r3, [r3, #2]
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	461a      	mov	r2, r3
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061aa:	e00e      	b.n	80061ca <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 f950 	bl	8007454 <USBD_CtlError>
            ret = USBD_FAIL;
 80061b4:	2303      	movs	r3, #3
 80061b6:	75fb      	strb	r3, [r7, #23]
          break;
 80061b8:	e007      	b.n	80061ca <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80061ba:	6839      	ldr	r1, [r7, #0]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f001 f949 	bl	8007454 <USBD_CtlError>
          ret = USBD_FAIL;
 80061c2:	2303      	movs	r3, #3
 80061c4:	75fb      	strb	r3, [r7, #23]
          break;
 80061c6:	e000      	b.n	80061ca <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 80061c8:	bf00      	nop
      }
      break;
 80061ca:	e006      	b.n	80061da <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 f940 	bl	8007454 <USBD_CtlError>
      ret = USBD_FAIL;
 80061d4:	2303      	movs	r3, #3
 80061d6:	75fb      	strb	r3, [r7, #23]
      break;
 80061d8:	bf00      	nop
  }
  return (uint8_t)ret;
 80061da:	7dfb      	ldrb	r3, [r7, #23]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3720      	adds	r7, #32
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	2000021c 	.word	0x2000021c

080061e8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2299      	movs	r2, #153	; 0x99
 80061f4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 80061f6:	4b03      	ldr	r3, [pc, #12]	; (8006204 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	20000048 	.word	0x20000048

08006208 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2299      	movs	r2, #153	; 0x99
 8006214:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8006216:	4b03      	ldr	r3, [pc, #12]	; (8006224 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	200000e4 	.word	0x200000e4

08006228 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2299      	movs	r2, #153	; 0x99
 8006234:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8006236:	4b03      	ldr	r3, [pc, #12]	; (8006244 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	20000180 	.word	0x20000180

08006248 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	460b      	mov	r3, r1
 8006278:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006284:	2303      	movs	r3, #3
 8006286:	e00b      	b.n	80062a0 <USBD_CUSTOM_HID_DataOut+0x32>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800628e:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4610      	mov	r0, r2
 800629c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e00a      	b.n	80062d4 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	2340      	movs	r3, #64	; 0x40
 80062ca:	2101      	movs	r1, #1
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f001 fda3 	bl	8007e18 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062ea:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e00e      	b.n	8006314 <USBD_CUSTOM_HID_EP0_RxReady+0x38>
  }

  if (hhid->IsReportAvailable == 1U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d109      	bne.n	8006312 <USBD_CUSTOM_HID_EP0_RxReady+0x36>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4610      	mov	r0, r2
 800630a:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	220a      	movs	r2, #10
 8006328:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800632a:	4b03      	ldr	r3, [pc, #12]	; (8006338 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	20000228 	.word	0x20000228

0800633c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800634c:	2303      	movs	r3, #3
 800634e:	e004      	b.n	800635a <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b086      	sub	sp, #24
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	4613      	mov	r3, r2
 8006372:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800637a:	2303      	movs	r3, #3
 800637c:	e01f      	b.n	80063be <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d003      	beq.n	80063a4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	79fa      	ldrb	r2, [r7, #7]
 80063b0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f001 fbda 	bl	8007b6c <USBD_LL_Init>
 80063b8:	4603      	mov	r3, r0
 80063ba:	75fb      	strb	r3, [r7, #23]

  return ret;
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80063da:	2303      	movs	r3, #3
 80063dc:	e016      	b.n	800640c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00b      	beq.n	800640a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	f107 020e 	add.w	r2, r7, #14
 80063fe:	4610      	mov	r0, r2
 8006400:	4798      	blx	r3
 8006402:	4602      	mov	r2, r0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 fbf1 	bl	8007c04 <USBD_LL_Start>
 8006422:	4603      	mov	r3, r0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	460b      	mov	r3, r1
 800644c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800644e:	2303      	movs	r3, #3
 8006450:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006458:	2b00      	cmp	r3, #0
 800645a:	d009      	beq.n	8006470 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	78fa      	ldrb	r2, [r7, #3]
 8006466:	4611      	mov	r1, r2
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	4798      	blx	r3
 800646c:	4603      	mov	r3, r0
 800646e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	460b      	mov	r3, r1
 8006484:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	78fa      	ldrb	r2, [r7, #3]
 800649a:	4611      	mov	r1, r2
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	4798      	blx	r3
  }

  return USBD_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 ff8f 	bl	80073e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80064d0:	461a      	mov	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d01a      	beq.n	800651c <USBD_LL_SetupStage+0x72>
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d822      	bhi.n	8006530 <USBD_LL_SetupStage+0x86>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <USBD_LL_SetupStage+0x4a>
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d00a      	beq.n	8006508 <USBD_LL_SetupStage+0x5e>
 80064f2:	e01d      	b.n	8006530 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fa61 	bl	80069c4 <USBD_StdDevReq>
 8006502:	4603      	mov	r3, r0
 8006504:	73fb      	strb	r3, [r7, #15]
      break;
 8006506:	e020      	b.n	800654a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fac5 	bl	8006aa0 <USBD_StdItfReq>
 8006516:	4603      	mov	r3, r0
 8006518:	73fb      	strb	r3, [r7, #15]
      break;
 800651a:	e016      	b.n	800654a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fb04 	bl	8006b32 <USBD_StdEPReq>
 800652a:	4603      	mov	r3, r0
 800652c:	73fb      	strb	r3, [r7, #15]
      break;
 800652e:	e00c      	b.n	800654a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006536:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800653a:	b2db      	uxtb	r3, r3
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f001 fbc0 	bl	8007cc4 <USBD_LL_StallEP>
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]
      break;
 8006548:	bf00      	nop
  }

  return ret;
 800654a:	7bfb      	ldrb	r3, [r7, #15]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	460b      	mov	r3, r1
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006562:	7afb      	ldrb	r3, [r7, #11]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d138      	bne.n	80065da <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800656e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006576:	2b03      	cmp	r3, #3
 8006578:	d14a      	bne.n	8006610 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	689a      	ldr	r2, [r3, #8]
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	429a      	cmp	r2, r3
 8006584:	d913      	bls.n	80065ae <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	1ad2      	subs	r2, r2, r3
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	4293      	cmp	r3, r2
 800659e:	bf28      	it	cs
 80065a0:	4613      	movcs	r3, r2
 80065a2:	461a      	mov	r2, r3
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f001 f80e 	bl	80075c8 <USBD_CtlContinueRx>
 80065ac:	e030      	b.n	8006610 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d10b      	bne.n	80065d2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f001 f809 	bl	80075ea <USBD_CtlSendStatus>
 80065d8:	e01a      	b.n	8006610 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d114      	bne.n	8006610 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00e      	beq.n	8006610 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	7afa      	ldrb	r2, [r7, #11]
 80065fc:	4611      	mov	r1, r2
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	4798      	blx	r3
 8006602:	4603      	mov	r3, r0
 8006604:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006606:	7dfb      	ldrb	r3, [r7, #23]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	e000      	b.n	8006612 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b086      	sub	sp, #24
 800661e:	af00      	add	r7, sp, #0
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	460b      	mov	r3, r1
 8006624:	607a      	str	r2, [r7, #4]
 8006626:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006628:	7afb      	ldrb	r3, [r7, #11]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d16b      	bne.n	8006706 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3314      	adds	r3, #20
 8006632:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800663a:	2b02      	cmp	r3, #2
 800663c:	d156      	bne.n	80066ec <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	429a      	cmp	r2, r3
 8006648:	d914      	bls.n	8006674 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	1ad2      	subs	r2, r2, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	461a      	mov	r2, r3
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 ff83 	bl	800756c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006666:	2300      	movs	r3, #0
 8006668:	2200      	movs	r2, #0
 800666a:	2100      	movs	r1, #0
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f001 fbd3 	bl	8007e18 <USBD_LL_PrepareReceive>
 8006672:	e03b      	b.n	80066ec <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	429a      	cmp	r2, r3
 800667e:	d11c      	bne.n	80066ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006688:	429a      	cmp	r2, r3
 800668a:	d316      	bcc.n	80066ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006696:	429a      	cmp	r2, r3
 8006698:	d20f      	bcs.n	80066ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800669a:	2200      	movs	r2, #0
 800669c:	2100      	movs	r1, #0
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 ff64 	bl	800756c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066ac:	2300      	movs	r3, #0
 80066ae:	2200      	movs	r2, #0
 80066b0:	2100      	movs	r1, #0
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f001 fbb0 	bl	8007e18 <USBD_LL_PrepareReceive>
 80066b8:	e018      	b.n	80066ec <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d10b      	bne.n	80066de <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d005      	beq.n	80066de <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066de:	2180      	movs	r1, #128	; 0x80
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f001 faef 	bl	8007cc4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 ff92 	bl	8007610 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d122      	bne.n	800673c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff fe98 	bl	800642c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006704:	e01a      	b.n	800673c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b03      	cmp	r3, #3
 8006710:	d114      	bne.n	800673c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00e      	beq.n	800673c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	7afa      	ldrb	r2, [r7, #11]
 8006728:	4611      	mov	r1, r2
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	4798      	blx	r3
 800672e:	4603      	mov	r3, r0
 8006730:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006732:	7dfb      	ldrb	r3, [r7, #23]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	e000      	b.n	800673e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006776:	2303      	movs	r3, #3
 8006778:	e02f      	b.n	80067da <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00f      	beq.n	80067a4 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d009      	beq.n	80067a4 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6852      	ldr	r2, [r2, #4]
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	4611      	mov	r1, r2
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067a4:	2308      	movs	r3, #8
 80067a6:	2200      	movs	r2, #0
 80067a8:	2100      	movs	r1, #0
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f001 fa45 	bl	8007c3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2208      	movs	r2, #8
 80067bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067c0:	2308      	movs	r3, #8
 80067c2:	2200      	movs	r2, #0
 80067c4:	2180      	movs	r1, #128	; 0x80
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f001 fa37 	bl	8007c3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2208      	movs	r2, #8
 80067d6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	78fa      	ldrb	r2, [r7, #3]
 80067f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006810:	b2da      	uxtb	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2204      	movs	r2, #4
 800681c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b04      	cmp	r3, #4
 8006840:	d106      	bne.n	8006850 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006848:	b2da      	uxtb	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b082      	sub	sp, #8
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006870:	2303      	movs	r3, #3
 8006872:	e012      	b.n	800689a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b03      	cmp	r3, #3
 800687e:	d10b      	bne.n	8006898 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b082      	sub	sp, #8
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	460b      	mov	r3, r1
 80068ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e014      	b.n	80068e6 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d10d      	bne.n	80068e4 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d007      	beq.n	80068e4 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	78fa      	ldrb	r2, [r7, #3]
 80068de:	4611      	mov	r1, r2
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b082      	sub	sp, #8
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	460b      	mov	r3, r1
 80068f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006904:	2303      	movs	r3, #3
 8006906:	e014      	b.n	8006932 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b03      	cmp	r3, #3
 8006912:	d10d      	bne.n	8006930 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	78fa      	ldrb	r2, [r7, #3]
 800692a:	4611      	mov	r1, r2
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006966:	2b00      	cmp	r3, #0
 8006968:	d009      	beq.n	800697e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6852      	ldr	r2, [r2, #4]
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	4611      	mov	r1, r2
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	4798      	blx	r3
  }

  return USBD_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	3301      	adds	r3, #1
 800699e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069a6:	8a3b      	ldrh	r3, [r7, #16]
 80069a8:	021b      	lsls	r3, r3, #8
 80069aa:	b21a      	sxth	r2, r3
 80069ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	b21b      	sxth	r3, r3
 80069b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069b6:	89fb      	ldrh	r3, [r7, #14]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	371c      	adds	r7, #28
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d005      	beq.n	80069ea <USBD_StdDevReq+0x26>
 80069de:	2b40      	cmp	r3, #64	; 0x40
 80069e0:	d853      	bhi.n	8006a8a <USBD_StdDevReq+0xc6>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00b      	beq.n	80069fe <USBD_StdDevReq+0x3a>
 80069e6:	2b20      	cmp	r3, #32
 80069e8:	d14f      	bne.n	8006a8a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	4798      	blx	r3
 80069f8:	4603      	mov	r3, r0
 80069fa:	73fb      	strb	r3, [r7, #15]
      break;
 80069fc:	e04a      	b.n	8006a94 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	785b      	ldrb	r3, [r3, #1]
 8006a02:	2b09      	cmp	r3, #9
 8006a04:	d83b      	bhi.n	8006a7e <USBD_StdDevReq+0xba>
 8006a06:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <USBD_StdDevReq+0x48>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a61 	.word	0x08006a61
 8006a10:	08006a75 	.word	0x08006a75
 8006a14:	08006a7f 	.word	0x08006a7f
 8006a18:	08006a6b 	.word	0x08006a6b
 8006a1c:	08006a7f 	.word	0x08006a7f
 8006a20:	08006a3f 	.word	0x08006a3f
 8006a24:	08006a35 	.word	0x08006a35
 8006a28:	08006a7f 	.word	0x08006a7f
 8006a2c:	08006a57 	.word	0x08006a57
 8006a30:	08006a49 	.word	0x08006a49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f9de 	bl	8006df8 <USBD_GetDescriptor>
          break;
 8006a3c:	e024      	b.n	8006a88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a3e:	6839      	ldr	r1, [r7, #0]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fb43 	bl	80070cc <USBD_SetAddress>
          break;
 8006a46:	e01f      	b.n	8006a88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fb82 	bl	8007154 <USBD_SetConfig>
 8006a50:	4603      	mov	r3, r0
 8006a52:	73fb      	strb	r3, [r7, #15]
          break;
 8006a54:	e018      	b.n	8006a88 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fc21 	bl	80072a0 <USBD_GetConfig>
          break;
 8006a5e:	e013      	b.n	8006a88 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fc52 	bl	800730c <USBD_GetStatus>
          break;
 8006a68:	e00e      	b.n	8006a88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fc81 	bl	8007374 <USBD_SetFeature>
          break;
 8006a72:	e009      	b.n	8006a88 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fc90 	bl	800739c <USBD_ClrFeature>
          break;
 8006a7c:	e004      	b.n	8006a88 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fce7 	bl	8007454 <USBD_CtlError>
          break;
 8006a86:	bf00      	nop
      }
      break;
 8006a88:	e004      	b.n	8006a94 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fce1 	bl	8007454 <USBD_CtlError>
      break;
 8006a92:	bf00      	nop
  }

  return ret;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop

08006aa0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ab6:	2b40      	cmp	r3, #64	; 0x40
 8006ab8:	d005      	beq.n	8006ac6 <USBD_StdItfReq+0x26>
 8006aba:	2b40      	cmp	r3, #64	; 0x40
 8006abc:	d82f      	bhi.n	8006b1e <USBD_StdItfReq+0x7e>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <USBD_StdItfReq+0x26>
 8006ac2:	2b20      	cmp	r3, #32
 8006ac4:	d12b      	bne.n	8006b1e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d81d      	bhi.n	8006b10 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	889b      	ldrh	r3, [r3, #4]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d813      	bhi.n	8006b06 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	4798      	blx	r3
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	88db      	ldrh	r3, [r3, #6]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d110      	bne.n	8006b1a <USBD_StdItfReq+0x7a>
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10d      	bne.n	8006b1a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fd73 	bl	80075ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b04:	e009      	b.n	8006b1a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fca3 	bl	8007454 <USBD_CtlError>
          break;
 8006b0e:	e004      	b.n	8006b1a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fc9e 	bl	8007454 <USBD_CtlError>
          break;
 8006b18:	e000      	b.n	8006b1c <USBD_StdItfReq+0x7c>
          break;
 8006b1a:	bf00      	nop
      }
      break;
 8006b1c:	e004      	b.n	8006b28 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fc97 	bl	8007454 <USBD_CtlError>
      break;
 8006b26:	bf00      	nop
  }

  return ret;
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	889b      	ldrh	r3, [r3, #4]
 8006b44:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b4e:	2b40      	cmp	r3, #64	; 0x40
 8006b50:	d007      	beq.n	8006b62 <USBD_StdEPReq+0x30>
 8006b52:	2b40      	cmp	r3, #64	; 0x40
 8006b54:	f200 8145 	bhi.w	8006de2 <USBD_StdEPReq+0x2b0>
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00c      	beq.n	8006b76 <USBD_StdEPReq+0x44>
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	f040 8140 	bne.w	8006de2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	4798      	blx	r3
 8006b70:	4603      	mov	r3, r0
 8006b72:	73fb      	strb	r3, [r7, #15]
      break;
 8006b74:	e13a      	b.n	8006dec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	785b      	ldrb	r3, [r3, #1]
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d007      	beq.n	8006b8e <USBD_StdEPReq+0x5c>
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	f300 8129 	bgt.w	8006dd6 <USBD_StdEPReq+0x2a4>
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d07f      	beq.n	8006c88 <USBD_StdEPReq+0x156>
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d03c      	beq.n	8006c06 <USBD_StdEPReq+0xd4>
 8006b8c:	e123      	b.n	8006dd6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d002      	beq.n	8006ba0 <USBD_StdEPReq+0x6e>
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d016      	beq.n	8006bcc <USBD_StdEPReq+0x9a>
 8006b9e:	e02c      	b.n	8006bfa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00d      	beq.n	8006bc2 <USBD_StdEPReq+0x90>
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	2b80      	cmp	r3, #128	; 0x80
 8006baa:	d00a      	beq.n	8006bc2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 f887 	bl	8007cc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bb6:	2180      	movs	r1, #128	; 0x80
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 f883 	bl	8007cc4 <USBD_LL_StallEP>
 8006bbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bc0:	e020      	b.n	8006c04 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fc45 	bl	8007454 <USBD_CtlError>
              break;
 8006bca:	e01b      	b.n	8006c04 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	885b      	ldrh	r3, [r3, #2]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10e      	bne.n	8006bf2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006bd4:	7bbb      	ldrb	r3, [r7, #14]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00b      	beq.n	8006bf2 <USBD_StdEPReq+0xc0>
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	2b80      	cmp	r3, #128	; 0x80
 8006bde:	d008      	beq.n	8006bf2 <USBD_StdEPReq+0xc0>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	88db      	ldrh	r3, [r3, #6]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d104      	bne.n	8006bf2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 f869 	bl	8007cc4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fcf9 	bl	80075ea <USBD_CtlSendStatus>

              break;
 8006bf8:	e004      	b.n	8006c04 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fc29 	bl	8007454 <USBD_CtlError>
              break;
 8006c02:	bf00      	nop
          }
          break;
 8006c04:	e0ec      	b.n	8006de0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d002      	beq.n	8006c18 <USBD_StdEPReq+0xe6>
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d016      	beq.n	8006c44 <USBD_StdEPReq+0x112>
 8006c16:	e030      	b.n	8006c7a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00d      	beq.n	8006c3a <USBD_StdEPReq+0x108>
 8006c1e:	7bbb      	ldrb	r3, [r7, #14]
 8006c20:	2b80      	cmp	r3, #128	; 0x80
 8006c22:	d00a      	beq.n	8006c3a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 f84b 	bl	8007cc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c2e:	2180      	movs	r1, #128	; 0x80
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 f847 	bl	8007cc4 <USBD_LL_StallEP>
 8006c36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c38:	e025      	b.n	8006c86 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fc09 	bl	8007454 <USBD_CtlError>
              break;
 8006c42:	e020      	b.n	8006c86 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	885b      	ldrh	r3, [r3, #2]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d11b      	bne.n	8006c84 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
 8006c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c56:	7bbb      	ldrb	r3, [r7, #14]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 f851 	bl	8007d02 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fcc2 	bl	80075ea <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	4798      	blx	r3
 8006c74:	4603      	mov	r3, r0
 8006c76:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006c78:	e004      	b.n	8006c84 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fbe9 	bl	8007454 <USBD_CtlError>
              break;
 8006c82:	e000      	b.n	8006c86 <USBD_StdEPReq+0x154>
              break;
 8006c84:	bf00      	nop
          }
          break;
 8006c86:	e0ab      	b.n	8006de0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d002      	beq.n	8006c9a <USBD_StdEPReq+0x168>
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d032      	beq.n	8006cfe <USBD_StdEPReq+0x1cc>
 8006c98:	e097      	b.n	8006dca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d007      	beq.n	8006cb0 <USBD_StdEPReq+0x17e>
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	2b80      	cmp	r3, #128	; 0x80
 8006ca4:	d004      	beq.n	8006cb0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fbd3 	bl	8007454 <USBD_CtlError>
                break;
 8006cae:	e091      	b.n	8006dd4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	da0b      	bge.n	8006cd0 <USBD_StdEPReq+0x19e>
 8006cb8:	7bbb      	ldrb	r3, [r7, #14]
 8006cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	3310      	adds	r3, #16
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	4413      	add	r3, r2
 8006ccc:	3304      	adds	r3, #4
 8006cce:	e00b      	b.n	8006ce8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fc1d 	bl	8007536 <USBD_CtlSendData>
              break;
 8006cfc:	e06a      	b.n	8006dd4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006cfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	da11      	bge.n	8006d2a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d06:	7bbb      	ldrb	r3, [r7, #14]
 8006d08:	f003 020f 	and.w	r2, r3, #15
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	440b      	add	r3, r1
 8006d18:	3324      	adds	r3, #36	; 0x24
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d117      	bne.n	8006d50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fb96 	bl	8007454 <USBD_CtlError>
                  break;
 8006d28:	e054      	b.n	8006dd4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	f003 020f 	and.w	r2, r3, #15
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	4613      	mov	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	440b      	add	r3, r1
 8006d3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d104      	bne.n	8006d50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fb83 	bl	8007454 <USBD_CtlError>
                  break;
 8006d4e:	e041      	b.n	8006dd4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	da0b      	bge.n	8006d70 <USBD_StdEPReq+0x23e>
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	3310      	adds	r3, #16
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	e00b      	b.n	8006d88 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	4413      	add	r3, r2
 8006d86:	3304      	adds	r3, #4
 8006d88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <USBD_StdEPReq+0x264>
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	2b80      	cmp	r3, #128	; 0x80
 8006d94:	d103      	bne.n	8006d9e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	e00e      	b.n	8006dbc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 ffcc 	bl	8007d40 <USBD_LL_IsStallEP>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2201      	movs	r2, #1
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	e002      	b.n	8006dbc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2200      	movs	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fbb7 	bl	8007536 <USBD_CtlSendData>
              break;
 8006dc8:	e004      	b.n	8006dd4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fb41 	bl	8007454 <USBD_CtlError>
              break;
 8006dd2:	bf00      	nop
          }
          break;
 8006dd4:	e004      	b.n	8006de0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fb3b 	bl	8007454 <USBD_CtlError>
          break;
 8006dde:	bf00      	nop
      }
      break;
 8006de0:	e004      	b.n	8006dec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fb35 	bl	8007454 <USBD_CtlError>
      break;
 8006dea:	bf00      	nop
  }

  return ret;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	885b      	ldrh	r3, [r3, #2]
 8006e12:	0a1b      	lsrs	r3, r3, #8
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	3b01      	subs	r3, #1
 8006e18:	2b06      	cmp	r3, #6
 8006e1a:	f200 8128 	bhi.w	800706e <USBD_GetDescriptor+0x276>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <USBD_GetDescriptor+0x2c>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e41 	.word	0x08006e41
 8006e28:	08006e59 	.word	0x08006e59
 8006e2c:	08006e99 	.word	0x08006e99
 8006e30:	0800706f 	.word	0x0800706f
 8006e34:	0800706f 	.word	0x0800706f
 8006e38:	0800700f 	.word	0x0800700f
 8006e3c:	0800703b 	.word	0x0800703b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	7c12      	ldrb	r2, [r2, #16]
 8006e4c:	f107 0108 	add.w	r1, r7, #8
 8006e50:	4610      	mov	r0, r2
 8006e52:	4798      	blx	r3
 8006e54:	60f8      	str	r0, [r7, #12]
      break;
 8006e56:	e112      	b.n	800707e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	7c1b      	ldrb	r3, [r3, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10d      	bne.n	8006e7c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e68:	f107 0208 	add.w	r2, r7, #8
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4798      	blx	r3
 8006e70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3301      	adds	r3, #1
 8006e76:	2202      	movs	r2, #2
 8006e78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e7a:	e100      	b.n	800707e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	f107 0208 	add.w	r2, r7, #8
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
 8006e8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	2202      	movs	r2, #2
 8006e94:	701a      	strb	r2, [r3, #0]
      break;
 8006e96:	e0f2      	b.n	800707e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	885b      	ldrh	r3, [r3, #2]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b05      	cmp	r3, #5
 8006ea0:	f200 80ac 	bhi.w	8006ffc <USBD_GetDescriptor+0x204>
 8006ea4:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <USBD_GetDescriptor+0xb4>)
 8006ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eaa:	bf00      	nop
 8006eac:	08006ec5 	.word	0x08006ec5
 8006eb0:	08006ef9 	.word	0x08006ef9
 8006eb4:	08006f2d 	.word	0x08006f2d
 8006eb8:	08006f61 	.word	0x08006f61
 8006ebc:	08006f95 	.word	0x08006f95
 8006ec0:	08006fc9 	.word	0x08006fc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	7c12      	ldrb	r2, [r2, #16]
 8006edc:	f107 0108 	add.w	r1, r7, #8
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4798      	blx	r3
 8006ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ee6:	e091      	b.n	800700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fab2 	bl	8007454 <USBD_CtlError>
            err++;
 8006ef0:	7afb      	ldrb	r3, [r7, #11]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ef6:	e089      	b.n	800700c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00b      	beq.n	8006f1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	7c12      	ldrb	r2, [r2, #16]
 8006f10:	f107 0108 	add.w	r1, r7, #8
 8006f14:	4610      	mov	r0, r2
 8006f16:	4798      	blx	r3
 8006f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f1a:	e077      	b.n	800700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fa98 	bl	8007454 <USBD_CtlError>
            err++;
 8006f24:	7afb      	ldrb	r3, [r7, #11]
 8006f26:	3301      	adds	r3, #1
 8006f28:	72fb      	strb	r3, [r7, #11]
          break;
 8006f2a:	e06f      	b.n	800700c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00b      	beq.n	8006f50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	7c12      	ldrb	r2, [r2, #16]
 8006f44:	f107 0108 	add.w	r1, r7, #8
 8006f48:	4610      	mov	r0, r2
 8006f4a:	4798      	blx	r3
 8006f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f4e:	e05d      	b.n	800700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa7e 	bl	8007454 <USBD_CtlError>
            err++;
 8006f58:	7afb      	ldrb	r3, [r7, #11]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f5e:	e055      	b.n	800700c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00b      	beq.n	8006f84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	7c12      	ldrb	r2, [r2, #16]
 8006f78:	f107 0108 	add.w	r1, r7, #8
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4798      	blx	r3
 8006f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f82:	e043      	b.n	800700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fa64 	bl	8007454 <USBD_CtlError>
            err++;
 8006f8c:	7afb      	ldrb	r3, [r7, #11]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	72fb      	strb	r3, [r7, #11]
          break;
 8006f92:	e03b      	b.n	800700c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00b      	beq.n	8006fb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	7c12      	ldrb	r2, [r2, #16]
 8006fac:	f107 0108 	add.w	r1, r7, #8
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4798      	blx	r3
 8006fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fb6:	e029      	b.n	800700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fa4a 	bl	8007454 <USBD_CtlError>
            err++;
 8006fc0:	7afb      	ldrb	r3, [r7, #11]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fc6:	e021      	b.n	800700c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00b      	beq.n	8006fec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	7c12      	ldrb	r2, [r2, #16]
 8006fe0:	f107 0108 	add.w	r1, r7, #8
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4798      	blx	r3
 8006fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fea:	e00f      	b.n	800700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fa30 	bl	8007454 <USBD_CtlError>
            err++;
 8006ff4:	7afb      	ldrb	r3, [r7, #11]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8006ffa:	e007      	b.n	800700c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fa28 	bl	8007454 <USBD_CtlError>
          err++;
 8007004:	7afb      	ldrb	r3, [r7, #11]
 8007006:	3301      	adds	r3, #1
 8007008:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800700a:	bf00      	nop
      }
      break;
 800700c:	e037      	b.n	800707e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	7c1b      	ldrb	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701e:	f107 0208 	add.w	r2, r7, #8
 8007022:	4610      	mov	r0, r2
 8007024:	4798      	blx	r3
 8007026:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007028:	e029      	b.n	800707e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fa11 	bl	8007454 <USBD_CtlError>
        err++;
 8007032:	7afb      	ldrb	r3, [r7, #11]
 8007034:	3301      	adds	r3, #1
 8007036:	72fb      	strb	r3, [r7, #11]
      break;
 8007038:	e021      	b.n	800707e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	7c1b      	ldrb	r3, [r3, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10d      	bne.n	800705e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	f107 0208 	add.w	r2, r7, #8
 800704e:	4610      	mov	r0, r2
 8007050:	4798      	blx	r3
 8007052:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3301      	adds	r3, #1
 8007058:	2207      	movs	r2, #7
 800705a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800705c:	e00f      	b.n	800707e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f9f7 	bl	8007454 <USBD_CtlError>
        err++;
 8007066:	7afb      	ldrb	r3, [r7, #11]
 8007068:	3301      	adds	r3, #1
 800706a:	72fb      	strb	r3, [r7, #11]
      break;
 800706c:	e007      	b.n	800707e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f9ef 	bl	8007454 <USBD_CtlError>
      err++;
 8007076:	7afb      	ldrb	r3, [r7, #11]
 8007078:	3301      	adds	r3, #1
 800707a:	72fb      	strb	r3, [r7, #11]
      break;
 800707c:	bf00      	nop
  }

  if (err != 0U)
 800707e:	7afb      	ldrb	r3, [r7, #11]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d11e      	bne.n	80070c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	88db      	ldrh	r3, [r3, #6]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d016      	beq.n	80070ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800708c:	893b      	ldrh	r3, [r7, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00e      	beq.n	80070b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	88da      	ldrh	r2, [r3, #6]
 8007096:	893b      	ldrh	r3, [r7, #8]
 8007098:	4293      	cmp	r3, r2
 800709a:	bf28      	it	cs
 800709c:	4613      	movcs	r3, r2
 800709e:	b29b      	uxth	r3, r3
 80070a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80070a2:	893b      	ldrh	r3, [r7, #8]
 80070a4:	461a      	mov	r2, r3
 80070a6:	68f9      	ldr	r1, [r7, #12]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fa44 	bl	8007536 <USBD_CtlSendData>
 80070ae:	e009      	b.n	80070c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f9ce 	bl	8007454 <USBD_CtlError>
 80070b8:	e004      	b.n	80070c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fa95 	bl	80075ea <USBD_CtlSendStatus>
 80070c0:	e000      	b.n	80070c4 <USBD_GetDescriptor+0x2cc>
    return;
 80070c2:	bf00      	nop
  }
}
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop

080070cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	889b      	ldrh	r3, [r3, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d131      	bne.n	8007142 <USBD_SetAddress+0x76>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	88db      	ldrh	r3, [r3, #6]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d12d      	bne.n	8007142 <USBD_SetAddress+0x76>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	885b      	ldrh	r3, [r3, #2]
 80070ea:	2b7f      	cmp	r3, #127	; 0x7f
 80070ec:	d829      	bhi.n	8007142 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	885b      	ldrh	r3, [r3, #2]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b03      	cmp	r3, #3
 8007104:	d104      	bne.n	8007110 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f9a3 	bl	8007454 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800710e:	e01d      	b.n	800714c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	7bfa      	ldrb	r2, [r7, #15]
 8007114:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fe3b 	bl	8007d98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa61 	bl	80075ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007128:	7bfb      	ldrb	r3, [r7, #15]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d004      	beq.n	8007138 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2202      	movs	r2, #2
 8007132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007136:	e009      	b.n	800714c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007140:	e004      	b.n	800714c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f985 	bl	8007454 <USBD_CtlError>
  }
}
 800714a:	bf00      	nop
 800714c:	bf00      	nop
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	885b      	ldrh	r3, [r3, #2]
 8007166:	b2da      	uxtb	r2, r3
 8007168:	4b4c      	ldr	r3, [pc, #304]	; (800729c <USBD_SetConfig+0x148>)
 800716a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800716c:	4b4b      	ldr	r3, [pc, #300]	; (800729c <USBD_SetConfig+0x148>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d905      	bls.n	8007180 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f96c 	bl	8007454 <USBD_CtlError>
    return USBD_FAIL;
 800717c:	2303      	movs	r3, #3
 800717e:	e088      	b.n	8007292 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d002      	beq.n	8007192 <USBD_SetConfig+0x3e>
 800718c:	2b03      	cmp	r3, #3
 800718e:	d025      	beq.n	80071dc <USBD_SetConfig+0x88>
 8007190:	e071      	b.n	8007276 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007192:	4b42      	ldr	r3, [pc, #264]	; (800729c <USBD_SetConfig+0x148>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01c      	beq.n	80071d4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800719a:	4b40      	ldr	r3, [pc, #256]	; (800729c <USBD_SetConfig+0x148>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071a4:	4b3d      	ldr	r3, [pc, #244]	; (800729c <USBD_SetConfig+0x148>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7ff f949 	bl	8006442 <USBD_SetClassConfig>
 80071b0:	4603      	mov	r3, r0
 80071b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d004      	beq.n	80071c4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f949 	bl	8007454 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071c2:	e065      	b.n	8007290 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fa10 	bl	80075ea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2203      	movs	r2, #3
 80071ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071d2:	e05d      	b.n	8007290 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fa08 	bl	80075ea <USBD_CtlSendStatus>
      break;
 80071da:	e059      	b.n	8007290 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80071dc:	4b2f      	ldr	r3, [pc, #188]	; (800729c <USBD_SetConfig+0x148>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d112      	bne.n	800720a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80071ec:	4b2b      	ldr	r3, [pc, #172]	; (800729c <USBD_SetConfig+0x148>)
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071f6:	4b29      	ldr	r3, [pc, #164]	; (800729c <USBD_SetConfig+0x148>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7ff f93c 	bl	800647a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f9f1 	bl	80075ea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007208:	e042      	b.n	8007290 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800720a:	4b24      	ldr	r3, [pc, #144]	; (800729c <USBD_SetConfig+0x148>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	429a      	cmp	r2, r3
 8007216:	d02a      	beq.n	800726e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff f92a 	bl	800647a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007226:	4b1d      	ldr	r3, [pc, #116]	; (800729c <USBD_SetConfig+0x148>)
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007230:	4b1a      	ldr	r3, [pc, #104]	; (800729c <USBD_SetConfig+0x148>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff f903 	bl	8006442 <USBD_SetClassConfig>
 800723c:	4603      	mov	r3, r0
 800723e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00f      	beq.n	8007266 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f903 	bl	8007454 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7ff f90f 	bl	800647a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007264:	e014      	b.n	8007290 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f9bf 	bl	80075ea <USBD_CtlSendStatus>
      break;
 800726c:	e010      	b.n	8007290 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f9bb 	bl	80075ea <USBD_CtlSendStatus>
      break;
 8007274:	e00c      	b.n	8007290 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f8eb 	bl	8007454 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800727e:	4b07      	ldr	r3, [pc, #28]	; (800729c <USBD_SetConfig+0x148>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7ff f8f8 	bl	800647a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800728a:	2303      	movs	r3, #3
 800728c:	73fb      	strb	r3, [r7, #15]
      break;
 800728e:	bf00      	nop
  }

  return ret;
 8007290:	7bfb      	ldrb	r3, [r7, #15]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	200004a8 	.word	0x200004a8

080072a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	88db      	ldrh	r3, [r3, #6]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d004      	beq.n	80072bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f8cd 	bl	8007454 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072ba:	e023      	b.n	8007304 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	dc02      	bgt.n	80072ce <USBD_GetConfig+0x2e>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	dc03      	bgt.n	80072d4 <USBD_GetConfig+0x34>
 80072cc:	e015      	b.n	80072fa <USBD_GetConfig+0x5a>
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d00b      	beq.n	80072ea <USBD_GetConfig+0x4a>
 80072d2:	e012      	b.n	80072fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3308      	adds	r3, #8
 80072de:	2201      	movs	r2, #1
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f927 	bl	8007536 <USBD_CtlSendData>
        break;
 80072e8:	e00c      	b.n	8007304 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3304      	adds	r3, #4
 80072ee:	2201      	movs	r2, #1
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f91f 	bl	8007536 <USBD_CtlSendData>
        break;
 80072f8:	e004      	b.n	8007304 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f8a9 	bl	8007454 <USBD_CtlError>
        break;
 8007302:	bf00      	nop
}
 8007304:	bf00      	nop
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731c:	b2db      	uxtb	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	2b02      	cmp	r3, #2
 8007322:	d81e      	bhi.n	8007362 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	88db      	ldrh	r3, [r3, #6]
 8007328:	2b02      	cmp	r3, #2
 800732a:	d004      	beq.n	8007336 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f890 	bl	8007454 <USBD_CtlError>
        break;
 8007334:	e01a      	b.n	800736c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d005      	beq.n	8007352 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f043 0202 	orr.w	r2, r3, #2
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	330c      	adds	r3, #12
 8007356:	2202      	movs	r2, #2
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f8eb 	bl	8007536 <USBD_CtlSendData>
      break;
 8007360:	e004      	b.n	800736c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f875 	bl	8007454 <USBD_CtlError>
      break;
 800736a:	bf00      	nop
  }
}
 800736c:	bf00      	nop
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	885b      	ldrh	r3, [r3, #2]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d106      	bne.n	8007394 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f92b 	bl	80075ea <USBD_CtlSendStatus>
  }
}
 8007394:	bf00      	nop
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d80b      	bhi.n	80073cc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	885b      	ldrh	r3, [r3, #2]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d10c      	bne.n	80073d6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f910 	bl	80075ea <USBD_CtlSendStatus>
      }
      break;
 80073ca:	e004      	b.n	80073d6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f840 	bl	8007454 <USBD_CtlError>
      break;
 80073d4:	e000      	b.n	80073d8 <USBD_ClrFeature+0x3c>
      break;
 80073d6:	bf00      	nop
  }
}
 80073d8:	bf00      	nop
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	781a      	ldrb	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3301      	adds	r3, #1
 80073fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	781a      	ldrb	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3301      	adds	r3, #1
 8007408:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7ff fabc 	bl	8006988 <SWAPBYTE>
 8007410:	4603      	mov	r3, r0
 8007412:	461a      	mov	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3301      	adds	r3, #1
 800741c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3301      	adds	r3, #1
 8007422:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f7ff faaf 	bl	8006988 <SWAPBYTE>
 800742a:	4603      	mov	r3, r0
 800742c:	461a      	mov	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3301      	adds	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3301      	adds	r3, #1
 800743c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f7ff faa2 	bl	8006988 <SWAPBYTE>
 8007444:	4603      	mov	r3, r0
 8007446:	461a      	mov	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	80da      	strh	r2, [r3, #6]
}
 800744c:	bf00      	nop
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800745e:	2180      	movs	r1, #128	; 0x80
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fc2f 	bl	8007cc4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007466:	2100      	movs	r1, #0
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fc2b 	bl	8007cc4 <USBD_LL_StallEP>
}
 800746e:	bf00      	nop
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b086      	sub	sp, #24
 800747a:	af00      	add	r7, sp, #0
 800747c:	60f8      	str	r0, [r7, #12]
 800747e:	60b9      	str	r1, [r7, #8]
 8007480:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d036      	beq.n	80074fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007490:	6938      	ldr	r0, [r7, #16]
 8007492:	f000 f836 	bl	8007502 <USBD_GetLen>
 8007496:	4603      	mov	r3, r0
 8007498:	3301      	adds	r3, #1
 800749a:	b29b      	uxth	r3, r3
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	b29a      	uxth	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	4413      	add	r3, r2
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	7812      	ldrb	r2, [r2, #0]
 80074ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
 80074b2:	3301      	adds	r3, #1
 80074b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80074b6:	7dfb      	ldrb	r3, [r7, #23]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	4413      	add	r3, r2
 80074bc:	2203      	movs	r2, #3
 80074be:	701a      	strb	r2, [r3, #0]
  idx++;
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
 80074c2:	3301      	adds	r3, #1
 80074c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80074c6:	e013      	b.n	80074f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	4413      	add	r3, r2
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	7812      	ldrb	r2, [r2, #0]
 80074d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	3301      	adds	r3, #1
 80074d8:	613b      	str	r3, [r7, #16]
    idx++;
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	3301      	adds	r3, #1
 80074de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80074e0:	7dfb      	ldrb	r3, [r7, #23]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	4413      	add	r3, r2
 80074e6:	2200      	movs	r2, #0
 80074e8:	701a      	strb	r2, [r3, #0]
    idx++;
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
 80074ec:	3301      	adds	r3, #1
 80074ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e7      	bne.n	80074c8 <USBD_GetString+0x52>
 80074f8:	e000      	b.n	80074fc <USBD_GetString+0x86>
    return;
 80074fa:	bf00      	nop
  }
}
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007502:	b480      	push	{r7}
 8007504:	b085      	sub	sp, #20
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007512:	e005      	b.n	8007520 <USBD_GetLen+0x1e>
  {
    len++;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	3301      	adds	r3, #1
 8007518:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	3301      	adds	r3, #1
 800751e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1f5      	bne.n	8007514 <USBD_GetLen+0x12>
  }

  return len;
 8007528:	7bfb      	ldrb	r3, [r7, #15]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	60f8      	str	r0, [r7, #12]
 800753e:	60b9      	str	r1, [r7, #8]
 8007540:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2202      	movs	r2, #2
 8007546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	2100      	movs	r1, #0
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 fc3a 	bl	8007dd6 <USBD_LL_Transmit>

  return USBD_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	2100      	movs	r1, #0
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 fc29 	bl	8007dd6 <USBD_LL_Transmit>

  return USBD_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b084      	sub	sp, #16
 8007592:	af00      	add	r7, sp, #0
 8007594:	60f8      	str	r0, [r7, #12]
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2203      	movs	r2, #3
 800759e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	2100      	movs	r1, #0
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 fc2d 	bl	8007e18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	2100      	movs	r1, #0
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 fc1c 	bl	8007e18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2204      	movs	r2, #4
 80075f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075fa:	2300      	movs	r3, #0
 80075fc:	2200      	movs	r2, #0
 80075fe:	2100      	movs	r1, #0
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fbe8 	bl	8007dd6 <USBD_LL_Transmit>

  return USBD_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2205      	movs	r2, #5
 800761c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007620:	2300      	movs	r3, #0
 8007622:	2200      	movs	r2, #0
 8007624:	2100      	movs	r1, #0
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fbf6 	bl	8007e18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800763c:	2200      	movs	r2, #0
 800763e:	4912      	ldr	r1, [pc, #72]	; (8007688 <MX_USB_DEVICE_Init+0x50>)
 8007640:	4812      	ldr	r0, [pc, #72]	; (800768c <MX_USB_DEVICE_Init+0x54>)
 8007642:	f7fe fe90 	bl	8006366 <USBD_Init>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800764c:	f7fa f8a8 	bl	80017a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007650:	490f      	ldr	r1, [pc, #60]	; (8007690 <MX_USB_DEVICE_Init+0x58>)
 8007652:	480e      	ldr	r0, [pc, #56]	; (800768c <MX_USB_DEVICE_Init+0x54>)
 8007654:	f7fe feb7 	bl	80063c6 <USBD_RegisterClass>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800765e:	f7fa f89f 	bl	80017a0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007662:	490c      	ldr	r1, [pc, #48]	; (8007694 <MX_USB_DEVICE_Init+0x5c>)
 8007664:	4809      	ldr	r0, [pc, #36]	; (800768c <MX_USB_DEVICE_Init+0x54>)
 8007666:	f7fe fe69 	bl	800633c <USBD_CUSTOM_HID_RegisterInterface>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007670:	f7fa f896 	bl	80017a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007674:	4805      	ldr	r0, [pc, #20]	; (800768c <MX_USB_DEVICE_Init+0x54>)
 8007676:	f7fe fecd 	bl	8006414 <USBD_Start>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007680:	f7fa f88e 	bl	80017a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007684:	bf00      	nop
 8007686:	bd80      	pop	{r7, pc}
 8007688:	20000308 	.word	0x20000308
 800768c:	20000514 	.word	0x20000514
 8007690:	20000010 	.word	0x20000010
 8007694:	200002f8 	.word	0x200002f8

08007698 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800769c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800769e:	4618      	mov	r0, r3
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80076ac:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS( uint8_t* state)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
//memcpy(buffer,state,64);

	//USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,buffer,64);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 80076c0:	4803      	ldr	r0, [pc, #12]	; (80076d0 <CUSTOM_HID_OutEvent_FS+0x18>)
 80076c2:	f7fe fdf1 	bl	80062a8 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 80076c6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20000514 	.word	0x20000514

080076d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	6039      	str	r1, [r7, #0]
 80076de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2212      	movs	r2, #18
 80076e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076e6:	4b03      	ldr	r3, [pc, #12]	; (80076f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	20000324 	.word	0x20000324

080076f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	4603      	mov	r3, r0
 8007700:	6039      	str	r1, [r7, #0]
 8007702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2204      	movs	r2, #4
 8007708:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800770a:	4b03      	ldr	r3, [pc, #12]	; (8007718 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	20000338 	.word	0x20000338

0800771c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	6039      	str	r1, [r7, #0]
 8007726:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d105      	bne.n	800773a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	4907      	ldr	r1, [pc, #28]	; (8007750 <USBD_FS_ProductStrDescriptor+0x34>)
 8007732:	4808      	ldr	r0, [pc, #32]	; (8007754 <USBD_FS_ProductStrDescriptor+0x38>)
 8007734:	f7ff fe9f 	bl	8007476 <USBD_GetString>
 8007738:	e004      	b.n	8007744 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	4904      	ldr	r1, [pc, #16]	; (8007750 <USBD_FS_ProductStrDescriptor+0x34>)
 800773e:	4805      	ldr	r0, [pc, #20]	; (8007754 <USBD_FS_ProductStrDescriptor+0x38>)
 8007740:	f7ff fe99 	bl	8007476 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007744:	4b02      	ldr	r3, [pc, #8]	; (8007750 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	200007e4 	.word	0x200007e4
 8007754:	08008208 	.word	0x08008208

08007758 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	6039      	str	r1, [r7, #0]
 8007762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	4904      	ldr	r1, [pc, #16]	; (8007778 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007768:	4804      	ldr	r0, [pc, #16]	; (800777c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800776a:	f7ff fe84 	bl	8007476 <USBD_GetString>
  return USBD_StrDesc;
 800776e:	4b02      	ldr	r3, [pc, #8]	; (8007778 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	200007e4 	.word	0x200007e4
 800777c:	08008214 	.word	0x08008214

08007780 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	6039      	str	r1, [r7, #0]
 800778a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	221a      	movs	r2, #26
 8007790:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007792:	f000 f843 	bl	800781c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007796:	4b02      	ldr	r3, [pc, #8]	; (80077a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	2000033c 	.word	0x2000033c

080077a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	6039      	str	r1, [r7, #0]
 80077ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80077b0:	79fb      	ldrb	r3, [r7, #7]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d105      	bne.n	80077c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	4907      	ldr	r1, [pc, #28]	; (80077d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077ba:	4808      	ldr	r0, [pc, #32]	; (80077dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80077bc:	f7ff fe5b 	bl	8007476 <USBD_GetString>
 80077c0:	e004      	b.n	80077cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	4904      	ldr	r1, [pc, #16]	; (80077d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077c6:	4805      	ldr	r0, [pc, #20]	; (80077dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80077c8:	f7ff fe55 	bl	8007476 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077cc:	4b02      	ldr	r3, [pc, #8]	; (80077d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	200007e4 	.word	0x200007e4
 80077dc:	08008224 	.word	0x08008224

080077e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	6039      	str	r1, [r7, #0]
 80077ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077ec:	79fb      	ldrb	r3, [r7, #7]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d105      	bne.n	80077fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	4907      	ldr	r1, [pc, #28]	; (8007814 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077f6:	4808      	ldr	r0, [pc, #32]	; (8007818 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077f8:	f7ff fe3d 	bl	8007476 <USBD_GetString>
 80077fc:	e004      	b.n	8007808 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	4904      	ldr	r1, [pc, #16]	; (8007814 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007802:	4805      	ldr	r0, [pc, #20]	; (8007818 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007804:	f7ff fe37 	bl	8007476 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007808:	4b02      	ldr	r3, [pc, #8]	; (8007814 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	200007e4 	.word	0x200007e4
 8007818:	08008238 	.word	0x08008238

0800781c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007822:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <Get_SerialNum+0x44>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007828:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <Get_SerialNum+0x48>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800782e:	4b0e      	ldr	r3, [pc, #56]	; (8007868 <Get_SerialNum+0x4c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4413      	add	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d009      	beq.n	8007856 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007842:	2208      	movs	r2, #8
 8007844:	4909      	ldr	r1, [pc, #36]	; (800786c <Get_SerialNum+0x50>)
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 f814 	bl	8007874 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800784c:	2204      	movs	r2, #4
 800784e:	4908      	ldr	r1, [pc, #32]	; (8007870 <Get_SerialNum+0x54>)
 8007850:	68b8      	ldr	r0, [r7, #8]
 8007852:	f000 f80f 	bl	8007874 <IntToUnicode>
  }
}
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	1fff7a10 	.word	0x1fff7a10
 8007864:	1fff7a14 	.word	0x1fff7a14
 8007868:	1fff7a18 	.word	0x1fff7a18
 800786c:	2000033e 	.word	0x2000033e
 8007870:	2000034e 	.word	0x2000034e

08007874 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	4613      	mov	r3, r2
 8007880:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007882:	2300      	movs	r3, #0
 8007884:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007886:	2300      	movs	r3, #0
 8007888:	75fb      	strb	r3, [r7, #23]
 800788a:	e027      	b.n	80078dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	0f1b      	lsrs	r3, r3, #28
 8007890:	2b09      	cmp	r3, #9
 8007892:	d80b      	bhi.n	80078ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	0f1b      	lsrs	r3, r3, #28
 8007898:	b2da      	uxtb	r2, r3
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	4619      	mov	r1, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	440b      	add	r3, r1
 80078a4:	3230      	adds	r2, #48	; 0x30
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	701a      	strb	r2, [r3, #0]
 80078aa:	e00a      	b.n	80078c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	0f1b      	lsrs	r3, r3, #28
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	4619      	mov	r1, r3
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	440b      	add	r3, r1
 80078bc:	3237      	adds	r2, #55	; 0x37
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	3301      	adds	r3, #1
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	4413      	add	r3, r2
 80078d2:	2200      	movs	r2, #0
 80078d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	3301      	adds	r3, #1
 80078da:	75fb      	strb	r3, [r7, #23]
 80078dc:	7dfa      	ldrb	r2, [r7, #23]
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d3d3      	bcc.n	800788c <IntToUnicode+0x18>
  }
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	371c      	adds	r7, #28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
	...

080078f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08a      	sub	sp, #40	; 0x28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078fc:	f107 0314 	add.w	r3, r7, #20
 8007900:	2200      	movs	r2, #0
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	605a      	str	r2, [r3, #4]
 8007906:	609a      	str	r2, [r3, #8]
 8007908:	60da      	str	r2, [r3, #12]
 800790a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007914:	d13a      	bne.n	800798c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007916:	2300      	movs	r3, #0
 8007918:	613b      	str	r3, [r7, #16]
 800791a:	4b1e      	ldr	r3, [pc, #120]	; (8007994 <HAL_PCD_MspInit+0xa0>)
 800791c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791e:	4a1d      	ldr	r2, [pc, #116]	; (8007994 <HAL_PCD_MspInit+0xa0>)
 8007920:	f043 0301 	orr.w	r3, r3, #1
 8007924:	6313      	str	r3, [r2, #48]	; 0x30
 8007926:	4b1b      	ldr	r3, [pc, #108]	; (8007994 <HAL_PCD_MspInit+0xa0>)
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	613b      	str	r3, [r7, #16]
 8007930:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007932:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007938:	2302      	movs	r3, #2
 800793a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800793c:	2300      	movs	r3, #0
 800793e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007940:	2303      	movs	r3, #3
 8007942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007944:	230a      	movs	r3, #10
 8007946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007948:	f107 0314 	add.w	r3, r7, #20
 800794c:	4619      	mov	r1, r3
 800794e:	4812      	ldr	r0, [pc, #72]	; (8007998 <HAL_PCD_MspInit+0xa4>)
 8007950:	f7fa fe8e 	bl	8002670 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007954:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <HAL_PCD_MspInit+0xa0>)
 8007956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007958:	4a0e      	ldr	r2, [pc, #56]	; (8007994 <HAL_PCD_MspInit+0xa0>)
 800795a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800795e:	6353      	str	r3, [r2, #52]	; 0x34
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	4b0b      	ldr	r3, [pc, #44]	; (8007994 <HAL_PCD_MspInit+0xa0>)
 8007966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007968:	4a0a      	ldr	r2, [pc, #40]	; (8007994 <HAL_PCD_MspInit+0xa0>)
 800796a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800796e:	6453      	str	r3, [r2, #68]	; 0x44
 8007970:	4b08      	ldr	r3, [pc, #32]	; (8007994 <HAL_PCD_MspInit+0xa0>)
 8007972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800797c:	2200      	movs	r2, #0
 800797e:	2100      	movs	r1, #0
 8007980:	2043      	movs	r0, #67	; 0x43
 8007982:	f7fa fe3e 	bl	8002602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007986:	2043      	movs	r0, #67	; 0x43
 8007988:	f7fa fe57 	bl	800263a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800798c:	bf00      	nop
 800798e:	3728      	adds	r7, #40	; 0x28
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	40023800 	.word	0x40023800
 8007998:	40020000 	.word	0x40020000

0800799c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80079b0:	4619      	mov	r1, r3
 80079b2:	4610      	mov	r0, r2
 80079b4:	f7fe fd79 	bl	80064aa <USBD_LL_SetupStage>
}
 80079b8:	bf00      	nop
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80079d2:	78fa      	ldrb	r2, [r7, #3]
 80079d4:	6879      	ldr	r1, [r7, #4]
 80079d6:	4613      	mov	r3, r2
 80079d8:	00db      	lsls	r3, r3, #3
 80079da:	1a9b      	subs	r3, r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	440b      	add	r3, r1
 80079e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	4619      	mov	r1, r3
 80079ea:	f7fe fdb3 	bl	8006554 <USBD_LL_DataOutStage>
}
 80079ee:	bf00      	nop
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	460b      	mov	r3, r1
 8007a00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007a08:	78fa      	ldrb	r2, [r7, #3]
 8007a0a:	6879      	ldr	r1, [r7, #4]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	1a9b      	subs	r3, r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	3348      	adds	r3, #72	; 0x48
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	78fb      	ldrb	r3, [r7, #3]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	f7fe fdfc 	bl	800661a <USBD_LL_DataInStage>
}
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe ff10 	bl	800685e <USBD_LL_SOF>
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d001      	beq.n	8007a5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007a5a:	f7f9 fea1 	bl	80017a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a64:	7bfa      	ldrb	r2, [r7, #15]
 8007a66:	4611      	mov	r1, r2
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fe feba 	bl	80067e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fe fe66 	bl	8006746 <USBD_LL_Reset>
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fe feb5 	bl	8006802 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6812      	ldr	r2, [r2, #0]
 8007aa6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007aaa:	f043 0301 	orr.w	r3, r3, #1
 8007aae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d005      	beq.n	8007ac4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ab8:	4b04      	ldr	r3, [pc, #16]	; (8007acc <HAL_PCD_SuspendCallback+0x48>)
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	4a03      	ldr	r2, [pc, #12]	; (8007acc <HAL_PCD_SuspendCallback+0x48>)
 8007abe:	f043 0306 	orr.w	r3, r3, #6
 8007ac2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	e000ed00 	.word	0xe000ed00

08007ad0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fe fea5 	bl	800682e <USBD_LL_Resume>
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007afe:	78fa      	ldrb	r2, [r7, #3]
 8007b00:	4611      	mov	r1, r2
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fe fef3 	bl	80068ee <USBD_LL_IsoOUTIncomplete>
}
 8007b08:	bf00      	nop
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b22:	78fa      	ldrb	r2, [r7, #3]
 8007b24:	4611      	mov	r1, r2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe febb 	bl	80068a2 <USBD_LL_IsoINIncomplete>
}
 8007b2c:	bf00      	nop
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fe fef9 	bl	800693a <USBD_LL_DevConnected>
}
 8007b48:	bf00      	nop
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fef6 	bl	8006950 <USBD_LL_DevDisconnected>
}
 8007b64:	bf00      	nop
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d13c      	bne.n	8007bf6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b7c:	4a20      	ldr	r2, [pc, #128]	; (8007c00 <USBD_LL_Init+0x94>)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a1e      	ldr	r2, [pc, #120]	; (8007c00 <USBD_LL_Init+0x94>)
 8007b88:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b8c:	4b1c      	ldr	r3, [pc, #112]	; (8007c00 <USBD_LL_Init+0x94>)
 8007b8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b94:	4b1a      	ldr	r3, [pc, #104]	; (8007c00 <USBD_LL_Init+0x94>)
 8007b96:	2204      	movs	r2, #4
 8007b98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b9a:	4b19      	ldr	r3, [pc, #100]	; (8007c00 <USBD_LL_Init+0x94>)
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ba0:	4b17      	ldr	r3, [pc, #92]	; (8007c00 <USBD_LL_Init+0x94>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ba6:	4b16      	ldr	r3, [pc, #88]	; (8007c00 <USBD_LL_Init+0x94>)
 8007ba8:	2202      	movs	r2, #2
 8007baa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007bac:	4b14      	ldr	r3, [pc, #80]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007bb2:	4b13      	ldr	r3, [pc, #76]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007bb8:	4b11      	ldr	r3, [pc, #68]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007bbe:	4b10      	ldr	r3, [pc, #64]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007bc4:	4b0e      	ldr	r3, [pc, #56]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007bca:	480d      	ldr	r0, [pc, #52]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bcc:	f7fb f84a 	bl	8002c64 <HAL_PCD_Init>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007bd6:	f7f9 fde3 	bl	80017a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bda:	2180      	movs	r1, #128	; 0x80
 8007bdc:	4808      	ldr	r0, [pc, #32]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bde:	f7fc f9a8 	bl	8003f32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007be2:	2240      	movs	r2, #64	; 0x40
 8007be4:	2100      	movs	r1, #0
 8007be6:	4806      	ldr	r0, [pc, #24]	; (8007c00 <USBD_LL_Init+0x94>)
 8007be8:	f7fc f95c 	bl	8003ea4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007bec:	2280      	movs	r2, #128	; 0x80
 8007bee:	2101      	movs	r1, #1
 8007bf0:	4803      	ldr	r0, [pc, #12]	; (8007c00 <USBD_LL_Init+0x94>)
 8007bf2:	f7fc f957 	bl	8003ea4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	200009e4 	.word	0x200009e4

08007c04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fb f93f 	bl	8002e9e <HAL_PCD_Start>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 f942 	bl	8007eb0 <USBD_Get_USB_Status>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	4608      	mov	r0, r1
 8007c44:	4611      	mov	r1, r2
 8007c46:	461a      	mov	r2, r3
 8007c48:	4603      	mov	r3, r0
 8007c4a:	70fb      	strb	r3, [r7, #3]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70bb      	strb	r3, [r7, #2]
 8007c50:	4613      	mov	r3, r2
 8007c52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c62:	78bb      	ldrb	r3, [r7, #2]
 8007c64:	883a      	ldrh	r2, [r7, #0]
 8007c66:	78f9      	ldrb	r1, [r7, #3]
 8007c68:	f7fb fd23 	bl	80036b2 <HAL_PCD_EP_Open>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 f91c 	bl	8007eb0 <USBD_Get_USB_Status>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ca0:	78fa      	ldrb	r2, [r7, #3]
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fb fd6c 	bl	8003782 <HAL_PCD_EP_Close>
 8007caa:	4603      	mov	r3, r0
 8007cac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 f8fd 	bl	8007eb0 <USBD_Get_USB_Status>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cde:	78fa      	ldrb	r2, [r7, #3]
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fb fe44 	bl	8003970 <HAL_PCD_EP_SetStall>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 f8de 	bl	8007eb0 <USBD_Get_USB_Status>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d1c:	78fa      	ldrb	r2, [r7, #3]
 8007d1e:	4611      	mov	r1, r2
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fb fe89 	bl	8003a38 <HAL_PCD_EP_ClrStall>
 8007d26:	4603      	mov	r3, r0
 8007d28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 f8bf 	bl	8007eb0 <USBD_Get_USB_Status>
 8007d32:	4603      	mov	r3, r0
 8007d34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	da0b      	bge.n	8007d74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d62:	68f9      	ldr	r1, [r7, #12]
 8007d64:	4613      	mov	r3, r2
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	1a9b      	subs	r3, r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	440b      	add	r3, r1
 8007d6e:	333e      	adds	r3, #62	; 0x3e
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	e00b      	b.n	8007d8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d7a:	68f9      	ldr	r1, [r7, #12]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	00db      	lsls	r3, r3, #3
 8007d80:	1a9b      	subs	r3, r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	440b      	add	r3, r1
 8007d86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007db2:	78fa      	ldrb	r2, [r7, #3]
 8007db4:	4611      	mov	r1, r2
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fb fc56 	bl	8003668 <HAL_PCD_SetAddress>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 f874 	bl	8007eb0 <USBD_Get_USB_Status>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b086      	sub	sp, #24
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	603b      	str	r3, [r7, #0]
 8007de2:	460b      	mov	r3, r1
 8007de4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007df4:	7af9      	ldrb	r1, [r7, #11]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	f7fb fd6f 	bl	80038dc <HAL_PCD_EP_Transmit>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 f853 	bl	8007eb0 <USBD_Get_USB_Status>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e0e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	607a      	str	r2, [r7, #4]
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	460b      	mov	r3, r1
 8007e26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e36:	7af9      	ldrb	r1, [r7, #11]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	f7fb fceb 	bl	8003816 <HAL_PCD_EP_Receive>
 8007e40:	4603      	mov	r3, r0
 8007e42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 f832 	bl	8007eb0 <USBD_Get_USB_Status>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e50:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	460b      	mov	r3, r1
 8007e64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e6c:	78fa      	ldrb	r2, [r7, #3]
 8007e6e:	4611      	mov	r1, r2
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fb fd1b 	bl	80038ac <HAL_PCD_EP_GetRxCount>
 8007e76:	4603      	mov	r3, r0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007e88:	4b03      	ldr	r3, [pc, #12]	; (8007e98 <USBD_static_malloc+0x18>)
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	200004ac 	.word	0x200004ac

08007e9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]

}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ebe:	79fb      	ldrb	r3, [r7, #7]
 8007ec0:	2b03      	cmp	r3, #3
 8007ec2:	d817      	bhi.n	8007ef4 <USBD_Get_USB_Status+0x44>
 8007ec4:	a201      	add	r2, pc, #4	; (adr r2, 8007ecc <USBD_Get_USB_Status+0x1c>)
 8007ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eca:	bf00      	nop
 8007ecc:	08007edd 	.word	0x08007edd
 8007ed0:	08007ee3 	.word	0x08007ee3
 8007ed4:	08007ee9 	.word	0x08007ee9
 8007ed8:	08007eef 	.word	0x08007eef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee0:	e00b      	b.n	8007efa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee6:	e008      	b.n	8007efa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	73fb      	strb	r3, [r7, #15]
    break;
 8007eec:	e005      	b.n	8007efa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ef2:	e002      	b.n	8007efa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ef8:	bf00      	nop
  }
  return usb_status;
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <_ZdlPvj>:
 8007f08:	f000 b811 	b.w	8007f2e <_ZdlPv>

08007f0c <_Znwj>:
 8007f0c:	2801      	cmp	r0, #1
 8007f0e:	bf38      	it	cc
 8007f10:	2001      	movcc	r0, #1
 8007f12:	b510      	push	{r4, lr}
 8007f14:	4604      	mov	r4, r0
 8007f16:	4620      	mov	r0, r4
 8007f18:	f000 f846 	bl	8007fa8 <malloc>
 8007f1c:	b930      	cbnz	r0, 8007f2c <_Znwj+0x20>
 8007f1e:	f000 f809 	bl	8007f34 <_ZSt15get_new_handlerv>
 8007f22:	b908      	cbnz	r0, 8007f28 <_Znwj+0x1c>
 8007f24:	f000 f80e 	bl	8007f44 <abort>
 8007f28:	4780      	blx	r0
 8007f2a:	e7f4      	b.n	8007f16 <_Znwj+0xa>
 8007f2c:	bd10      	pop	{r4, pc}

08007f2e <_ZdlPv>:
 8007f2e:	f000 b843 	b.w	8007fb8 <free>
	...

08007f34 <_ZSt15get_new_handlerv>:
 8007f34:	4b02      	ldr	r3, [pc, #8]	; (8007f40 <_ZSt15get_new_handlerv+0xc>)
 8007f36:	6818      	ldr	r0, [r3, #0]
 8007f38:	f3bf 8f5b 	dmb	ish
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	20000504 	.word	0x20000504

08007f44 <abort>:
 8007f44:	b508      	push	{r3, lr}
 8007f46:	2006      	movs	r0, #6
 8007f48:	f000 f928 	bl	800819c <raise>
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	f7f9 fd2d 	bl	80019ac <_exit>
	...

08007f54 <__errno>:
 8007f54:	4b01      	ldr	r3, [pc, #4]	; (8007f5c <__errno+0x8>)
 8007f56:	6818      	ldr	r0, [r3, #0]
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	20000358 	.word	0x20000358

08007f60 <__libc_init_array>:
 8007f60:	b570      	push	{r4, r5, r6, lr}
 8007f62:	4d0d      	ldr	r5, [pc, #52]	; (8007f98 <__libc_init_array+0x38>)
 8007f64:	4c0d      	ldr	r4, [pc, #52]	; (8007f9c <__libc_init_array+0x3c>)
 8007f66:	1b64      	subs	r4, r4, r5
 8007f68:	10a4      	asrs	r4, r4, #2
 8007f6a:	2600      	movs	r6, #0
 8007f6c:	42a6      	cmp	r6, r4
 8007f6e:	d109      	bne.n	8007f84 <__libc_init_array+0x24>
 8007f70:	4d0b      	ldr	r5, [pc, #44]	; (8007fa0 <__libc_init_array+0x40>)
 8007f72:	4c0c      	ldr	r4, [pc, #48]	; (8007fa4 <__libc_init_array+0x44>)
 8007f74:	f000 f93c 	bl	80081f0 <_init>
 8007f78:	1b64      	subs	r4, r4, r5
 8007f7a:	10a4      	asrs	r4, r4, #2
 8007f7c:	2600      	movs	r6, #0
 8007f7e:	42a6      	cmp	r6, r4
 8007f80:	d105      	bne.n	8007f8e <__libc_init_array+0x2e>
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
 8007f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f88:	4798      	blx	r3
 8007f8a:	3601      	adds	r6, #1
 8007f8c:	e7ee      	b.n	8007f6c <__libc_init_array+0xc>
 8007f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f92:	4798      	blx	r3
 8007f94:	3601      	adds	r6, #1
 8007f96:	e7f2      	b.n	8007f7e <__libc_init_array+0x1e>
 8007f98:	080082ec 	.word	0x080082ec
 8007f9c:	080082ec 	.word	0x080082ec
 8007fa0:	080082ec 	.word	0x080082ec
 8007fa4:	080082f0 	.word	0x080082f0

08007fa8 <malloc>:
 8007fa8:	4b02      	ldr	r3, [pc, #8]	; (8007fb4 <malloc+0xc>)
 8007faa:	4601      	mov	r1, r0
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	f000 b863 	b.w	8008078 <_malloc_r>
 8007fb2:	bf00      	nop
 8007fb4:	20000358 	.word	0x20000358

08007fb8 <free>:
 8007fb8:	4b02      	ldr	r3, [pc, #8]	; (8007fc4 <free+0xc>)
 8007fba:	4601      	mov	r1, r0
 8007fbc:	6818      	ldr	r0, [r3, #0]
 8007fbe:	f000 b80b 	b.w	8007fd8 <_free_r>
 8007fc2:	bf00      	nop
 8007fc4:	20000358 	.word	0x20000358

08007fc8 <memset>:
 8007fc8:	4402      	add	r2, r0
 8007fca:	4603      	mov	r3, r0
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d100      	bne.n	8007fd2 <memset+0xa>
 8007fd0:	4770      	bx	lr
 8007fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007fd6:	e7f9      	b.n	8007fcc <memset+0x4>

08007fd8 <_free_r>:
 8007fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fda:	2900      	cmp	r1, #0
 8007fdc:	d048      	beq.n	8008070 <_free_r+0x98>
 8007fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fe2:	9001      	str	r0, [sp, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f1a1 0404 	sub.w	r4, r1, #4
 8007fea:	bfb8      	it	lt
 8007fec:	18e4      	addlt	r4, r4, r3
 8007fee:	f000 f8f1 	bl	80081d4 <__malloc_lock>
 8007ff2:	4a20      	ldr	r2, [pc, #128]	; (8008074 <_free_r+0x9c>)
 8007ff4:	9801      	ldr	r0, [sp, #4]
 8007ff6:	6813      	ldr	r3, [r2, #0]
 8007ff8:	4615      	mov	r5, r2
 8007ffa:	b933      	cbnz	r3, 800800a <_free_r+0x32>
 8007ffc:	6063      	str	r3, [r4, #4]
 8007ffe:	6014      	str	r4, [r2, #0]
 8008000:	b003      	add	sp, #12
 8008002:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008006:	f000 b8eb 	b.w	80081e0 <__malloc_unlock>
 800800a:	42a3      	cmp	r3, r4
 800800c:	d90b      	bls.n	8008026 <_free_r+0x4e>
 800800e:	6821      	ldr	r1, [r4, #0]
 8008010:	1862      	adds	r2, r4, r1
 8008012:	4293      	cmp	r3, r2
 8008014:	bf04      	itt	eq
 8008016:	681a      	ldreq	r2, [r3, #0]
 8008018:	685b      	ldreq	r3, [r3, #4]
 800801a:	6063      	str	r3, [r4, #4]
 800801c:	bf04      	itt	eq
 800801e:	1852      	addeq	r2, r2, r1
 8008020:	6022      	streq	r2, [r4, #0]
 8008022:	602c      	str	r4, [r5, #0]
 8008024:	e7ec      	b.n	8008000 <_free_r+0x28>
 8008026:	461a      	mov	r2, r3
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	b10b      	cbz	r3, 8008030 <_free_r+0x58>
 800802c:	42a3      	cmp	r3, r4
 800802e:	d9fa      	bls.n	8008026 <_free_r+0x4e>
 8008030:	6811      	ldr	r1, [r2, #0]
 8008032:	1855      	adds	r5, r2, r1
 8008034:	42a5      	cmp	r5, r4
 8008036:	d10b      	bne.n	8008050 <_free_r+0x78>
 8008038:	6824      	ldr	r4, [r4, #0]
 800803a:	4421      	add	r1, r4
 800803c:	1854      	adds	r4, r2, r1
 800803e:	42a3      	cmp	r3, r4
 8008040:	6011      	str	r1, [r2, #0]
 8008042:	d1dd      	bne.n	8008000 <_free_r+0x28>
 8008044:	681c      	ldr	r4, [r3, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	6053      	str	r3, [r2, #4]
 800804a:	4421      	add	r1, r4
 800804c:	6011      	str	r1, [r2, #0]
 800804e:	e7d7      	b.n	8008000 <_free_r+0x28>
 8008050:	d902      	bls.n	8008058 <_free_r+0x80>
 8008052:	230c      	movs	r3, #12
 8008054:	6003      	str	r3, [r0, #0]
 8008056:	e7d3      	b.n	8008000 <_free_r+0x28>
 8008058:	6825      	ldr	r5, [r4, #0]
 800805a:	1961      	adds	r1, r4, r5
 800805c:	428b      	cmp	r3, r1
 800805e:	bf04      	itt	eq
 8008060:	6819      	ldreq	r1, [r3, #0]
 8008062:	685b      	ldreq	r3, [r3, #4]
 8008064:	6063      	str	r3, [r4, #4]
 8008066:	bf04      	itt	eq
 8008068:	1949      	addeq	r1, r1, r5
 800806a:	6021      	streq	r1, [r4, #0]
 800806c:	6054      	str	r4, [r2, #4]
 800806e:	e7c7      	b.n	8008000 <_free_r+0x28>
 8008070:	b003      	add	sp, #12
 8008072:	bd30      	pop	{r4, r5, pc}
 8008074:	20000508 	.word	0x20000508

08008078 <_malloc_r>:
 8008078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807a:	1ccd      	adds	r5, r1, #3
 800807c:	f025 0503 	bic.w	r5, r5, #3
 8008080:	3508      	adds	r5, #8
 8008082:	2d0c      	cmp	r5, #12
 8008084:	bf38      	it	cc
 8008086:	250c      	movcc	r5, #12
 8008088:	2d00      	cmp	r5, #0
 800808a:	4606      	mov	r6, r0
 800808c:	db01      	blt.n	8008092 <_malloc_r+0x1a>
 800808e:	42a9      	cmp	r1, r5
 8008090:	d903      	bls.n	800809a <_malloc_r+0x22>
 8008092:	230c      	movs	r3, #12
 8008094:	6033      	str	r3, [r6, #0]
 8008096:	2000      	movs	r0, #0
 8008098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800809a:	f000 f89b 	bl	80081d4 <__malloc_lock>
 800809e:	4921      	ldr	r1, [pc, #132]	; (8008124 <_malloc_r+0xac>)
 80080a0:	680a      	ldr	r2, [r1, #0]
 80080a2:	4614      	mov	r4, r2
 80080a4:	b99c      	cbnz	r4, 80080ce <_malloc_r+0x56>
 80080a6:	4f20      	ldr	r7, [pc, #128]	; (8008128 <_malloc_r+0xb0>)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	b923      	cbnz	r3, 80080b6 <_malloc_r+0x3e>
 80080ac:	4621      	mov	r1, r4
 80080ae:	4630      	mov	r0, r6
 80080b0:	f000 f83c 	bl	800812c <_sbrk_r>
 80080b4:	6038      	str	r0, [r7, #0]
 80080b6:	4629      	mov	r1, r5
 80080b8:	4630      	mov	r0, r6
 80080ba:	f000 f837 	bl	800812c <_sbrk_r>
 80080be:	1c43      	adds	r3, r0, #1
 80080c0:	d123      	bne.n	800810a <_malloc_r+0x92>
 80080c2:	230c      	movs	r3, #12
 80080c4:	6033      	str	r3, [r6, #0]
 80080c6:	4630      	mov	r0, r6
 80080c8:	f000 f88a 	bl	80081e0 <__malloc_unlock>
 80080cc:	e7e3      	b.n	8008096 <_malloc_r+0x1e>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	1b5b      	subs	r3, r3, r5
 80080d2:	d417      	bmi.n	8008104 <_malloc_r+0x8c>
 80080d4:	2b0b      	cmp	r3, #11
 80080d6:	d903      	bls.n	80080e0 <_malloc_r+0x68>
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	441c      	add	r4, r3
 80080dc:	6025      	str	r5, [r4, #0]
 80080de:	e004      	b.n	80080ea <_malloc_r+0x72>
 80080e0:	6863      	ldr	r3, [r4, #4]
 80080e2:	42a2      	cmp	r2, r4
 80080e4:	bf0c      	ite	eq
 80080e6:	600b      	streq	r3, [r1, #0]
 80080e8:	6053      	strne	r3, [r2, #4]
 80080ea:	4630      	mov	r0, r6
 80080ec:	f000 f878 	bl	80081e0 <__malloc_unlock>
 80080f0:	f104 000b 	add.w	r0, r4, #11
 80080f4:	1d23      	adds	r3, r4, #4
 80080f6:	f020 0007 	bic.w	r0, r0, #7
 80080fa:	1ac2      	subs	r2, r0, r3
 80080fc:	d0cc      	beq.n	8008098 <_malloc_r+0x20>
 80080fe:	1a1b      	subs	r3, r3, r0
 8008100:	50a3      	str	r3, [r4, r2]
 8008102:	e7c9      	b.n	8008098 <_malloc_r+0x20>
 8008104:	4622      	mov	r2, r4
 8008106:	6864      	ldr	r4, [r4, #4]
 8008108:	e7cc      	b.n	80080a4 <_malloc_r+0x2c>
 800810a:	1cc4      	adds	r4, r0, #3
 800810c:	f024 0403 	bic.w	r4, r4, #3
 8008110:	42a0      	cmp	r0, r4
 8008112:	d0e3      	beq.n	80080dc <_malloc_r+0x64>
 8008114:	1a21      	subs	r1, r4, r0
 8008116:	4630      	mov	r0, r6
 8008118:	f000 f808 	bl	800812c <_sbrk_r>
 800811c:	3001      	adds	r0, #1
 800811e:	d1dd      	bne.n	80080dc <_malloc_r+0x64>
 8008120:	e7cf      	b.n	80080c2 <_malloc_r+0x4a>
 8008122:	bf00      	nop
 8008124:	20000508 	.word	0x20000508
 8008128:	2000050c 	.word	0x2000050c

0800812c <_sbrk_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d06      	ldr	r5, [pc, #24]	; (8008148 <_sbrk_r+0x1c>)
 8008130:	2300      	movs	r3, #0
 8008132:	4604      	mov	r4, r0
 8008134:	4608      	mov	r0, r1
 8008136:	602b      	str	r3, [r5, #0]
 8008138:	f7f9 fc42 	bl	80019c0 <_sbrk>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_sbrk_r+0x1a>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_sbrk_r+0x1a>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	20000dec 	.word	0x20000dec

0800814c <_raise_r>:
 800814c:	291f      	cmp	r1, #31
 800814e:	b538      	push	{r3, r4, r5, lr}
 8008150:	4604      	mov	r4, r0
 8008152:	460d      	mov	r5, r1
 8008154:	d904      	bls.n	8008160 <_raise_r+0x14>
 8008156:	2316      	movs	r3, #22
 8008158:	6003      	str	r3, [r0, #0]
 800815a:	f04f 30ff 	mov.w	r0, #4294967295
 800815e:	bd38      	pop	{r3, r4, r5, pc}
 8008160:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008162:	b112      	cbz	r2, 800816a <_raise_r+0x1e>
 8008164:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008168:	b94b      	cbnz	r3, 800817e <_raise_r+0x32>
 800816a:	4620      	mov	r0, r4
 800816c:	f000 f830 	bl	80081d0 <_getpid_r>
 8008170:	462a      	mov	r2, r5
 8008172:	4601      	mov	r1, r0
 8008174:	4620      	mov	r0, r4
 8008176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800817a:	f000 b817 	b.w	80081ac <_kill_r>
 800817e:	2b01      	cmp	r3, #1
 8008180:	d00a      	beq.n	8008198 <_raise_r+0x4c>
 8008182:	1c59      	adds	r1, r3, #1
 8008184:	d103      	bne.n	800818e <_raise_r+0x42>
 8008186:	2316      	movs	r3, #22
 8008188:	6003      	str	r3, [r0, #0]
 800818a:	2001      	movs	r0, #1
 800818c:	e7e7      	b.n	800815e <_raise_r+0x12>
 800818e:	2400      	movs	r4, #0
 8008190:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008194:	4628      	mov	r0, r5
 8008196:	4798      	blx	r3
 8008198:	2000      	movs	r0, #0
 800819a:	e7e0      	b.n	800815e <_raise_r+0x12>

0800819c <raise>:
 800819c:	4b02      	ldr	r3, [pc, #8]	; (80081a8 <raise+0xc>)
 800819e:	4601      	mov	r1, r0
 80081a0:	6818      	ldr	r0, [r3, #0]
 80081a2:	f7ff bfd3 	b.w	800814c <_raise_r>
 80081a6:	bf00      	nop
 80081a8:	20000358 	.word	0x20000358

080081ac <_kill_r>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	4d07      	ldr	r5, [pc, #28]	; (80081cc <_kill_r+0x20>)
 80081b0:	2300      	movs	r3, #0
 80081b2:	4604      	mov	r4, r0
 80081b4:	4608      	mov	r0, r1
 80081b6:	4611      	mov	r1, r2
 80081b8:	602b      	str	r3, [r5, #0]
 80081ba:	f7f9 fbe7 	bl	800198c <_kill>
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	d102      	bne.n	80081c8 <_kill_r+0x1c>
 80081c2:	682b      	ldr	r3, [r5, #0]
 80081c4:	b103      	cbz	r3, 80081c8 <_kill_r+0x1c>
 80081c6:	6023      	str	r3, [r4, #0]
 80081c8:	bd38      	pop	{r3, r4, r5, pc}
 80081ca:	bf00      	nop
 80081cc:	20000dec 	.word	0x20000dec

080081d0 <_getpid_r>:
 80081d0:	f7f9 bbd4 	b.w	800197c <_getpid>

080081d4 <__malloc_lock>:
 80081d4:	4801      	ldr	r0, [pc, #4]	; (80081dc <__malloc_lock+0x8>)
 80081d6:	f000 b809 	b.w	80081ec <__retarget_lock_acquire_recursive>
 80081da:	bf00      	nop
 80081dc:	20000df4 	.word	0x20000df4

080081e0 <__malloc_unlock>:
 80081e0:	4801      	ldr	r0, [pc, #4]	; (80081e8 <__malloc_unlock+0x8>)
 80081e2:	f000 b804 	b.w	80081ee <__retarget_lock_release_recursive>
 80081e6:	bf00      	nop
 80081e8:	20000df4 	.word	0x20000df4

080081ec <__retarget_lock_acquire_recursive>:
 80081ec:	4770      	bx	lr

080081ee <__retarget_lock_release_recursive>:
 80081ee:	4770      	bx	lr

080081f0 <_init>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	bf00      	nop
 80081f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f6:	bc08      	pop	{r3}
 80081f8:	469e      	mov	lr, r3
 80081fa:	4770      	bx	lr

080081fc <_fini>:
 80081fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fe:	bf00      	nop
 8008200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008202:	bc08      	pop	{r3}
 8008204:	469e      	mov	lr, r3
 8008206:	4770      	bx	lr
