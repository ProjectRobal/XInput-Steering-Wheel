
STMXInput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075ec  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08007780  08007780  00017780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800783c  0800783c  000203b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007844  08007844  000203b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007844  08007844  00017844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007848  08007848  00017848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b8  20000000  0800784c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a14  200003b8  08007c04  000203b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dcc  08007c04  00020dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7c4  00000000  00000000  000203e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004040  00000000  00000000  0003cbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00040bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00041d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e3d7  00000000  00000000  00042d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f5c  00000000  00000000  000610df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099ebd  00000000  00000000  0007803b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00111ef8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a50  00000000  00000000  00111f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200003b8 	.word	0x200003b8
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007768 	.word	0x08007768

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200003bc 	.word	0x200003bc
 80001d0:	08007768 	.word	0x08007768

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_ZN4XUSB4initEv>:
#ifdef __cplusplus

class XUSB
{
public:
	static void init(){ usb_xinput_init(); }
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	f000 ff68 	bl	80013a4 <usb_xinput_init>
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <_ZN4XUSB9availableEv>:
	static uint16_t available() { return usb_xinput_available(); }
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
 80004dc:	f000 ff0c 	bl	80012f8 <usb_xinput_available>
 80004e0:	4603      	mov	r3, r0
 80004e2:	4618      	mov	r0, r3
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <_ZN4XUSB4sendEPhh>:
	static uint8_t send(uint8_t *buffer, uint8_t nbytes) { return usb_xinput_send(buffer, nbytes); }
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
 80004ee:	460b      	mov	r3, r1
 80004f0:	70fb      	strb	r3, [r7, #3]
 80004f2:	78fb      	ldrb	r3, [r7, #3]
 80004f4:	4619      	mov	r1, r3
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f000 ff24 	bl	8001344 <usb_xinput_send>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4618      	mov	r0, r3
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <_ZN4XUSB4recvEPhh>:
	static uint8_t recv(uint8_t *buffer, uint8_t nbytes) { return usb_xinput_recv(buffer, nbytes); }
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	460b      	mov	r3, r1
 8000510:	70fb      	strb	r3, [r7, #3]
 8000512:	78fb      	ldrb	r3, [r7, #3]
 8000514:	4619      	mov	r1, r3
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 fefa 	bl	8001310 <usb_xinput_recv>
 800051c:	4603      	mov	r3, r0
 800051e:	4618      	mov	r0, r3
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <_ZN4Xbox8autosendEv>:
		bool newData;  // Flag for tx data changed
		bool autoSendOption;  // Flag for automatically sending data

		void setJoystickDirect(XInputControl joy, int16_t x, int16_t y);

		void inline autosend() {
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
			if (autoSendOption) { send(); }
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	7e5b      	ldrb	r3, [r3, #25]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d002      	beq.n	800053c <_ZN4Xbox8autosendEv+0x16>
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 fa17 	bl	800096a <_ZN4Xbox4sendEv>
		}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <_Z3maplllll>:
#include "Xbox.h"



long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	69b9      	ldr	r1, [r7, #24]
 800055a:	683a      	ldr	r2, [r7, #0]
 800055c:	1a8a      	subs	r2, r1, r2
 800055e:	fb02 f203 	mul.w	r2, r2, r3
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	fb92 f2f3 	sdiv	r2, r2, r3
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	4413      	add	r3, r2
}
 8000570:	4618      	mov	r0, r3
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <_Z17getButtonFromEnum13XInputControl>:
static const XInputMap_Button Map_ButtonA(3, 4);
static const XInputMap_Button Map_ButtonB(3, 5);
static const XInputMap_Button Map_ButtonX(3, 6);
static const XInputMap_Button Map_ButtonY(3, 7);

const XInputMap_Button * getButtonFromEnum(XInputControl ctrl) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	switch (ctrl) {
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b12      	cmp	r3, #18
 800058a:	d847      	bhi.n	800061c <_Z17getButtonFromEnum13XInputControl+0xa0>
 800058c:	a201      	add	r2, pc, #4	; (adr r2, 8000594 <_Z17getButtonFromEnum13XInputControl+0x18>)
 800058e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000592:	bf00      	nop
 8000594:	08000619 	.word	0x08000619
 8000598:	080005f1 	.word	0x080005f1
 800059c:	080005f5 	.word	0x080005f5
 80005a0:	080005f9 	.word	0x080005f9
 80005a4:	080005fd 	.word	0x080005fd
 80005a8:	08000601 	.word	0x08000601
 80005ac:	08000605 	.word	0x08000605
 80005b0:	08000615 	.word	0x08000615
 80005b4:	08000611 	.word	0x08000611
 80005b8:	08000609 	.word	0x08000609
 80005bc:	0800060d 	.word	0x0800060d
 80005c0:	080005e1 	.word	0x080005e1
 80005c4:	080005e5 	.word	0x080005e5
 80005c8:	080005e9 	.word	0x080005e9
 80005cc:	080005ed 	.word	0x080005ed
 80005d0:	0800061d 	.word	0x0800061d
 80005d4:	0800061d 	.word	0x0800061d
 80005d8:	08000609 	.word	0x08000609
 80005dc:	0800060d 	.word	0x0800060d
	case(DPAD_UP):      return &Map_DpadUp;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <_Z17getButtonFromEnum13XInputControl+0xb0>)
 80005e2:	e01c      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(DPAD_DOWN):    return &Map_DpadDown;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <_Z17getButtonFromEnum13XInputControl+0xb4>)
 80005e6:	e01a      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(DPAD_LEFT):    return &Map_DpadLeft;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <_Z17getButtonFromEnum13XInputControl+0xb8>)
 80005ea:	e018      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(DPAD_RIGHT):   return &Map_DpadRight;
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <_Z17getButtonFromEnum13XInputControl+0xbc>)
 80005ee:	e016      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_A):     return &Map_ButtonA;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <_Z17getButtonFromEnum13XInputControl+0xc0>)
 80005f2:	e014      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_B):     return &Map_ButtonB;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <_Z17getButtonFromEnum13XInputControl+0xc4>)
 80005f6:	e012      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_X):     return &Map_ButtonX;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <_Z17getButtonFromEnum13XInputControl+0xc8>)
 80005fa:	e010      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_Y):     return &Map_ButtonY;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <_Z17getButtonFromEnum13XInputControl+0xcc>)
 80005fe:	e00e      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_LB):    return &Map_ButtonLB;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <_Z17getButtonFromEnum13XInputControl+0xd0>)
 8000602:	e00c      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_RB):    return &Map_ButtonRB;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <_Z17getButtonFromEnum13XInputControl+0xd4>)
 8000606:	e00a      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(JOY_LEFT):
	case(BUTTON_L3):    return &Map_ButtonL3;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <_Z17getButtonFromEnum13XInputControl+0xd8>)
 800060a:	e008      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(JOY_RIGHT):
	case(BUTTON_R3):    return &Map_ButtonR3;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <_Z17getButtonFromEnum13XInputControl+0xdc>)
 800060e:	e006      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_START): return &Map_ButtonStart;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <_Z17getButtonFromEnum13XInputControl+0xe0>)
 8000612:	e004      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_BACK):  return &Map_ButtonBack;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <_Z17getButtonFromEnum13XInputControl+0xe4>)
 8000616:	e002      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_LOGO):  return &Map_ButtonLogo;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <_Z17getButtonFromEnum13XInputControl+0xe8>)
 800061a:	e000      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	default: return nullptr;
 800061c:	2300      	movs	r3, #0
	}
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	080077c8 	.word	0x080077c8
 8000630:	080077cc 	.word	0x080077cc
 8000634:	080077d0 	.word	0x080077d0
 8000638:	080077d4 	.word	0x080077d4
 800063c:	080077f4 	.word	0x080077f4
 8000640:	080077f8 	.word	0x080077f8
 8000644:	080077fc 	.word	0x080077fc
 8000648:	08007800 	.word	0x08007800
 800064c:	080077e8 	.word	0x080077e8
 8000650:	080077ec 	.word	0x080077ec
 8000654:	080077e0 	.word	0x080077e0
 8000658:	080077e4 	.word	0x080077e4
 800065c:	080077d8 	.word	0x080077d8
 8000660:	080077dc 	.word	0x080077dc
 8000664:	080077f0 	.word	0x080077f0

08000668 <_Z18getTriggerFromEnum13XInputControl>:
const Xbox::Range XInputMap_Trigger::range = { 0, 255 };  // uint8_t

static const XInputMap_Trigger Map_TriggerLeft(4);
static const XInputMap_Trigger Map_TriggerRight(5);

const XInputMap_Trigger * getTriggerFromEnum(XInputControl ctrl) {
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	switch (ctrl) {
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b0f      	cmp	r3, #15
 8000676:	d002      	beq.n	800067e <_Z18getTriggerFromEnum13XInputControl+0x16>
 8000678:	2b10      	cmp	r3, #16
 800067a:	d002      	beq.n	8000682 <_Z18getTriggerFromEnum13XInputControl+0x1a>
 800067c:	e003      	b.n	8000686 <_Z18getTriggerFromEnum13XInputControl+0x1e>
	case(TRIGGER_LEFT): return &Map_TriggerLeft;
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <_Z18getTriggerFromEnum13XInputControl+0x2c>)
 8000680:	e002      	b.n	8000688 <_Z18getTriggerFromEnum13XInputControl+0x20>
	case(TRIGGER_RIGHT): return &Map_TriggerRight;
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <_Z18getTriggerFromEnum13XInputControl+0x30>)
 8000684:	e000      	b.n	8000688 <_Z18getTriggerFromEnum13XInputControl+0x20>
	default: return nullptr;
 8000686:	2300      	movs	r3, #0
	}
}
 8000688:	4618      	mov	r0, r3
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	0800780c 	.word	0x0800780c
 8000698:	08007810 	.word	0x08007810

0800069c <_ZN4XboxC1Ev>:

// --------------------------------------------------------
// Xbox Class (API)                           |
// --------------------------------------------------------

Xbox::Xbox() :
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	tx(), rumble() // Zero initialize arrays
 80006a4:	4a17      	ldr	r2, [pc, #92]	; (8000704 <_ZN4XboxC1Ev+0x68>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	1d1a      	adds	r2, r3, #4
 80006ae:	2313      	movs	r3, #19
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db04      	blt.n	80006be <_ZN4XboxC1Ev+0x22>
 80006b4:	2100      	movs	r1, #0
 80006b6:	7011      	strb	r1, [r2, #0]
 80006b8:	3201      	adds	r2, #1
 80006ba:	3b01      	subs	r3, #1
 80006bc:	e7f8      	b.n	80006b0 <_ZN4XboxC1Ev+0x14>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f103 021b 	add.w	r2, r3, #27
 80006c4:	2301      	movs	r3, #1
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	db04      	blt.n	80006d4 <_ZN4XboxC1Ev+0x38>
 80006ca:	2100      	movs	r1, #0
 80006cc:	7011      	strb	r1, [r2, #0]
 80006ce:	3201      	adds	r2, #1
 80006d0:	3b01      	subs	r3, #1
 80006d2:	e7f8      	b.n	80006c6 <_ZN4XboxC1Ev+0x2a>
{
	this->begin();
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f817 	bl	8000708 <_ZN4Xbox5beginEv>
	reset();
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 fa8c 	bl	8000bf8 <_ZN4Xbox5resetEv>

	while(this->receive());  // flush USB OUT buffer
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f000 f951 	bl	8000988 <_ZN4Xbox7receiveEv>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	bf14      	ite	ne
 80006ec:	2301      	movne	r3, #1
 80006ee:	2300      	moveq	r3, #0
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d000      	beq.n	80006f8 <_ZN4XboxC1Ev+0x5c>
 80006f6:	e7f3      	b.n	80006e0 <_ZN4XboxC1Ev+0x44>

}
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	0800781c 	.word	0x0800781c

08000708 <_ZN4Xbox5beginEv>:

void Xbox::begin() {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	// Empty for now
	//usb_xinput_init();
	XUSB::init();
 8000710:	f7ff fedc 	bl	80004cc <_ZN4XUSB4initEv>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <_ZN4Xbox5pressEh>:

void Xbox::press(uint8_t button) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	70fb      	strb	r3, [r7, #3]
	setButton(button, true);
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	2201      	movs	r2, #1
 800072c:	4619      	mov	r1, r3
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f000 f804 	bl	800073c <_ZN4Xbox9setButtonEhb>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <_ZN4Xbox9setButtonEhb>:

void Xbox::release(uint8_t button) {
	setButton(button, false);
}

void Xbox::setButton(uint8_t button, bool state) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
 8000748:	4613      	mov	r3, r2
 800074a:	70bb      	strb	r3, [r7, #2]
	const XInputMap_Button * buttonData = getButtonFromEnum((XInputControl) button);
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff14 	bl	800057c <_Z17getButtonFromEnum13XInputControl>
 8000754:	60f8      	str	r0, [r7, #12]
	if (buttonData != nullptr) {
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d03d      	beq.n	80007d8 <_ZN4Xbox9setButtonEhb+0x9c>
		if (getButton(button) == state) return;  // Button hasn't changed
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	4619      	mov	r1, r3
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f8b1 	bl	80008c8 <_ZNK4Xbox9getButtonEh>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	78bb      	ldrb	r3, [r7, #2]
 800076c:	4293      	cmp	r3, r2
 800076e:	bf0c      	ite	eq
 8000770:	2301      	moveq	r3, #1
 8000772:	2300      	movne	r3, #0
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d145      	bne.n	8000806 <_ZN4Xbox9setButtonEhb+0xca>

		if (state) { tx[buttonData->index] |= buttonData->mask; }  // Press
 800077a:	78bb      	ldrb	r3, [r7, #2]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00f      	beq.n	80007a0 <_ZN4Xbox9setButtonEhb+0x64>
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	791a      	ldrb	r2, [r3, #4]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	785b      	ldrb	r3, [r3, #1]
 8000790:	68f9      	ldr	r1, [r7, #12]
 8000792:	7809      	ldrb	r1, [r1, #0]
 8000794:	4313      	orrs	r3, r2
 8000796:	b2da      	uxtb	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	440b      	add	r3, r1
 800079c:	711a      	strb	r2, [r3, #4]
 800079e:	e014      	b.n	80007ca <_ZN4Xbox9setButtonEhb+0x8e>
		else { tx[buttonData->index] &= ~(buttonData->mask); }  // Release
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	b25a      	sxtb	r2, r3
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	785b      	ldrb	r3, [r3, #1]
 80007b2:	b25b      	sxtb	r3, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	4013      	ands	r3, r2
 80007ba:	b25a      	sxtb	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	440b      	add	r3, r1
 80007c8:	711a      	strb	r2, [r3, #4]
		newData = true;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2201      	movs	r2, #1
 80007ce:	761a      	strb	r2, [r3, #24]
		autosend();
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff fea8 	bl	8000526 <_ZN4Xbox8autosendEv>
 80007d6:	e019      	b.n	800080c <_ZN4Xbox9setButtonEhb+0xd0>
	}
	else {
		Range * triggerRange = getRangeFromEnum((XInputControl) button);
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	4619      	mov	r1, r3
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 f95b 	bl	8000a98 <_ZN4Xbox16getRangeFromEnumE13XInputControl>
 80007e2:	60b8      	str	r0, [r7, #8]
		if (triggerRange == nullptr) return;  // Not a trigger (or joystick, but the trigger function will ignore that)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d00f      	beq.n	800080a <_ZN4Xbox9setButtonEhb+0xce>
		setTrigger((XInputControl) button, state ? triggerRange->max : triggerRange->min);  // Treat trigger like a button
 80007ea:	78bb      	ldrb	r3, [r7, #2]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <_ZN4Xbox9setButtonEhb+0xba>
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	e001      	b.n	80007fa <_ZN4Xbox9setButtonEhb+0xbe>
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	78f9      	ldrb	r1, [r7, #3]
 80007fc:	461a      	mov	r2, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f808 	bl	8000814 <_ZN4Xbox10setTriggerE13XInputControll>
 8000804:	e002      	b.n	800080c <_ZN4Xbox9setButtonEhb+0xd0>
		if (getButton(button) == state) return;  // Button hasn't changed
 8000806:	bf00      	nop
 8000808:	e000      	b.n	800080c <_ZN4Xbox9setButtonEhb+0xd0>
		if (triggerRange == nullptr) return;  // Not a trigger (or joystick, but the trigger function will ignore that)
 800080a:	bf00      	nop
	}
}
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <_ZN4Xbox10setTriggerE13XInputControll>:

	autoSendOption = autoSendTemp;  // Re-enable from option
	autosend();
}

void Xbox::setTrigger(XInputControl trigger, int32_t val) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	460b      	mov	r3, r1
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	72fb      	strb	r3, [r7, #11]
	const XInputMap_Trigger * triggerData = getTriggerFromEnum(trigger);
 8000822:	7afb      	ldrb	r3, [r7, #11]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff1f 	bl	8000668 <_Z18getTriggerFromEnum13XInputControl>
 800082a:	6178      	str	r0, [r7, #20]
	if (triggerData == nullptr) return;  // Not a trigger
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d029      	beq.n	8000886 <_ZN4Xbox10setTriggerE13XInputControll+0x72>

	val = rescaleInput(val, *getRangeFromEnum(trigger), XInputMap_Trigger::range);
 8000832:	7afb      	ldrb	r3, [r7, #11]
 8000834:	4619      	mov	r1, r3
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f000 f92e 	bl	8000a98 <_ZN4Xbox16getRangeFromEnumE13XInputControl>
 800083c:	4603      	mov	r3, r0
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <_ZN4Xbox10setTriggerE13XInputControll+0x80>)
 8000840:	4619      	mov	r1, r3
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f000 f952 	bl	8000aec <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_>
 8000848:	6078      	str	r0, [r7, #4]
	if (getTrigger(trigger) == val) return;  // Trigger hasn't changed
 800084a:	7afb      	ldrb	r3, [r7, #11]
 800084c:	4619      	mov	r1, r3
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f000 f871 	bl	8000936 <_ZNK4Xbox10getTriggerE13XInputControl>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4293      	cmp	r3, r2
 800085c:	bf0c      	ite	eq
 800085e:	2301      	moveq	r3, #1
 8000860:	2300      	movne	r3, #0
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d110      	bne.n	800088a <_ZN4Xbox10setTriggerE13XInputControll+0x76>

	tx[triggerData->index] = val;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	b2da      	uxtb	r2, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	440b      	add	r3, r1
 8000876:	711a      	strb	r2, [r3, #4]
	newData = true;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	2201      	movs	r2, #1
 800087c:	761a      	strb	r2, [r3, #24]
	autosend();
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff fe51 	bl	8000526 <_ZN4Xbox8autosendEv>
 8000884:	e002      	b.n	800088c <_ZN4Xbox10setTriggerE13XInputControll+0x78>
	if (triggerData == nullptr) return;  // Not a trigger
 8000886:	bf00      	nop
 8000888:	e000      	b.n	800088c <_ZN4Xbox10setTriggerE13XInputControll+0x78>
	if (getTrigger(trigger) == val) return;  // Trigger hasn't changed
 800088a:	bf00      	nop
}
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	08007804 	.word	0x08007804

08000898 <_ZN4Xbox10releaseAllEv>:
	}

	autosend();
}

void Xbox::releaseAll() {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	const uint8_t offset = 2;  // Skip message type and packet size
 80008a0:	2302      	movs	r3, #2
 80008a2:	73fb      	strb	r3, [r7, #15]
	memset(tx + offset, 0x00, sizeof(tx) - offset);  // Clear TX array
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3304      	adds	r3, #4
 80008a8:	3302      	adds	r3, #2
 80008aa:	2212      	movs	r2, #18
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f006 fe46 	bl	8007540 <memset>
	newData = true;  // Data changed and is unsent
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2201      	movs	r2, #1
 80008b8:	761a      	strb	r2, [r3, #24]
	autosend();
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fe33 	bl	8000526 <_ZN4Xbox8autosendEv>
}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <_ZNK4Xbox9getButtonEh>:

void Xbox::setAutoSend(bool a) {
	autoSendOption = a;
}

bool Xbox::getButton(uint8_t button) const {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
	const XInputMap_Button* buttonData = getButtonFromEnum((XInputControl) button);
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fe50 	bl	800057c <_Z17getButtonFromEnum13XInputControl>
 80008dc:	60f8      	str	r0, [r7, #12]
	if (buttonData != nullptr) {
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d00f      	beq.n	8000904 <_ZNK4Xbox9getButtonEh+0x3c>
		return tx[buttonData->index] & buttonData->mask;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	791a      	ldrb	r2, [r3, #4]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	785b      	ldrb	r3, [r3, #1]
 80008f4:	4013      	ands	r3, r2
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	bf14      	ite	ne
 80008fc:	2301      	movne	r3, #1
 80008fe:	2300      	moveq	r3, #0
 8000900:	b2db      	uxtb	r3, r3
 8000902:	e014      	b.n	800092e <_ZNK4Xbox9getButtonEh+0x66>
	}
	const XInputMap_Trigger* triggerData = getTriggerFromEnum((XInputControl) button);
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff feae 	bl	8000668 <_Z18getTriggerFromEnum13XInputControl>
 800090c:	60b8      	str	r0, [r7, #8]
	if (triggerData != nullptr) {
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d00b      	beq.n	800092c <_ZNK4Xbox9getButtonEh+0x64>
		return getTrigger((XInputControl) button) != 0 ? 1 : 0;
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	4619      	mov	r1, r3
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 f80c 	bl	8000936 <_ZNK4Xbox10getTriggerE13XInputControl>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	bf14      	ite	ne
 8000924:	2301      	movne	r3, #1
 8000926:	2300      	moveq	r3, #0
 8000928:	b2db      	uxtb	r3, r3
 800092a:	e000      	b.n	800092e <_ZNK4Xbox9getButtonEh+0x66>
	}
	return 0;  // Not a button or a trigger
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <_ZNK4Xbox10getTriggerE13XInputControl>:

bool Xbox::getDpad(XInputControl dpad) const {
	return getButton(dpad);
}

uint8_t Xbox::getTrigger(XInputControl trigger) const {
 8000936:	b580      	push	{r7, lr}
 8000938:	b084      	sub	sp, #16
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	460b      	mov	r3, r1
 8000940:	70fb      	strb	r3, [r7, #3]
	const XInputMap_Trigger * triggerData = getTriggerFromEnum(trigger);
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fe8f 	bl	8000668 <_Z18getTriggerFromEnum13XInputControl>
 800094a:	60f8      	str	r0, [r7, #12]
	if (triggerData == nullptr) return 0;  // Not a trigger
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d101      	bne.n	8000956 <_ZNK4Xbox10getTriggerE13XInputControl+0x20>
 8000952:	2300      	movs	r3, #0
 8000954:	e005      	b.n	8000962 <_ZNK4Xbox10getTriggerE13XInputControl+0x2c>
	return tx[triggerData->index];
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4413      	add	r3, r2
 8000960:	791b      	ldrb	r3, [r3, #4]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <_ZN4Xbox4sendEv>:
	return ledPattern;
}


//Send an update packet to the PC
int Xbox::send() {
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
	//if (!newData) return 0;  // TX data hasn't changed //here is problem
	//newData = false;

	return XUSB::send(tx, 20);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3304      	adds	r3, #4
 8000976:	2114      	movs	r1, #20
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fdb4 	bl	80004e6 <_ZN4XUSB4sendEPhh>
 800097e:	4603      	mov	r3, r0

}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <_ZN4Xbox7receiveEv>:

int Xbox::receive() {
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

	if (XUSB::available() == 0) {
 8000990:	f7ff fda2 	bl	80004d8 <_ZN4XUSB9availableEv>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	bf0c      	ite	eq
 800099a:	2301      	moveq	r3, #1
 800099c:	2300      	movne	r3, #0
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <_ZN4Xbox7receiveEv+0x20>
		return 0;  // No packet available
 80009a4:	2300      	movs	r3, #0
 80009a6:	e02f      	b.n	8000a08 <_ZN4Xbox7receiveEv+0x80>
	}

	// Grab packet and store it in rx array
	uint8_t rx[8];
	const int bytesRecv = XUSB::recv(rx, sizeof(rx));
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	2108      	movs	r1, #8
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fda9 	bl	8000506 <_ZN4XUSB4recvEPhh>
 80009b4:	4603      	mov	r3, r0
 80009b6:	617b      	str	r3, [r7, #20]

	// Only process if received 3 or more bytes (min valid packet size)
	if (bytesRecv >= 3) {
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	dd23      	ble.n	8000a06 <_ZN4Xbox7receiveEv+0x7e>
		const uint8_t PacketType = rx[0];
 80009be:	7a3b      	ldrb	r3, [r7, #8]
 80009c0:	74fb      	strb	r3, [r7, #19]

		// Rumble Packet
		if (PacketType == (uint8_t)XInputReceiveType::Rumble) {
 80009c2:	7cfb      	ldrb	r3, [r7, #19]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d116      	bne.n	80009f6 <_ZN4Xbox7receiveEv+0x6e>
			rumble[RumbleLeft.bufferIndex] = rx[RumbleLeft.rxIndex];   // Big weight (Left grip)
 80009c8:	2303      	movs	r3, #3
 80009ca:	2200      	movs	r2, #0
 80009cc:	4611      	mov	r1, r2
 80009ce:	f107 0218 	add.w	r2, r7, #24
 80009d2:	4413      	add	r3, r2
 80009d4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	440b      	add	r3, r1
 80009dc:	76da      	strb	r2, [r3, #27]
			rumble[RumbleRight.bufferIndex] = rx[RumbleRight.rxIndex];  // Small weight (Right grip)
 80009de:	2304      	movs	r3, #4
 80009e0:	2201      	movs	r2, #1
 80009e2:	4611      	mov	r1, r2
 80009e4:	f107 0218 	add.w	r2, r7, #24
 80009e8:	4413      	add	r3, r2
 80009ea:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	440b      	add	r3, r1
 80009f2:	76da      	strb	r2, [r3, #27]
 80009f4:	e007      	b.n	8000a06 <_ZN4Xbox7receiveEv+0x7e>
		}
		// LED Packet
		else if (PacketType == (uint8_t)XInputReceiveType::LEDs) {
 80009f6:	7cfb      	ldrb	r3, [r7, #19]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d104      	bne.n	8000a06 <_ZN4Xbox7receiveEv+0x7e>
			parseLED(rx[2]);
 80009fc:	7abb      	ldrb	r3, [r7, #10]
 80009fe:	4619      	mov	r1, r3
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f000 f805 	bl	8000a10 <_ZN4Xbox8parseLEDEh>
		}


	}

	return bytesRecv;
 8000a06:	697b      	ldr	r3, [r7, #20]

}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <_ZN4Xbox8parseLEDEh>:

void Xbox::parseLED(uint8_t leds) {
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	70fb      	strb	r3, [r7, #3]
	if (leds > 0x0D) return;  // Not a known pattern
 8000a1c:	78fb      	ldrb	r3, [r7, #3]
 8000a1e:	2b0d      	cmp	r3, #13
 8000a20:	d832      	bhi.n	8000a88 <_ZN4Xbox8parseLEDEh+0x78>

	ledPattern = (XInputLEDPattern) leds;  // Save pattern
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	78fa      	ldrb	r2, [r7, #3]
 8000a26:	775a      	strb	r2, [r3, #29]
	switch (ledPattern) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7f5b      	ldrb	r3, [r3, #29]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b09      	cmp	r3, #9
 8000a30:	d82c      	bhi.n	8000a8c <_ZN4Xbox8parseLEDEh+0x7c>
 8000a32:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <_ZN4Xbox8parseLEDEh+0x28>)
 8000a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a38:	08000a61 	.word	0x08000a61
 8000a3c:	08000a61 	.word	0x08000a61
 8000a40:	08000a69 	.word	0x08000a69
 8000a44:	08000a71 	.word	0x08000a71
 8000a48:	08000a79 	.word	0x08000a79
 8000a4c:	08000a81 	.word	0x08000a81
 8000a50:	08000a69 	.word	0x08000a69
 8000a54:	08000a71 	.word	0x08000a71
 8000a58:	08000a79 	.word	0x08000a79
 8000a5c:	08000a81 	.word	0x08000a81
	case(XInputLEDPattern::Off):
	case(XInputLEDPattern::Blinking):
		player = 0;  // Not connected
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	769a      	strb	r2, [r3, #26]
		break;
 8000a66:	e012      	b.n	8000a8e <_ZN4Xbox8parseLEDEh+0x7e>
	case(XInputLEDPattern::On1):
	case(XInputLEDPattern::Flash1):
		player = 1;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	769a      	strb	r2, [r3, #26]
		break;
 8000a6e:	e00e      	b.n	8000a8e <_ZN4Xbox8parseLEDEh+0x7e>
	case(XInputLEDPattern::On2):
	case(XInputLEDPattern::Flash2):
		player = 2;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2202      	movs	r2, #2
 8000a74:	769a      	strb	r2, [r3, #26]
		break;
 8000a76:	e00a      	b.n	8000a8e <_ZN4Xbox8parseLEDEh+0x7e>
	case(XInputLEDPattern::On3):
	case(XInputLEDPattern::Flash3):
		player = 3;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	769a      	strb	r2, [r3, #26]
		break;
 8000a7e:	e006      	b.n	8000a8e <_ZN4Xbox8parseLEDEh+0x7e>
	case(XInputLEDPattern::On4):
	case(XInputLEDPattern::Flash4):
		player = 4;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2204      	movs	r2, #4
 8000a84:	769a      	strb	r2, [r3, #26]
		break;
 8000a86:	e002      	b.n	8000a8e <_ZN4Xbox8parseLEDEh+0x7e>
	if (leds > 0x0D) return;  // Not a known pattern
 8000a88:	bf00      	nop
 8000a8a:	e000      	b.n	8000a8e <_ZN4Xbox8parseLEDEh+0x7e>
	default: return;  // Pattern doesn't affect player #
 8000a8c:	bf00      	nop
	}
}
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_ZN4Xbox16getRangeFromEnumE13XInputControl>:

Xbox::Range * Xbox::getRangeFromEnum(XInputControl ctrl) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	70fb      	strb	r3, [r7, #3]
	switch (ctrl) {
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	3b0f      	subs	r3, #15
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d817      	bhi.n	8000adc <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x44>
 8000aac:	a201      	add	r2, pc, #4	; (adr r2, 8000ab4 <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x1c>)
 8000aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab2:	bf00      	nop
 8000ab4:	08000ac5 	.word	0x08000ac5
 8000ab8:	08000acb 	.word	0x08000acb
 8000abc:	08000ad1 	.word	0x08000ad1
 8000ac0:	08000ad7 	.word	0x08000ad7
	case(TRIGGER_LEFT): return &rangeTrigLeft;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3320      	adds	r3, #32
 8000ac8:	e009      	b.n	8000ade <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x46>
	case(TRIGGER_RIGHT): return &rangeTrigRight;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3328      	adds	r3, #40	; 0x28
 8000ace:	e006      	b.n	8000ade <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x46>
	case(JOY_LEFT): return &rangeJoyLeft;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3330      	adds	r3, #48	; 0x30
 8000ad4:	e003      	b.n	8000ade <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x46>
	case(JOY_RIGHT): return &rangeJoyRight;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3338      	adds	r3, #56	; 0x38
 8000ada:	e000      	b.n	8000ade <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x46>
	default: return nullptr;
 8000adc:	2300      	movs	r3, #0
	}
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_>:

int32_t Xbox::rescaleInput(int32_t val, const Range& in, const Range& out) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
	if (val <= in.min) return out.min;  // Out of range -
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	dc02      	bgt.n	8000b08 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x1c>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	e024      	b.n	8000b52 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x66>
	if (val >= in.max) return out.max;  // Out of range +
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	db02      	blt.n	8000b18 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x2c>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	e01c      	b.n	8000b52 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x66>
	if (in.min == out.min && in.max == out.max) return val;  // Ranges identical
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d107      	bne.n	8000b34 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x48>
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d101      	bne.n	8000b34 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x48>
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	e00e      	b.n	8000b52 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x66>
	return map(val, in.min, in.max, out.min, out.max);
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	6819      	ldr	r1, [r3, #0]
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	4603      	mov	r3, r0
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f7ff fcfb 	bl	8000544 <_Z3maplllll>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	bf00      	nop
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_ZN4Xbox15setTriggerRangeEll>:

int16_t Xbox::invertInput(int16_t val, const Range& range) {
	return range.max - val + range.min;
}

void Xbox::setTriggerRange(int32_t rangeMin, int32_t rangeMax) {
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
	setRange(TRIGGER_LEFT, rangeMin, rangeMax);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f000 f820 	bl	8000bb2 <_ZN4Xbox8setRangeE13XInputControlll>
	setRange(TRIGGER_RIGHT, rangeMin, rangeMax);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	2110      	movs	r1, #16
 8000b78:	68f8      	ldr	r0, [r7, #12]
 8000b7a:	f000 f81a 	bl	8000bb2 <_ZN4Xbox8setRangeE13XInputControlll>
}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_ZN4Xbox16setJoystickRangeEll>:

void Xbox::setJoystickRange(int32_t rangeMin, int32_t rangeMax) {
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
	setRange(JOY_LEFT, rangeMin, rangeMax);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68ba      	ldr	r2, [r7, #8]
 8000b96:	2111      	movs	r1, #17
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f000 f80a 	bl	8000bb2 <_ZN4Xbox8setRangeE13XInputControlll>
	setRange(JOY_RIGHT, rangeMin, rangeMax);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	2112      	movs	r1, #18
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f000 f804 	bl	8000bb2 <_ZN4Xbox8setRangeE13XInputControlll>
}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <_ZN4Xbox8setRangeE13XInputControlll>:

void Xbox::setRange(XInputControl ctrl, int32_t rangeMin, int32_t rangeMax) {
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	60f8      	str	r0, [r7, #12]
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	72fb      	strb	r3, [r7, #11]
	if (rangeMin >= rangeMax) return;  // Error: Max < Min
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	da0f      	bge.n	8000bea <_ZN4Xbox8setRangeE13XInputControlll+0x38>

	Range * range = getRangeFromEnum(ctrl);
 8000bca:	7afb      	ldrb	r3, [r7, #11]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f7ff ff62 	bl	8000a98 <_ZN4Xbox16getRangeFromEnumE13XInputControl>
 8000bd4:	6178      	str	r0, [r7, #20]
	if (range == nullptr) return;  // Not an addressable range
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d008      	beq.n	8000bee <_ZN4Xbox8setRangeE13XInputControlll+0x3c>

	range->min = rangeMin;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	601a      	str	r2, [r3, #0]
	range->max = rangeMax;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	e002      	b.n	8000bf0 <_ZN4Xbox8setRangeE13XInputControlll+0x3e>
	if (rangeMin >= rangeMax) return;  // Error: Max < Min
 8000bea:	bf00      	nop
 8000bec:	e000      	b.n	8000bf0 <_ZN4Xbox8setRangeE13XInputControlll+0x3e>
	if (range == nullptr) return;  // Not an addressable range
 8000bee:	bf00      	nop
}
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <_ZN4Xbox5resetEv>:

// Resets class back to initial values
void Xbox::reset() {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	// Reset control data (tx)
	autoSendOption = false;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	765a      	strb	r2, [r3, #25]
	releaseAll();  // Clear TX buffer
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff fe46 	bl	8000898 <_ZN4Xbox10releaseAllEv>
	tx[0] = 0x00;  // Set tx message type
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	711a      	strb	r2, [r3, #4]
	tx[1] = 0x14;  // Set tx packet size (20)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2214      	movs	r2, #20
 8000c16:	715a      	strb	r2, [r3, #5]

	// Reset received data (rx)
	player = 0;  // Not connected, no player
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	769a      	strb	r2, [r3, #26]
	memset((void*) rumble, 0x00, sizeof(rumble));  // Clear rumble values
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	331b      	adds	r3, #27
 8000c22:	2202      	movs	r2, #2
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f006 fc8a 	bl	8007540 <memset>
	ledPattern = XInputLEDPattern::Off;  // No LEDs on
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	775a      	strb	r2, [r3, #29]

	// Reset rescale ranges
	setTriggerRange(XInputMap_Trigger::range.min, XInputMap_Trigger::range.max);
 8000c32:	2300      	movs	r3, #0
 8000c34:	22ff      	movs	r2, #255	; 0xff
 8000c36:	4619      	mov	r1, r3
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff8e 	bl	8000b5a <_ZN4Xbox15setTriggerRangeEll>
	setJoystickRange(XInputMap_Joystick::range.min, XInputMap_Joystick::range.max);
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <_ZN4Xbox5resetEv+0x64>)
 8000c40:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff9d 	bl	8000b86 <_ZN4Xbox16setJoystickRangeEll>
	this->send();
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff fe8c 	bl	800096a <_ZN4Xbox4sendEv>
	// Clear user-set options


}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	ffff8000 	.word	0xffff8000

08000c60 <_ZN4XboxD1Ev>:

Xbox::~Xbox() {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <_ZN4XboxD1Ev+0x1c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	0800781c 	.word	0x0800781c

08000c80 <_ZN4XboxD0Ev>:
Xbox::~Xbox() {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
}
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ffe9 	bl	8000c60 <_ZN4XboxD1Ev>
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f006 fbf5 	bl	8007480 <_ZdlPvj>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <_Z14GET_USB_STATUSv>:
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

uint8_t GET_USB_STATUS()
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
	if (hUsbDeviceFS.pClassData == NULL)
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <_Z14GET_USB_STATUSv+0x24>)
 8000ca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <_Z14GET_USB_STATUSv+0x12>
		  {
		    return (uint8_t)USBD_FAIL;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e003      	b.n	8000cba <_Z14GET_USB_STATUSv+0x1a>
		  }

	return hUsbDeviceFS.dev_state;
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <_Z14GET_USB_STATUSv+0x24>)
 8000cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8000cb8:	b2db      	uxtb	r3, r3
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	200004e4 	.word	0x200004e4

08000cc8 <_Z14IS_USB_SUSPENDv>:

bool IS_USB_SUSPEND()
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	return GET_USB_STATUS()==USBD_STATE_SUSPENDED;
 8000ccc:	f7ff ffe8 	bl	8000ca0 <_Z14GET_USB_STATUSv>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf0c      	ite	eq
 8000cd6:	2301      	moveq	r3, #1
 8000cd8:	2300      	movne	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <main>:


Xbox *gamepad;

int main(void)
{
 8000ce0:	b598      	push	{r3, r4, r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce4:	f000 fb8e 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f83e 	bl	8000d68 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cec:	f000 f940 	bl	8000f70 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000cf0:	f000 f8ae 	bl	8000e50 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8000cf4:	f000 f908 	bl	8000f08 <_ZL12MX_I2C1_Initv>
  //MX_USB_DEVICE_Init();
  gamepad=new Xbox();
 8000cf8:	2040      	movs	r0, #64	; 0x40
 8000cfa:	f006 fbc3 	bl	8007484 <_Znwj>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	461c      	mov	r4, r3
 8000d02:	4620      	mov	r0, r4
 8000d04:	f7ff fcca 	bl	800069c <_ZN4XboxC1Ev>
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <main+0x80>)
 8000d0a:	601c      	str	r4, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d12:	4814      	ldr	r0, [pc, #80]	; (8000d64 <main+0x84>)
 8000d14:	f001 f904 	bl	8001f20 <HAL_GPIO_WritePin>

HAL_Delay(2000);
 8000d18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d1c:	f000 fbe4 	bl	80014e8 <HAL_Delay>

HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d26:	480f      	ldr	r0, [pc, #60]	; (8000d64 <main+0x84>)
 8000d28:	f001 f8fa 	bl	8001f20 <HAL_GPIO_WritePin>



//bool but=false;

gamepad->press(BUTTON_A);
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <main+0x80>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2101      	movs	r1, #1
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fcf2 	bl	800071c <_ZN4Xbox5pressEh>
	 // USBD_LL_Transmit(&hUsbDeviceFS,0x81,tx,20);
	  //gamepad->setButton(BUTTON_A,but);

	  //HAL_Delay(2000);

	  while(!IS_USB_SUSPEND())
 8000d38:	f7ff ffc6 	bl	8000cc8 <_Z14IS_USB_SUSPENDv>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f083 0301 	eor.w	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0f7      	beq.n	8000d38 <main+0x58>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_SET);
	  }*/

	 // but=!but;

	  gamepad->send();
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <main+0x80>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fe0c 	bl	800096a <_ZN4Xbox4sendEv>


	  gamepad->receive();
 8000d52:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <main+0x80>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fe16 	bl	8000988 <_ZN4Xbox7receiveEv>
	  while(!IS_USB_SUSPEND())
 8000d5c:	e7ec      	b.n	8000d38 <main+0x58>
 8000d5e:	bf00      	nop
 8000d60:	20000470 	.word	0x20000470
 8000d64:	40020800 	.word	0x40020800

08000d68 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b094      	sub	sp, #80	; 0x50
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0320 	add.w	r3, r7, #32
 8000d72:	2230      	movs	r2, #48	; 0x30
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f006 fbe2 	bl	8007540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <_Z18SystemClock_Configv+0xe0>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	4a2c      	ldr	r2, [pc, #176]	; (8000e48 <_Z18SystemClock_Configv+0xe0>)
 8000d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <_Z18SystemClock_Configv+0xe0>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <_Z18SystemClock_Configv+0xe4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000db4:	4a25      	ldr	r2, [pc, #148]	; (8000e4c <_Z18SystemClock_Configv+0xe4>)
 8000db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <_Z18SystemClock_Configv+0xe4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000ddc:	230f      	movs	r3, #15
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000de0:	2390      	movs	r3, #144	; 0x90
 8000de2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000de8:	2305      	movs	r3, #5
 8000dea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 fb77 	bl	80034e4 <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf14      	ite	ne
 8000dfc:	2301      	movne	r3, #1
 8000dfe:	2300      	moveq	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000e06:	f000 f91f 	bl	8001048 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fdd5 	bl	80039d4 <HAL_RCC_ClockConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf14      	ite	ne
 8000e30:	2301      	movne	r3, #1
 8000e32:	2300      	moveq	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8000e3a:	f000 f905 	bl	8001048 <Error_Handler>
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3750      	adds	r7, #80	; 0x50
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40007000 	.word	0x40007000

08000e50 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e62:	4b26      	ldr	r3, [pc, #152]	; (8000efc <_ZL12MX_ADC1_Initv+0xac>)
 8000e64:	4a26      	ldr	r2, [pc, #152]	; (8000f00 <_ZL12MX_ADC1_Initv+0xb0>)
 8000e66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <_ZL12MX_ADC1_Initv+0xac>)
 8000e6a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <_ZL12MX_ADC1_Initv+0xac>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <_ZL12MX_ADC1_Initv+0xac>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <_ZL12MX_ADC1_Initv+0xac>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <_ZL12MX_ADC1_Initv+0xac>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <_ZL12MX_ADC1_Initv+0xac>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <_ZL12MX_ADC1_Initv+0xac>)
 8000e92:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <_ZL12MX_ADC1_Initv+0xb4>)
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <_ZL12MX_ADC1_Initv+0xac>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <_ZL12MX_ADC1_Initv+0xac>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <_ZL12MX_ADC1_Initv+0xac>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <_ZL12MX_ADC1_Initv+0xac>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb0:	4812      	ldr	r0, [pc, #72]	; (8000efc <_ZL12MX_ADC1_Initv+0xac>)
 8000eb2:	f000 fb3d 	bl	8001530 <HAL_ADC_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	bf14      	ite	ne
 8000ebc:	2301      	movne	r3, #1
 8000ebe:	2300      	moveq	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8000ec6:	f000 f8bf 	bl	8001048 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4808      	ldr	r0, [pc, #32]	; (8000efc <_ZL12MX_ADC1_Initv+0xac>)
 8000edc:	f000 fb6c 	bl	80015b8 <HAL_ADC_ConfigChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	bf14      	ite	ne
 8000ee6:	2301      	movne	r3, #1
 8000ee8:	2300      	moveq	r3, #0
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8000ef0:	f000 f8aa 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200003d4 	.word	0x200003d4
 8000f00:	40012000 	.word	0x40012000
 8000f04:	0f000001 	.word	0x0f000001

08000f08 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <_ZL12MX_I2C1_Initv+0x5c>)
 8000f0e:	4a16      	ldr	r2, [pc, #88]	; (8000f68 <_ZL12MX_I2C1_Initv+0x60>)
 8000f10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <_ZL12MX_I2C1_Initv+0x5c>)
 8000f14:	4a15      	ldr	r2, [pc, #84]	; (8000f6c <_ZL12MX_I2C1_Initv+0x64>)
 8000f16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <_ZL12MX_I2C1_Initv+0x5c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <_ZL12MX_I2C1_Initv+0x5c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <_ZL12MX_I2C1_Initv+0x5c>)
 8000f26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <_ZL12MX_I2C1_Initv+0x5c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <_ZL12MX_I2C1_Initv+0x5c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <_ZL12MX_I2C1_Initv+0x5c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <_ZL12MX_I2C1_Initv+0x5c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f44:	4807      	ldr	r0, [pc, #28]	; (8000f64 <_ZL12MX_I2C1_Initv+0x5c>)
 8000f46:	f001 f805 	bl	8001f54 <HAL_I2C_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bf14      	ite	ne
 8000f50:	2301      	movne	r3, #1
 8000f52:	2300      	moveq	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000f5a:	f000 f875 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000041c 	.word	0x2000041c
 8000f68:	40005400 	.word	0x40005400
 8000f6c:	00061a80 	.word	0x00061a80

08000f70 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <_ZL12MX_GPIO_Initv+0xd0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a2c      	ldr	r2, [pc, #176]	; (8001040 <_ZL12MX_GPIO_Initv+0xd0>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <_ZL12MX_GPIO_Initv+0xd0>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <_ZL12MX_GPIO_Initv+0xd0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a25      	ldr	r2, [pc, #148]	; (8001040 <_ZL12MX_GPIO_Initv+0xd0>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <_ZL12MX_GPIO_Initv+0xd0>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <_ZL12MX_GPIO_Initv+0xd0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a1e      	ldr	r2, [pc, #120]	; (8001040 <_ZL12MX_GPIO_Initv+0xd0>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <_ZL12MX_GPIO_Initv+0xd0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000fe0:	4818      	ldr	r0, [pc, #96]	; (8001044 <_ZL12MX_GPIO_Initv+0xd4>)
 8000fe2:	f000 ff9d 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4812      	ldr	r0, [pc, #72]	; (8001044 <_ZL12MX_GPIO_Initv+0xd4>)
 8000ffa:	f000 fe0d 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ffe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001002:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4619      	mov	r1, r3
 8001016:	480b      	ldr	r0, [pc, #44]	; (8001044 <_ZL12MX_GPIO_Initv+0xd4>)
 8001018:	f000 fdfe 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 800101c:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001020:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001026:	2301      	movs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4619      	mov	r1, r3
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <_ZL12MX_GPIO_Initv+0xd4>)
 8001032:	f000 fdf1 	bl	8001c18 <HAL_GPIO_Init>

}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	e7fe      	b.n	8001050 <Error_Handler+0x8>
	...

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <HAL_MspInit+0x4c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <HAL_MspInit+0x4c>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <HAL_MspInit+0x4c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_MspInit+0x4c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_MspInit+0x4c>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_MspInit+0x4c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a17      	ldr	r2, [pc, #92]	; (8001120 <HAL_ADC_MspInit+0x7c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d127      	bne.n	8001116 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <HAL_ADC_MspInit+0x80>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a15      	ldr	r2, [pc, #84]	; (8001124 <HAL_ADC_MspInit+0x80>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <HAL_ADC_MspInit+0x80>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <HAL_ADC_MspInit+0x80>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <HAL_ADC_MspInit+0x80>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_ADC_MspInit+0x80>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010fe:	2303      	movs	r3, #3
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001102:	2303      	movs	r3, #3
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_ADC_MspInit+0x84>)
 8001112:	f000 fd81 	bl	8001c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40012000 	.word	0x40012000
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000

0800112c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <HAL_I2C_MspInit+0x84>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d12b      	bne.n	80011a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800116a:	23c0      	movs	r3, #192	; 0xc0
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116e:	2312      	movs	r3, #18
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800117a:	2304      	movs	r3, #4
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <HAL_I2C_MspInit+0x8c>)
 8001186:	f000 fd47 	bl	8001c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 8001194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	; 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40005400 	.word	0x40005400
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <NMI_Handler+0x4>

080011c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <HardFault_Handler+0x4>

080011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <MemManage_Handler+0x4>

080011ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <UsageFault_Handler+0x4>

080011da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001208:	f000 f94e 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <OTG_FS_IRQHandler+0x10>)
 8001216:	f001 f931 	bl	800247c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200009b4 	.word	0x200009b4

08001224 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	return 1;
 8001228:	2301      	movs	r3, #1
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <_kill>:

int _kill(int pid, int sig)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800123e:	f006 f945 	bl	80074cc <__errno>
 8001242:	4603      	mov	r3, r0
 8001244:	2216      	movs	r2, #22
 8001246:	601a      	str	r2, [r3, #0]
	return -1;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_exit>:

void _exit (int status)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ffe7 	bl	8001234 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001266:	e7fe      	b.n	8001266 <_exit+0x12>

08001268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <_sbrk+0x5c>)
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <_sbrk+0x60>)
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <_sbrk+0x64>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <_sbrk+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d207      	bcs.n	80012a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001298:	f006 f918 	bl	80074cc <__errno>
 800129c:	4603      	mov	r3, r0
 800129e:	220c      	movs	r2, #12
 80012a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	e009      	b.n	80012bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <_sbrk+0x64>)
 80012b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20010000 	.word	0x20010000
 80012c8:	00000400 	.word	0x00000400
 80012cc:	20000474 	.word	0x20000474
 80012d0:	20000dd0 	.word	0x20000dd0

080012d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <SystemInit+0x20>)
 80012da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <SystemInit+0x20>)
 80012e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <usb_xinput_available>:
}*/

// Function to check if packets are available
// to be received on the RX endpoint
uint16_t usb_xinput_available()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	return USBD_LL_GetRxDataSize(&hUsbDeviceFS,2);
 80012fc:	2102      	movs	r1, #2
 80012fe:	4803      	ldr	r0, [pc, #12]	; (800130c <usb_xinput_available+0x14>)
 8001300:	f006 f867 	bl	80073d2 <USBD_LL_GetRxDataSize>
 8001304:	4603      	mov	r3, r0
 8001306:	b29b      	uxth	r3, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200004e4 	.word	0x200004e4

08001310 <usb_xinput_recv>:


// Function receives packets from the RX endpoint
uint8_t usb_xinput_recv(uint8_t *buffer, uint8_t nbytes)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
	if (hUsbDeviceFS.pClassData == NULL)
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <usb_xinput_recv+0x30>)
 800131e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <usb_xinput_recv+0x1a>
		  {
		    return (uint8_t)USBD_FAIL;
 8001326:	2303      	movs	r3, #3
 8001328:	e006      	b.n	8001338 <usb_xinput_recv+0x28>
		  }

		 USBD_LL_PrepareReceive(&hUsbDeviceFS,CUSTOM_HID_EPOUT_ADDR,buffer,nbytes);
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	2101      	movs	r1, #1
 8001330:	4803      	ldr	r0, [pc, #12]	; (8001340 <usb_xinput_recv+0x30>)
 8001332:	f006 f82d 	bl	8007390 <USBD_LL_PrepareReceive>

	return USBD_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200004e4 	.word	0x200004e4

08001344 <usb_xinput_send>:


// Function used to send packets out of the TX endpoint
// This is used to send button reports
uint8_t usb_xinput_send(uint8_t *buffer, uint8_t nbytes)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	70fb      	strb	r3, [r7, #3]
	//while(USBD_LL_IsStallEP()){}

	if (hUsbDeviceFS.pClassData == NULL)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <usb_xinput_send+0x5c>)
 8001352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <usb_xinput_send+0x1a>
	  {
	    return (uint8_t)USBD_FAIL;
 800135a:	2303      	movs	r3, #3
 800135c:	e01c      	b.n	8001398 <usb_xinput_send+0x54>
	  }

	USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <usb_xinput_send+0x5c>)
 8001360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001364:	60fb      	str	r3, [r7, #12]

	if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <usb_xinput_send+0x5c>)
 8001368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b03      	cmp	r3, #3
 8001370:	d111      	bne.n	8001396 <usb_xinput_send+0x52>
	  {
	    if (hhid->state == CUSTOM_HID_IDLE)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10a      	bne.n	8001392 <usb_xinput_send+0x4e>
	    {
	      hhid->state = CUSTOM_HID_BUSY;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	      USBD_LL_Transmit(&hUsbDeviceFS,CUSTOM_HID_EPIN_ADDR,buffer,nbytes);
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	2181      	movs	r1, #129	; 0x81
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <usb_xinput_send+0x5c>)
 800138c:	f005 ffdf 	bl	800734e <USBD_LL_Transmit>
 8001390:	e001      	b.n	8001396 <usb_xinput_send+0x52>
	    }
	    else
	    {
	      return (uint8_t)USBD_BUSY;
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <usb_xinput_send+0x54>
	    }
	  }


	return USBD_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200004e4 	.word	0x200004e4

080013a4 <usb_xinput_init>:

void usb_xinput_init()
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	MX_USB_DEVICE_Init();
 80013a8:	f005 fc02 	bl	8006bb0 <MX_USB_DEVICE_Init>
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013b6:	490e      	ldr	r1, [pc, #56]	; (80013f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013cc:	4c0b      	ldr	r4, [pc, #44]	; (80013fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013da:	f7ff ff7b 	bl	80012d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013de:	f006 f87b 	bl	80074d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e2:	f7ff fc7d 	bl	8000ce0 <main>
  bx  lr    
 80013e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	200003b8 	.word	0x200003b8
  ldr r2, =_sidata
 80013f4:	0800784c 	.word	0x0800784c
  ldr r2, =_sbss
 80013f8:	200003b8 	.word	0x200003b8
  ldr r4, =_ebss
 80013fc:	20000dcc 	.word	0x20000dcc

08001400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC_IRQHandler>
	...

08001404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <HAL_Init+0x40>)
 800140e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <HAL_Init+0x40>)
 800141a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800141e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a07      	ldr	r2, [pc, #28]	; (8001444 <HAL_Init+0x40>)
 8001426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 fbb1 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001432:	200f      	movs	r0, #15
 8001434:	f000 f808 	bl	8001448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff fe0c 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023c00 	.word	0x40023c00

08001448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_InitTick+0x54>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x58>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fbc9 	bl	8001bfe <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d80a      	bhi.n	8001492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f000 fb91 	bl	8001baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001488:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <HAL_InitTick+0x5c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000004 	.word	0x20000004

080014a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000008 	.word	0x20000008
 80014cc:	200004e0 	.word	0x200004e0

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200004e0 	.word	0x200004e0

080014e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff ffee 	bl	80014d0 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_Delay+0x44>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800150e:	bf00      	nop
 8001510:	f7ff ffde 	bl	80014d0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000008 	.word	0x20000008

08001530 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e033      	b.n	80015ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff fda8 	bl	80010a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	d118      	bne.n	80015a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001576:	f023 0302 	bic.w	r3, r3, #2
 800157a:	f043 0202 	orr.w	r2, r3, #2
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f93a 	bl	80017fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f023 0303 	bic.w	r3, r3, #3
 8001596:	f043 0201 	orr.w	r2, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	; 0x40
 800159e:	e001      	b.n	80015a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1c>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e105      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x228>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	d925      	bls.n	8001630 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68d9      	ldr	r1, [r3, #12]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	3b1e      	subs	r3, #30
 80015fa:	2207      	movs	r2, #7
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43da      	mvns	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	400a      	ands	r2, r1
 8001608:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68d9      	ldr	r1, [r3, #12]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	b29b      	uxth	r3, r3
 800161a:	4618      	mov	r0, r3
 800161c:	4603      	mov	r3, r0
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4403      	add	r3, r0
 8001622:	3b1e      	subs	r3, #30
 8001624:	409a      	lsls	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	e022      	b.n	8001676 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6919      	ldr	r1, [r3, #16]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	2207      	movs	r2, #7
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	400a      	ands	r2, r1
 8001652:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6919      	ldr	r1, [r3, #16]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	4603      	mov	r3, r0
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4403      	add	r3, r0
 800166c:	409a      	lsls	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b06      	cmp	r3, #6
 800167c:	d824      	bhi.n	80016c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	3b05      	subs	r3, #5
 8001690:	221f      	movs	r2, #31
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	400a      	ands	r2, r1
 800169e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	3b05      	subs	r3, #5
 80016ba:	fa00 f203 	lsl.w	r2, r0, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	635a      	str	r2, [r3, #52]	; 0x34
 80016c6:	e04c      	b.n	8001762 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b0c      	cmp	r3, #12
 80016ce:	d824      	bhi.n	800171a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	3b23      	subs	r3, #35	; 0x23
 80016e2:	221f      	movs	r2, #31
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43da      	mvns	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	400a      	ands	r2, r1
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b23      	subs	r3, #35	; 0x23
 800170c:	fa00 f203 	lsl.w	r2, r0, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
 8001718:	e023      	b.n	8001762 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	3b41      	subs	r3, #65	; 0x41
 800172c:	221f      	movs	r2, #31
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	400a      	ands	r2, r1
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	4618      	mov	r0, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b41      	subs	r3, #65	; 0x41
 8001756:	fa00 f203 	lsl.w	r2, r0, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_ADC_ConfigChannel+0x234>)
 8001764:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <HAL_ADC_ConfigChannel+0x238>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d109      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1cc>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b12      	cmp	r3, #18
 8001776:	d105      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_ADC_ConfigChannel+0x238>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d123      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x21e>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b10      	cmp	r3, #16
 8001794:	d003      	beq.n	800179e <HAL_ADC_ConfigChannel+0x1e6>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b11      	cmp	r3, #17
 800179c:	d11b      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b10      	cmp	r3, #16
 80017b0:	d111      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_ADC_ConfigChannel+0x23c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <HAL_ADC_ConfigChannel+0x240>)
 80017b8:	fba2 2303 	umull	r2, r3, r2, r3
 80017bc:	0c9a      	lsrs	r2, r3, #18
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017c8:	e002      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f9      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40012300 	.word	0x40012300
 80017f0:	40012000 	.word	0x40012000
 80017f4:	20000000 	.word	0x20000000
 80017f8:	431bde83 	.word	0x431bde83

080017fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001804:	4b79      	ldr	r3, [pc, #484]	; (80019ec <ADC_Init+0x1f0>)
 8001806:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	431a      	orrs	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001830:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	021a      	lsls	r2, r3, #8
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001854:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6859      	ldr	r1, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001876:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6899      	ldr	r1, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	4a58      	ldr	r2, [pc, #352]	; (80019f0 <ADC_Init+0x1f4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d022      	beq.n	80018da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6899      	ldr	r1, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6899      	ldr	r1, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	e00f      	b.n	80018fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0202 	bic.w	r2, r2, #2
 8001908:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6899      	ldr	r1, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7e1b      	ldrb	r3, [r3, #24]
 8001914:	005a      	lsls	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01b      	beq.n	8001960 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001936:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001946:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6859      	ldr	r1, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	3b01      	subs	r3, #1
 8001954:	035a      	lsls	r2, r3, #13
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	e007      	b.n	8001970 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800196e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	3b01      	subs	r3, #1
 800198c:	051a      	lsls	r2, r3, #20
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6899      	ldr	r1, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019b2:	025a      	lsls	r2, r3, #9
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6899      	ldr	r1, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	029a      	lsls	r2, r3, #10
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	609a      	str	r2, [r3, #8]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	40012300 	.word	0x40012300
 80019f0:	0f000001 	.word	0x0f000001

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <__NVIC_EnableIRQ+0x38>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	; (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	; (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	; 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
         );
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b60:	d301      	bcc.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <SysTick_Config+0x40>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	210f      	movs	r1, #15
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f7ff ff8e 	bl	8001a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <SysTick_Config+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <SysTick_Config+0x40>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010

08001b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff29 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff3e 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff8e 	bl	8001ae8 <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5d 	bl	8001a94 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff31 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffa2 	bl	8001b50 <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e159      	b.n	8001ee8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c34:	2201      	movs	r2, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	f040 8148 	bne.w	8001ee2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d005      	beq.n	8001c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d130      	bne.n	8001ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 0201 	and.w	r2, r3, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d017      	beq.n	8001d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d123      	bne.n	8001d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	08da      	lsrs	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3208      	adds	r2, #8
 8001d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	08da      	lsrs	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3208      	adds	r2, #8
 8001d56:	69b9      	ldr	r1, [r7, #24]
 8001d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0203 	and.w	r2, r3, #3
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80a2 	beq.w	8001ee2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b57      	ldr	r3, [pc, #348]	; (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a56      	ldr	r2, [pc, #344]	; (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b54      	ldr	r3, [pc, #336]	; (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dba:	4a52      	ldr	r2, [pc, #328]	; (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a49      	ldr	r2, [pc, #292]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d019      	beq.n	8001e1a <HAL_GPIO_Init+0x202>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a48      	ldr	r2, [pc, #288]	; (8001f0c <HAL_GPIO_Init+0x2f4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0x1fe>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a47      	ldr	r2, [pc, #284]	; (8001f10 <HAL_GPIO_Init+0x2f8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00d      	beq.n	8001e12 <HAL_GPIO_Init+0x1fa>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a46      	ldr	r2, [pc, #280]	; (8001f14 <HAL_GPIO_Init+0x2fc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <HAL_GPIO_Init+0x1f6>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a45      	ldr	r2, [pc, #276]	; (8001f18 <HAL_GPIO_Init+0x300>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d101      	bne.n	8001e0a <HAL_GPIO_Init+0x1f2>
 8001e06:	2304      	movs	r3, #4
 8001e08:	e008      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e004      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	f002 0203 	and.w	r2, r2, #3
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	4093      	lsls	r3, r2
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e2c:	4935      	ldr	r1, [pc, #212]	; (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e3a:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e5e:	4a2f      	ldr	r2, [pc, #188]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e64:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e88:	4a24      	ldr	r2, [pc, #144]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e8e:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eb2:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001edc:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b0f      	cmp	r3, #15
 8001eec:	f67f aea2 	bls.w	8001c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40013c00 	.word	0x40013c00

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f3c:	e003      	b.n	8001f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	041a      	lsls	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	619a      	str	r2, [r3, #24]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e12b      	b.n	80021be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff f8d6 	bl	800112c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2224      	movs	r2, #36	; 0x24
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fb8:	f001 feb4 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 8001fbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a81      	ldr	r2, [pc, #516]	; (80021c8 <HAL_I2C_Init+0x274>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d807      	bhi.n	8001fd8 <HAL_I2C_Init+0x84>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a80      	ldr	r2, [pc, #512]	; (80021cc <HAL_I2C_Init+0x278>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	bf94      	ite	ls
 8001fd0:	2301      	movls	r3, #1
 8001fd2:	2300      	movhi	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	e006      	b.n	8001fe6 <HAL_I2C_Init+0x92>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4a7d      	ldr	r2, [pc, #500]	; (80021d0 <HAL_I2C_Init+0x27c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	bf94      	ite	ls
 8001fe0:	2301      	movls	r3, #1
 8001fe2:	2300      	movhi	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0e7      	b.n	80021be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4a78      	ldr	r2, [pc, #480]	; (80021d4 <HAL_I2C_Init+0x280>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0c9b      	lsrs	r3, r3, #18
 8001ff8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	430a      	orrs	r2, r1
 800200c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4a6a      	ldr	r2, [pc, #424]	; (80021c8 <HAL_I2C_Init+0x274>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d802      	bhi.n	8002028 <HAL_I2C_Init+0xd4>
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3301      	adds	r3, #1
 8002026:	e009      	b.n	800203c <HAL_I2C_Init+0xe8>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	4a69      	ldr	r2, [pc, #420]	; (80021d8 <HAL_I2C_Init+0x284>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	099b      	lsrs	r3, r3, #6
 800203a:	3301      	adds	r3, #1
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	430b      	orrs	r3, r1
 8002042:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800204e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	495c      	ldr	r1, [pc, #368]	; (80021c8 <HAL_I2C_Init+0x274>)
 8002058:	428b      	cmp	r3, r1
 800205a:	d819      	bhi.n	8002090 <HAL_I2C_Init+0x13c>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1e59      	subs	r1, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fbb1 f3f3 	udiv	r3, r1, r3
 800206a:	1c59      	adds	r1, r3, #1
 800206c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002070:	400b      	ands	r3, r1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_I2C_Init+0x138>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1e59      	subs	r1, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fbb1 f3f3 	udiv	r3, r1, r3
 8002084:	3301      	adds	r3, #1
 8002086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208a:	e051      	b.n	8002130 <HAL_I2C_Init+0x1dc>
 800208c:	2304      	movs	r3, #4
 800208e:	e04f      	b.n	8002130 <HAL_I2C_Init+0x1dc>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d111      	bne.n	80020bc <HAL_I2C_Init+0x168>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1e58      	subs	r0, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	440b      	add	r3, r1
 80020a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020aa:	3301      	adds	r3, #1
 80020ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	e012      	b.n	80020e2 <HAL_I2C_Init+0x18e>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1e58      	subs	r0, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	0099      	lsls	r1, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf0c      	ite	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2300      	movne	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_Init+0x196>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e022      	b.n	8002130 <HAL_I2C_Init+0x1dc>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10e      	bne.n	8002110 <HAL_I2C_Init+0x1bc>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1e58      	subs	r0, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6859      	ldr	r1, [r3, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	440b      	add	r3, r1
 8002100:	fbb0 f3f3 	udiv	r3, r0, r3
 8002104:	3301      	adds	r3, #1
 8002106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800210e:	e00f      	b.n	8002130 <HAL_I2C_Init+0x1dc>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1e58      	subs	r0, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	0099      	lsls	r1, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	fbb0 f3f3 	udiv	r3, r0, r3
 8002126:	3301      	adds	r3, #1
 8002128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	6809      	ldr	r1, [r1, #0]
 8002134:	4313      	orrs	r3, r2
 8002136:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800215e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6911      	ldr	r1, [r2, #16]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68d2      	ldr	r2, [r2, #12]
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	430b      	orrs	r3, r1
 8002172:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2220      	movs	r2, #32
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	000186a0 	.word	0x000186a0
 80021cc:	001e847f 	.word	0x001e847f
 80021d0:	003d08ff 	.word	0x003d08ff
 80021d4:	431bde83 	.word	0x431bde83
 80021d8:	10624dd3 	.word	0x10624dd3

080021dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021de:	b08f      	sub	sp, #60	; 0x3c
 80021e0:	af0a      	add	r7, sp, #40	; 0x28
 80021e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e10f      	b.n	800240e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d106      	bne.n	800220e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f004 fe2f 	bl	8006e6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2203      	movs	r2, #3
 8002212:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f001 fea2 	bl	8003f76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	687e      	ldr	r6, [r7, #4]
 800223a:	466d      	mov	r5, sp
 800223c:	f106 0410 	add.w	r4, r6, #16
 8002240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002248:	e894 0003 	ldmia.w	r4, {r0, r1}
 800224c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002250:	1d33      	adds	r3, r6, #4
 8002252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002254:	6838      	ldr	r0, [r7, #0]
 8002256:	f001 fd79 	bl	8003d4c <USB_CoreInit>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0d0      	b.n	800240e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f001 fe90 	bl	8003f98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	e04a      	b.n	8002314 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	333d      	adds	r3, #61	; 0x3d
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	333c      	adds	r3, #60	; 0x3c
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	b298      	uxth	r0, r3
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3342      	adds	r3, #66	; 0x42
 80022ba:	4602      	mov	r2, r0
 80022bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	1a9b      	subs	r3, r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	333f      	adds	r3, #63	; 0x3f
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	3344      	adds	r3, #68	; 0x44
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3348      	adds	r3, #72	; 0x48
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	3350      	adds	r3, #80	; 0x50
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	3301      	adds	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	429a      	cmp	r2, r3
 800231c:	d3af      	bcc.n	800227e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231e:	2300      	movs	r3, #0
 8002320:	73fb      	strb	r3, [r7, #15]
 8002322:	e044      	b.n	80023ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002392:	7bfa      	ldrb	r2, [r7, #15]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	3301      	adds	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d3b5      	bcc.n	8002324 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	687e      	ldr	r6, [r7, #4]
 80023c0:	466d      	mov	r5, sp
 80023c2:	f106 0410 	add.w	r4, r6, #16
 80023c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80023d6:	1d33      	adds	r3, r6, #4
 80023d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023da:	6838      	ldr	r0, [r7, #0]
 80023dc:	f001 fe28 	bl	8004030 <USB_DevInit>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2202      	movs	r2, #2
 80023ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00d      	b.n	800240e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f002 fea4 	bl	8005154 <USB_DevDisconnect>

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002416 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_PCD_Start+0x1c>
 800242e:	2302      	movs	r3, #2
 8002430:	e020      	b.n	8002474 <HAL_PCD_Start+0x5e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	2b01      	cmp	r3, #1
 8002440:	d109      	bne.n	8002456 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002446:	2b01      	cmp	r3, #1
 8002448:	d005      	beq.n	8002456 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f001 fd7a 	bl	8003f54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f002 fe54 	bl	8005112 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b08d      	sub	sp, #52	; 0x34
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f002 ff12 	bl	80052bc <USB_GetMode>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 839d 	bne.w	8002bda <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 fe76 	bl	8005196 <USB_ReadInterrupts>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 8393 	beq.w	8002bd8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f002 fe6d 	bl	8005196 <USB_ReadInterrupts>
 80024bc:	4603      	mov	r3, r0
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d107      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f002 0202 	and.w	r2, r2, #2
 80024d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f002 fe5b 	bl	8005196 <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d161      	bne.n	80025ae <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699a      	ldr	r2, [r3, #24]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0210 	bic.w	r2, r2, #16
 80024f8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	f003 020f 	and.w	r2, r3, #15
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	3304      	adds	r3, #4
 8002518:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	0c5b      	lsrs	r3, r3, #17
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	2b02      	cmp	r3, #2
 8002524:	d124      	bne.n	8002570 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d035      	beq.n	800259e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800253c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002540:	b29b      	uxth	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	6a38      	ldr	r0, [r7, #32]
 8002546:	f002 fc92 	bl	8004e6e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002556:	441a      	add	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	699a      	ldr	r2, [r3, #24]
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002568:	441a      	add	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	619a      	str	r2, [r3, #24]
 800256e:	e016      	b.n	800259e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	0c5b      	lsrs	r3, r3, #17
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	2b06      	cmp	r3, #6
 800257a:	d110      	bne.n	800259e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002582:	2208      	movs	r2, #8
 8002584:	4619      	mov	r1, r3
 8002586:	6a38      	ldr	r0, [r7, #32]
 8002588:	f002 fc71 	bl	8004e6e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	699a      	ldr	r2, [r3, #24]
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002598:	441a      	add	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699a      	ldr	r2, [r3, #24]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0210 	orr.w	r2, r2, #16
 80025ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f002 fdef 	bl	8005196 <USB_ReadInterrupts>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025c2:	d16e      	bne.n	80026a2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f002 fdf5 	bl	80051bc <USB_ReadDevAllOutEpInterrupt>
 80025d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025d4:	e062      	b.n	800269c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d057      	beq.n	8002690 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 fe1a 	bl	8005224 <USB_ReadDevOutEPInterrupt>
 80025f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00c      	beq.n	8002616 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	4413      	add	r3, r2
 8002604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002608:	461a      	mov	r2, r3
 800260a:	2301      	movs	r3, #1
 800260c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800260e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fdb1 	bl	8003178 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00c      	beq.n	800263a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	4413      	add	r3, r2
 8002628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800262c:	461a      	mov	r2, r3
 800262e:	2308      	movs	r3, #8
 8002630:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 feab 	bl	8003390 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	4413      	add	r3, r2
 800264c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002650:	461a      	mov	r2, r3
 8002652:	2310      	movs	r3, #16
 8002654:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	4413      	add	r3, r2
 8002668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800266c:	461a      	mov	r2, r3
 800266e:	2320      	movs	r3, #32
 8002670:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002688:	461a      	mov	r2, r3
 800268a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800268e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	3301      	adds	r3, #1
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002698:	085b      	lsrs	r3, r3, #1
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800269c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d199      	bne.n	80025d6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f002 fd75 	bl	8005196 <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026b6:	f040 80c0 	bne.w	800283a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f002 fd96 	bl	80051f0 <USB_ReadDevAllInEpInterrupt>
 80026c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026ca:	e0b2      	b.n	8002832 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80a7 	beq.w	8002826 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f002 fdbc 	bl	8005260 <USB_ReadDevInEPInterrupt>
 80026e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d057      	beq.n	80027a4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	2201      	movs	r2, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	43db      	mvns	r3, r3
 800270e:	69f9      	ldr	r1, [r7, #28]
 8002710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002714:	4013      	ands	r3, r2
 8002716:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002724:	461a      	mov	r2, r3
 8002726:	2301      	movs	r3, #1
 8002728:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d132      	bne.n	8002798 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	3348      	adds	r3, #72	; 0x48
 8002742:	6819      	ldr	r1, [r3, #0]
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4403      	add	r3, r0
 8002752:	3344      	adds	r3, #68	; 0x44
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4419      	add	r1, r3
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4403      	add	r3, r0
 8002766:	3348      	adds	r3, #72	; 0x48
 8002768:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	2b00      	cmp	r3, #0
 800276e:	d113      	bne.n	8002798 <HAL_PCD_IRQHandler+0x31c>
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3350      	adds	r3, #80	; 0x50
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d108      	bne.n	8002798 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002790:	461a      	mov	r2, r3
 8002792:	2101      	movs	r1, #1
 8002794:	f002 fdc4 	bl	8005320 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4619      	mov	r1, r3
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f004 fbe5 	bl	8006f6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ba:	461a      	mov	r2, r3
 80027bc:	2308      	movs	r3, #8
 80027be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d6:	461a      	mov	r2, r3
 80027d8:	2310      	movs	r3, #16
 80027da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f2:	461a      	mov	r2, r3
 80027f4:	2340      	movs	r3, #64	; 0x40
 80027f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	4413      	add	r3, r2
 800280a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800280e:	461a      	mov	r2, r3
 8002810:	2302      	movs	r3, #2
 8002812:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800281e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fc1b 	bl	800305c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	3301      	adds	r3, #1
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	085b      	lsrs	r3, r3, #1
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002834:	2b00      	cmp	r3, #0
 8002836:	f47f af49 	bne.w	80026cc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f002 fca9 	bl	8005196 <USB_ReadInterrupts>
 8002844:	4603      	mov	r3, r0
 8002846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800284a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800284e:	d122      	bne.n	8002896 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800286a:	2b01      	cmp	r3, #1
 800286c:	d108      	bne.n	8002880 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002876:	2100      	movs	r1, #0
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fe27 	bl	80034cc <HAL_PCDEx_LPM_Callback>
 800287e:	e002      	b.n	8002886 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f004 fbe1 	bl	8007048 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002894:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f002 fc7b 	bl	8005196 <USB_ReadInterrupts>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028aa:	d112      	bne.n	80028d2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d102      	bne.n	80028c2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f004 fb9d 	bl	8006ffc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028d0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 fc5d 	bl	8005196 <USB_ReadInterrupts>
 80028dc:	4603      	mov	r3, r0
 80028de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e6:	f040 80c7 	bne.w	8002a78 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2110      	movs	r1, #16
 8002904:	4618      	mov	r0, r3
 8002906:	f001 fcf7 	bl	80042f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290a:	2300      	movs	r3, #0
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290e:	e056      	b.n	80029be <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	4413      	add	r3, r2
 8002918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800291c:	461a      	mov	r2, r3
 800291e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002922:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	4413      	add	r3, r2
 800292c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002934:	0151      	lsls	r1, r2, #5
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	440a      	add	r2, r1
 800293a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800293e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002942:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002954:	0151      	lsls	r1, r2, #5
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	440a      	add	r2, r1
 800295a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800295e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002962:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002970:	461a      	mov	r2, r3
 8002972:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002976:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	4413      	add	r3, r2
 8002980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002988:	0151      	lsls	r1, r2, #5
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	440a      	add	r2, r1
 800298e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002996:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a8:	0151      	lsls	r1, r2, #5
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	440a      	add	r2, r1
 80029ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029b6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ba:	3301      	adds	r3, #1
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d3a3      	bcc.n	8002910 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029d6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d016      	beq.n	8002a12 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029f4:	f043 030b 	orr.w	r3, r3, #11
 80029f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a0a:	f043 030b 	orr.w	r3, r3, #11
 8002a0e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a10:	e015      	b.n	8002a3e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a24:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a28:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a38:	f043 030b 	orr.w	r3, r3, #11
 8002a3c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a4c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a50:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a62:	461a      	mov	r2, r3
 8002a64:	f002 fc5c 	bl	8005320 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f002 fb8a 	bl	8005196 <USB_ReadInterrupts>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a8c:	d124      	bne.n	8002ad8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f002 fc20 	bl	80052d8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f001 fc88 	bl	80043b2 <USB_GetDevSpeed>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681c      	ldr	r4, [r3, #0]
 8002aae:	f001 f92d 	bl	8003d0c <HAL_RCC_GetHCLKFreq>
 8002ab2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	4620      	mov	r0, r4
 8002abe:	f001 f9a7 	bl	8003e10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f004 fa7b 	bl	8006fbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f002 fb5a 	bl	8005196 <USB_ReadInterrupts>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d10a      	bne.n	8002b02 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f004 fa58 	bl	8006fa2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f002 0208 	and.w	r2, r2, #8
 8002b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 fb45 	bl	8005196 <USB_ReadInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b16:	d10f      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	4619      	mov	r1, r3
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f004 fab0 	bl	8007088 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f002 fb2a 	bl	8005196 <USB_ReadInterrupts>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b4c:	d10f      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	4619      	mov	r1, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f004 fa83 	bl	8007064 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f002 fb0f 	bl	8005196 <USB_ReadInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b82:	d10a      	bne.n	8002b9a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f004 fa91 	bl	80070ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f002 faf9 	bl	8005196 <USB_ReadInterrupts>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d115      	bne.n	8002bda <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f004 fa81 	bl	80070c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	e000      	b.n	8002bda <HAL_PCD_IRQHandler+0x75e>
      return;
 8002bd8:	bf00      	nop
    }
  }
}
 8002bda:	3734      	adds	r7, #52	; 0x34
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}

08002be0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_PCD_SetAddress+0x1a>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e013      	b.n	8002c22 <HAL_PCD_SetAddress+0x42>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f002 fa57 	bl	80050c6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	4608      	mov	r0, r1
 8002c34:	4611      	mov	r1, r2
 8002c36:	461a      	mov	r2, r3
 8002c38:	4603      	mov	r3, r0
 8002c3a:	70fb      	strb	r3, [r7, #3]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	803b      	strh	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	da0f      	bge.n	8002c70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f003 020f 	and.w	r2, r3, #15
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	3338      	adds	r3, #56	; 0x38
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	4413      	add	r3, r2
 8002c64:	3304      	adds	r3, #4
 8002c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	705a      	strb	r2, [r3, #1]
 8002c6e:	e00f      	b.n	8002c90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	f003 020f 	and.w	r2, r3, #15
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	3304      	adds	r3, #4
 8002c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c9c:	883a      	ldrh	r2, [r7, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	78ba      	ldrb	r2, [r7, #2]
 8002ca6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	785b      	ldrb	r3, [r3, #1]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cba:	78bb      	ldrb	r3, [r7, #2]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d102      	bne.n	8002cc6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_PCD_EP_Open+0xaa>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e00e      	b.n	8002cf2 <HAL_PCD_EP_Open+0xc8>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68f9      	ldr	r1, [r7, #12]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f001 fb8a 	bl	80043fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002cf0:	7afb      	ldrb	r3, [r7, #11]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	460b      	mov	r3, r1
 8002d04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	da0f      	bge.n	8002d2e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	f003 020f 	and.w	r2, r3, #15
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	3338      	adds	r3, #56	; 0x38
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	3304      	adds	r3, #4
 8002d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	705a      	strb	r2, [r3, #1]
 8002d2c:	e00f      	b.n	8002d4e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	f003 020f 	and.w	r2, r3, #15
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	3304      	adds	r3, #4
 8002d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_PCD_EP_Close+0x6e>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e00e      	b.n	8002d86 <HAL_PCD_EP_Close+0x8c>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68f9      	ldr	r1, [r7, #12]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 fbc8 	bl	800450c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b086      	sub	sp, #24
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d9e:	7afb      	ldrb	r3, [r7, #11]
 8002da0:	f003 020f 	and.w	r2, r3, #15
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	3304      	adds	r3, #4
 8002db6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd0:	7afb      	ldrb	r3, [r7, #11]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d102      	bne.n	8002dea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dea:	7afb      	ldrb	r3, [r7, #11]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d109      	bne.n	8002e08 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	6979      	ldr	r1, [r7, #20]
 8002e02:	f001 fea3 	bl	8004b4c <USB_EP0StartXfer>
 8002e06:	e008      	b.n	8002e1a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	6979      	ldr	r1, [r7, #20]
 8002e16:	f001 fc55 	bl	80046c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	460b      	mov	r3, r1
 8002e62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e64:	7afb      	ldrb	r3, [r7, #11]
 8002e66:	f003 020f 	and.w	r2, r3, #15
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	3338      	adds	r3, #56	; 0x38
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	3304      	adds	r3, #4
 8002e7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2201      	movs	r2, #1
 8002e92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e94:	7afb      	ldrb	r3, [r7, #11]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d102      	bne.n	8002eae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eae:	7afb      	ldrb	r3, [r7, #11]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d109      	bne.n	8002ecc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6979      	ldr	r1, [r7, #20]
 8002ec6:	f001 fe41 	bl	8004b4c <USB_EP0StartXfer>
 8002eca:	e008      	b.n	8002ede <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	6979      	ldr	r1, [r7, #20]
 8002eda:	f001 fbf3 	bl	80046c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	f003 020f 	and.w	r2, r3, #15
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d901      	bls.n	8002f06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e050      	b.n	8002fa8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	da0f      	bge.n	8002f2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 020f 	and.w	r2, r3, #15
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	3338      	adds	r3, #56	; 0x38
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	3304      	adds	r3, #4
 8002f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	705a      	strb	r2, [r3, #1]
 8002f2c:	e00d      	b.n	8002f4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	3304      	adds	r3, #4
 8002f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_PCD_EP_SetStall+0x82>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e01e      	b.n	8002fa8 <HAL_PCD_EP_SetStall+0xc0>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68f9      	ldr	r1, [r7, #12]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f001 ffd0 	bl	8004f1e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	b2d9      	uxtb	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f98:	461a      	mov	r2, r3
 8002f9a:	f002 f9c1 	bl	8005320 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 020f 	and.w	r2, r3, #15
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d901      	bls.n	8002fce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e042      	b.n	8003054 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	da0f      	bge.n	8002ff6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	f003 020f 	and.w	r2, r3, #15
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	3338      	adds	r3, #56	; 0x38
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	3304      	adds	r3, #4
 8002fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	705a      	strb	r2, [r3, #1]
 8002ff4:	e00f      	b.n	8003016 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	f003 020f 	and.w	r2, r3, #15
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	3304      	adds	r3, #4
 800300e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	b2da      	uxtb	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_PCD_EP_ClrStall+0x86>
 8003032:	2302      	movs	r3, #2
 8003034:	e00e      	b.n	8003054 <HAL_PCD_EP_ClrStall+0xa4>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68f9      	ldr	r1, [r7, #12]
 8003044:	4618      	mov	r0, r3
 8003046:	f001 ffd8 	bl	8004ffa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af02      	add	r7, sp, #8
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	3338      	adds	r3, #56	; 0x38
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	4413      	add	r3, r2
 8003080:	3304      	adds	r3, #4
 8003082:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	429a      	cmp	r2, r3
 800308e:	d901      	bls.n	8003094 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e06c      	b.n	800316e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d902      	bls.n	80030b0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	3303      	adds	r3, #3
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030b8:	e02b      	b.n	8003112 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d902      	bls.n	80030d6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3303      	adds	r3, #3
 80030da:	089b      	lsrs	r3, r3, #2
 80030dc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68d9      	ldr	r1, [r3, #12]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	4603      	mov	r3, r0
 80030f4:	6978      	ldr	r0, [r7, #20]
 80030f6:	f001 fe7c 	bl	8004df2 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	441a      	add	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	441a      	add	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	b29b      	uxth	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	429a      	cmp	r2, r3
 8003126:	d809      	bhi.n	800313c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	699a      	ldr	r2, [r3, #24]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003130:	429a      	cmp	r2, r3
 8003132:	d203      	bcs.n	800313c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1be      	bne.n	80030ba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	429a      	cmp	r2, r3
 8003146:	d811      	bhi.n	800316c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	2201      	movs	r2, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	43db      	mvns	r3, r3
 8003162:	6939      	ldr	r1, [r7, #16]
 8003164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003168:	4013      	ands	r3, r2
 800316a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	333c      	adds	r3, #60	; 0x3c
 8003190:	3304      	adds	r3, #4
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	f040 80a0 	bne.w	80032f0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d015      	beq.n	80031e6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4a72      	ldr	r2, [pc, #456]	; (8003388 <PCD_EP_OutXfrComplete_int+0x210>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	f240 80dd 	bls.w	800337e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80d7 	beq.w	800337e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031dc:	461a      	mov	r2, r3
 80031de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e2:	6093      	str	r3, [r2, #8]
 80031e4:	e0cb      	b.n	800337e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d009      	beq.n	8003204 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fc:	461a      	mov	r2, r3
 80031fe:	2320      	movs	r3, #32
 8003200:	6093      	str	r3, [r2, #8]
 8003202:	e0bc      	b.n	800337e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 80b7 	bne.w	800337e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a5d      	ldr	r2, [pc, #372]	; (8003388 <PCD_EP_OutXfrComplete_int+0x210>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d90f      	bls.n	8003238 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322e:	461a      	mov	r2, r3
 8003230:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003234:	6093      	str	r3, [r2, #8]
 8003236:	e0a2      	b.n	800337e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800324a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	0159      	lsls	r1, r3, #5
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	440b      	add	r3, r1
 8003254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800325e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4403      	add	r3, r0
 800326e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003272:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003286:	6819      	ldr	r1, [r3, #0]
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4403      	add	r3, r0
 8003296:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4419      	add	r1, r3
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4403      	add	r3, r0
 80032ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032b0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d114      	bne.n	80032e2 <PCD_EP_OutXfrComplete_int+0x16a>
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d108      	bne.n	80032e2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032da:	461a      	mov	r2, r3
 80032dc:	2101      	movs	r1, #1
 80032de:	f002 f81f 	bl	8005320 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	4619      	mov	r1, r3
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f003 fe25 	bl	8006f38 <HAL_PCD_DataOutStageCallback>
 80032ee:	e046      	b.n	800337e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4a26      	ldr	r2, [pc, #152]	; (800338c <PCD_EP_OutXfrComplete_int+0x214>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d124      	bne.n	8003342 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330e:	461a      	mov	r2, r3
 8003310:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003314:	6093      	str	r3, [r2, #8]
 8003316:	e032      	b.n	800337e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332e:	461a      	mov	r2, r3
 8003330:	2320      	movs	r3, #32
 8003332:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	4619      	mov	r1, r3
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f003 fdfc 	bl	8006f38 <HAL_PCD_DataOutStageCallback>
 8003340:	e01d      	b.n	800337e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d114      	bne.n	8003372 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d108      	bne.n	8003372 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800336a:	461a      	mov	r2, r3
 800336c:	2100      	movs	r1, #0
 800336e:	f001 ffd7 	bl	8005320 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	4619      	mov	r1, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f003 fddd 	bl	8006f38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	4f54300a 	.word	0x4f54300a
 800338c:	4f54310a 	.word	0x4f54310a

08003390 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	333c      	adds	r3, #60	; 0x3c
 80033a8:	3304      	adds	r3, #4
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4a15      	ldr	r2, [pc, #84]	; (8003418 <PCD_EP_OutSetupPacket_int+0x88>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d90e      	bls.n	80033e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d009      	beq.n	80033e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033dc:	461a      	mov	r2, r3
 80033de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f003 fd95 	bl	8006f14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <PCD_EP_OutSetupPacket_int+0x88>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d90c      	bls.n	800340c <PCD_EP_OutSetupPacket_int+0x7c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d108      	bne.n	800340c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003404:	461a      	mov	r2, r3
 8003406:	2101      	movs	r1, #1
 8003408:	f001 ff8a 	bl	8005320 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	4f54300a 	.word	0x4f54300a

0800341c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	70fb      	strb	r3, [r7, #3]
 8003428:	4613      	mov	r3, r2
 800342a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d107      	bne.n	800344a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800343a:	883b      	ldrh	r3, [r7, #0]
 800343c:	0419      	lsls	r1, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	430a      	orrs	r2, r1
 8003446:	629a      	str	r2, [r3, #40]	; 0x28
 8003448:	e028      	b.n	800349c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	4413      	add	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	e00d      	b.n	800347a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	3340      	adds	r3, #64	; 0x40
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	0c1b      	lsrs	r3, r3, #16
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4413      	add	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	3301      	adds	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	3b01      	subs	r3, #1
 8003480:	429a      	cmp	r2, r3
 8003482:	d3ec      	bcc.n	800345e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003484:	883b      	ldrh	r3, [r7, #0]
 8003486:	0418      	lsls	r0, r3, #16
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6819      	ldr	r1, [r3, #0]
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	3b01      	subs	r3, #1
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	4302      	orrs	r2, r0
 8003494:	3340      	adds	r3, #64	; 0x40
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	887a      	ldrh	r2, [r7, #2]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e264      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d075      	beq.n	80035ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003502:	4ba3      	ldr	r3, [pc, #652]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b04      	cmp	r3, #4
 800350c:	d00c      	beq.n	8003528 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350e:	4ba0      	ldr	r3, [pc, #640]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003516:	2b08      	cmp	r3, #8
 8003518:	d112      	bne.n	8003540 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351a:	4b9d      	ldr	r3, [pc, #628]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003526:	d10b      	bne.n	8003540 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	4b99      	ldr	r3, [pc, #612]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d05b      	beq.n	80035ec <HAL_RCC_OscConfig+0x108>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d157      	bne.n	80035ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e23f      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003548:	d106      	bne.n	8003558 <HAL_RCC_OscConfig+0x74>
 800354a:	4b91      	ldr	r3, [pc, #580]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a90      	ldr	r2, [pc, #576]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e01d      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x98>
 8003562:	4b8b      	ldr	r3, [pc, #556]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a8a      	ldr	r2, [pc, #552]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b88      	ldr	r3, [pc, #544]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a87      	ldr	r2, [pc, #540]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 800357c:	4b84      	ldr	r3, [pc, #528]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a83      	ldr	r2, [pc, #524]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b81      	ldr	r3, [pc, #516]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a80      	ldr	r2, [pc, #512]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fd ff98 	bl	80014d0 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fd ff94 	bl	80014d0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e204      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b76      	ldr	r3, [pc, #472]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0xc0>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fd ff84 	bl	80014d0 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fd ff80 	bl	80014d0 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e1f0      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	4b6c      	ldr	r3, [pc, #432]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0xe8>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d063      	beq.n	80036c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035fa:	4b65      	ldr	r3, [pc, #404]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003606:	4b62      	ldr	r3, [pc, #392]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800360e:	2b08      	cmp	r3, #8
 8003610:	d11c      	bne.n	800364c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003612:	4b5f      	ldr	r3, [pc, #380]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d116      	bne.n	800364c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	4b5c      	ldr	r3, [pc, #368]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_RCC_OscConfig+0x152>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e1c4      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b56      	ldr	r3, [pc, #344]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4952      	ldr	r1, [pc, #328]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	e03a      	b.n	80036c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003654:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <HAL_RCC_OscConfig+0x2b0>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7fd ff39 	bl	80014d0 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003662:	f7fd ff35 	bl	80014d0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e1a5      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	4b46      	ldr	r3, [pc, #280]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003680:	4b43      	ldr	r3, [pc, #268]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4940      	ldr	r1, [pc, #256]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]
 8003694:	e015      	b.n	80036c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003696:	4b3f      	ldr	r3, [pc, #252]	; (8003794 <HAL_RCC_OscConfig+0x2b0>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fd ff18 	bl	80014d0 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a4:	f7fd ff14 	bl	80014d0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e184      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	4b36      	ldr	r3, [pc, #216]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d030      	beq.n	8003730 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d6:	4b30      	ldr	r3, [pc, #192]	; (8003798 <HAL_RCC_OscConfig+0x2b4>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036dc:	f7fd fef8 	bl	80014d0 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e4:	f7fd fef4 	bl	80014d0 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e164      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f6:	4b26      	ldr	r3, [pc, #152]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x200>
 8003702:	e015      	b.n	8003730 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003704:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_OscConfig+0x2b4>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370a:	f7fd fee1 	bl	80014d0 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003712:	f7fd fedd 	bl	80014d0 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e14d      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f0      	bne.n	8003712 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a0 	beq.w	800387e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003742:	4b13      	ldr	r3, [pc, #76]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10f      	bne.n	800376e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4a0e      	ldr	r2, [pc, #56]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	6413      	str	r3, [r2, #64]	; 0x40
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_OscConfig+0x2b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d121      	bne.n	80037be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377a:	4b08      	ldr	r3, [pc, #32]	; (800379c <HAL_RCC_OscConfig+0x2b8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a07      	ldr	r2, [pc, #28]	; (800379c <HAL_RCC_OscConfig+0x2b8>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003786:	f7fd fea3 	bl	80014d0 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378c:	e011      	b.n	80037b2 <HAL_RCC_OscConfig+0x2ce>
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	42470000 	.word	0x42470000
 8003798:	42470e80 	.word	0x42470e80
 800379c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a0:	f7fd fe96 	bl	80014d0 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e106      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b85      	ldr	r3, [pc, #532]	; (80039c8 <HAL_RCC_OscConfig+0x4e4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d106      	bne.n	80037d4 <HAL_RCC_OscConfig+0x2f0>
 80037c6:	4b81      	ldr	r3, [pc, #516]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	4a80      	ldr	r2, [pc, #512]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6713      	str	r3, [r2, #112]	; 0x70
 80037d2:	e01c      	b.n	800380e <HAL_RCC_OscConfig+0x32a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d10c      	bne.n	80037f6 <HAL_RCC_OscConfig+0x312>
 80037dc:	4b7b      	ldr	r3, [pc, #492]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	4a7a      	ldr	r2, [pc, #488]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	6713      	str	r3, [r2, #112]	; 0x70
 80037e8:	4b78      	ldr	r3, [pc, #480]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a77      	ldr	r2, [pc, #476]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
 80037f4:	e00b      	b.n	800380e <HAL_RCC_OscConfig+0x32a>
 80037f6:	4b75      	ldr	r3, [pc, #468]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	4a74      	ldr	r2, [pc, #464]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	6713      	str	r3, [r2, #112]	; 0x70
 8003802:	4b72      	ldr	r3, [pc, #456]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	4a71      	ldr	r2, [pc, #452]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003808:	f023 0304 	bic.w	r3, r3, #4
 800380c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d015      	beq.n	8003842 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003816:	f7fd fe5b 	bl	80014d0 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381c:	e00a      	b.n	8003834 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fd fe57 	bl	80014d0 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	; 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e0c5      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003834:	4b65      	ldr	r3, [pc, #404]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ee      	beq.n	800381e <HAL_RCC_OscConfig+0x33a>
 8003840:	e014      	b.n	800386c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003842:	f7fd fe45 	bl	80014d0 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003848:	e00a      	b.n	8003860 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800384a:	f7fd fe41 	bl	80014d0 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	f241 3288 	movw	r2, #5000	; 0x1388
 8003858:	4293      	cmp	r3, r2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e0af      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003860:	4b5a      	ldr	r3, [pc, #360]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1ee      	bne.n	800384a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d105      	bne.n	800387e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003872:	4b56      	ldr	r3, [pc, #344]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4a55      	ldr	r2, [pc, #340]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 809b 	beq.w	80039be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003888:	4b50      	ldr	r3, [pc, #320]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b08      	cmp	r3, #8
 8003892:	d05c      	beq.n	800394e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d141      	bne.n	8003920 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389c:	4b4c      	ldr	r3, [pc, #304]	; (80039d0 <HAL_RCC_OscConfig+0x4ec>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a2:	f7fd fe15 	bl	80014d0 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038aa:	f7fd fe11 	bl	80014d0 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e081      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038bc:	4b43      	ldr	r3, [pc, #268]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	019b      	lsls	r3, r3, #6
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	085b      	lsrs	r3, r3, #1
 80038e0:	3b01      	subs	r3, #1
 80038e2:	041b      	lsls	r3, r3, #16
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ea:	061b      	lsls	r3, r3, #24
 80038ec:	4937      	ldr	r1, [pc, #220]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f2:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <HAL_RCC_OscConfig+0x4ec>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fd fdea 	bl	80014d0 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003900:	f7fd fde6 	bl	80014d0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e056      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x41c>
 800391e:	e04e      	b.n	80039be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003920:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_RCC_OscConfig+0x4ec>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fd fdd3 	bl	80014d0 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392e:	f7fd fdcf 	bl	80014d0 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e03f      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003940:	4b22      	ldr	r3, [pc, #136]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x44a>
 800394c:	e037      	b.n	80039be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e032      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800395a:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d028      	beq.n	80039ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d121      	bne.n	80039ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d11a      	bne.n	80039ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800398a:	4013      	ands	r3, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003990:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003992:	4293      	cmp	r3, r2
 8003994:	d111      	bne.n	80039ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	3b01      	subs	r3, #1
 80039a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d001      	beq.n	80039be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40007000 	.word	0x40007000
 80039cc:	40023800 	.word	0x40023800
 80039d0:	42470060 	.word	0x42470060

080039d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0cc      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e8:	4b68      	ldr	r3, [pc, #416]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d90c      	bls.n	8003a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b65      	ldr	r3, [pc, #404]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b63      	ldr	r3, [pc, #396]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0b8      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d020      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a28:	4b59      	ldr	r3, [pc, #356]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a58      	ldr	r2, [pc, #352]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a40:	4b53      	ldr	r3, [pc, #332]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a52      	ldr	r2, [pc, #328]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4c:	4b50      	ldr	r3, [pc, #320]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	494d      	ldr	r1, [pc, #308]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d044      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d119      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e07f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d003      	beq.n	8003a92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a92:	4b3f      	ldr	r3, [pc, #252]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e06f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e067      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab2:	4b37      	ldr	r3, [pc, #220]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4934      	ldr	r1, [pc, #208]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac4:	f7fd fd04 	bl	80014d0 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003acc:	f7fd fd00 	bl	80014d0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e04f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 020c 	and.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1eb      	bne.n	8003acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af4:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d20c      	bcs.n	8003b1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e032      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4916      	ldr	r1, [pc, #88]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	490e      	ldr	r1, [pc, #56]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b5a:	f000 f821 	bl	8003ba0 <HAL_RCC_GetSysClockFreq>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	490a      	ldr	r1, [pc, #40]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	5ccb      	ldrb	r3, [r1, r3]
 8003b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b72:	4a09      	ldr	r2, [pc, #36]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd fc64 	bl	8001448 <HAL_InitTick>

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023c00 	.word	0x40023c00
 8003b90:	40023800 	.word	0x40023800
 8003b94:	08007824 	.word	0x08007824
 8003b98:	20000000 	.word	0x20000000
 8003b9c:	20000004 	.word	0x20000004

08003ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba0:	b5b0      	push	{r4, r5, r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	6079      	str	r1, [r7, #4]
 8003baa:	2100      	movs	r1, #0
 8003bac:	60f9      	str	r1, [r7, #12]
 8003bae:	2100      	movs	r1, #0
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb6:	4952      	ldr	r1, [pc, #328]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bb8:	6889      	ldr	r1, [r1, #8]
 8003bba:	f001 010c 	and.w	r1, r1, #12
 8003bbe:	2908      	cmp	r1, #8
 8003bc0:	d00d      	beq.n	8003bde <HAL_RCC_GetSysClockFreq+0x3e>
 8003bc2:	2908      	cmp	r1, #8
 8003bc4:	f200 8094 	bhi.w	8003cf0 <HAL_RCC_GetSysClockFreq+0x150>
 8003bc8:	2900      	cmp	r1, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x32>
 8003bcc:	2904      	cmp	r1, #4
 8003bce:	d003      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x38>
 8003bd0:	e08e      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd2:	4b4c      	ldr	r3, [pc, #304]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x164>)
 8003bd4:	60bb      	str	r3, [r7, #8]
       break;
 8003bd6:	e08e      	b.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd8:	4b4b      	ldr	r3, [pc, #300]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x168>)
 8003bda:	60bb      	str	r3, [r7, #8]
      break;
 8003bdc:	e08b      	b.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bde:	4948      	ldr	r1, [pc, #288]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x160>)
 8003be0:	6849      	ldr	r1, [r1, #4]
 8003be2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003be6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003be8:	4945      	ldr	r1, [pc, #276]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bea:	6849      	ldr	r1, [r1, #4]
 8003bec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003bf0:	2900      	cmp	r1, #0
 8003bf2:	d024      	beq.n	8003c3e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf4:	4942      	ldr	r1, [pc, #264]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bf6:	6849      	ldr	r1, [r1, #4]
 8003bf8:	0989      	lsrs	r1, r1, #6
 8003bfa:	4608      	mov	r0, r1
 8003bfc:	f04f 0100 	mov.w	r1, #0
 8003c00:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003c04:	f04f 0500 	mov.w	r5, #0
 8003c08:	ea00 0204 	and.w	r2, r0, r4
 8003c0c:	ea01 0305 	and.w	r3, r1, r5
 8003c10:	493d      	ldr	r1, [pc, #244]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c12:	fb01 f003 	mul.w	r0, r1, r3
 8003c16:	2100      	movs	r1, #0
 8003c18:	fb01 f102 	mul.w	r1, r1, r2
 8003c1c:	1844      	adds	r4, r0, r1
 8003c1e:	493a      	ldr	r1, [pc, #232]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c20:	fba2 0101 	umull	r0, r1, r2, r1
 8003c24:	1863      	adds	r3, r4, r1
 8003c26:	4619      	mov	r1, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	f7fc fad0 	bl	80001d4 <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4613      	mov	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	e04a      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3e:	4b30      	ldr	r3, [pc, #192]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	099b      	lsrs	r3, r3, #6
 8003c44:	461a      	mov	r2, r3
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c4e:	f04f 0100 	mov.w	r1, #0
 8003c52:	ea02 0400 	and.w	r4, r2, r0
 8003c56:	ea03 0501 	and.w	r5, r3, r1
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	014b      	lsls	r3, r1, #5
 8003c68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c6c:	0142      	lsls	r2, r0, #5
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	1b00      	subs	r0, r0, r4
 8003c74:	eb61 0105 	sbc.w	r1, r1, r5
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	018b      	lsls	r3, r1, #6
 8003c82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c86:	0182      	lsls	r2, r0, #6
 8003c88:	1a12      	subs	r2, r2, r0
 8003c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c8e:	f04f 0000 	mov.w	r0, #0
 8003c92:	f04f 0100 	mov.w	r1, #0
 8003c96:	00d9      	lsls	r1, r3, #3
 8003c98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c9c:	00d0      	lsls	r0, r2, #3
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	1912      	adds	r2, r2, r4
 8003ca4:	eb45 0303 	adc.w	r3, r5, r3
 8003ca8:	f04f 0000 	mov.w	r0, #0
 8003cac:	f04f 0100 	mov.w	r1, #0
 8003cb0:	0299      	lsls	r1, r3, #10
 8003cb2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cb6:	0290      	lsls	r0, r2, #10
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	f7fc fa84 	bl	80001d4 <__aeabi_uldivmod>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x160>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	3301      	adds	r3, #1
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cec:	60bb      	str	r3, [r7, #8]
      break;
 8003cee:	e002      	b.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x164>)
 8003cf2:	60bb      	str	r3, [r7, #8]
      break;
 8003cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8003d00:	40023800 	.word	0x40023800
 8003d04:	00f42400 	.word	0x00f42400
 8003d08:	017d7840 	.word	0x017d7840

08003d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d10:	4b03      	ldr	r3, [pc, #12]	; (8003d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d12:	681b      	ldr	r3, [r3, #0]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000000 	.word	0x20000000

08003d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d28:	f7ff fff0 	bl	8003d0c <HAL_RCC_GetHCLKFreq>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	0a9b      	lsrs	r3, r3, #10
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	4903      	ldr	r1, [pc, #12]	; (8003d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d3a:	5ccb      	ldrb	r3, [r1, r3]
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40023800 	.word	0x40023800
 8003d48:	08007834 	.word	0x08007834

08003d4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	f107 001c 	add.w	r0, r7, #28
 8003d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d122      	bne.n	8003daa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f001 fb1c 	bl	80053dc <USB_CoreReset>
 8003da4:	4603      	mov	r3, r0
 8003da6:	73fb      	strb	r3, [r7, #15]
 8003da8:	e01a      	b.n	8003de0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f001 fb10 	bl	80053dc <USB_CoreReset>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	639a      	str	r2, [r3, #56]	; 0x38
 8003dd2:	e005      	b.n	8003de0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d10b      	bne.n	8003dfe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f043 0206 	orr.w	r2, r3, #6
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f043 0220 	orr.w	r2, r3, #32
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e0a:	b004      	add	sp, #16
 8003e0c:	4770      	bx	lr
	...

08003e10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d165      	bne.n	8003ef0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4a41      	ldr	r2, [pc, #260]	; (8003f2c <USB_SetTurnaroundTime+0x11c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d906      	bls.n	8003e3a <USB_SetTurnaroundTime+0x2a>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4a40      	ldr	r2, [pc, #256]	; (8003f30 <USB_SetTurnaroundTime+0x120>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d202      	bcs.n	8003e3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e34:	230f      	movs	r3, #15
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e062      	b.n	8003f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4a3c      	ldr	r2, [pc, #240]	; (8003f30 <USB_SetTurnaroundTime+0x120>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d306      	bcc.n	8003e50 <USB_SetTurnaroundTime+0x40>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4a3b      	ldr	r2, [pc, #236]	; (8003f34 <USB_SetTurnaroundTime+0x124>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d202      	bcs.n	8003e50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003e4a:	230e      	movs	r3, #14
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e057      	b.n	8003f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4a38      	ldr	r2, [pc, #224]	; (8003f34 <USB_SetTurnaroundTime+0x124>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d306      	bcc.n	8003e66 <USB_SetTurnaroundTime+0x56>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4a37      	ldr	r2, [pc, #220]	; (8003f38 <USB_SetTurnaroundTime+0x128>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d202      	bcs.n	8003e66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e60:	230d      	movs	r3, #13
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	e04c      	b.n	8003f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4a33      	ldr	r2, [pc, #204]	; (8003f38 <USB_SetTurnaroundTime+0x128>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d306      	bcc.n	8003e7c <USB_SetTurnaroundTime+0x6c>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	4a32      	ldr	r2, [pc, #200]	; (8003f3c <USB_SetTurnaroundTime+0x12c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d802      	bhi.n	8003e7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e76:	230c      	movs	r3, #12
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	e041      	b.n	8003f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4a2f      	ldr	r2, [pc, #188]	; (8003f3c <USB_SetTurnaroundTime+0x12c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d906      	bls.n	8003e92 <USB_SetTurnaroundTime+0x82>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4a2e      	ldr	r2, [pc, #184]	; (8003f40 <USB_SetTurnaroundTime+0x130>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d802      	bhi.n	8003e92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e8c:	230b      	movs	r3, #11
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	e036      	b.n	8003f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4a2a      	ldr	r2, [pc, #168]	; (8003f40 <USB_SetTurnaroundTime+0x130>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d906      	bls.n	8003ea8 <USB_SetTurnaroundTime+0x98>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4a29      	ldr	r2, [pc, #164]	; (8003f44 <USB_SetTurnaroundTime+0x134>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d802      	bhi.n	8003ea8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003ea2:	230a      	movs	r3, #10
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e02b      	b.n	8003f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4a26      	ldr	r2, [pc, #152]	; (8003f44 <USB_SetTurnaroundTime+0x134>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d906      	bls.n	8003ebe <USB_SetTurnaroundTime+0xae>
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4a25      	ldr	r2, [pc, #148]	; (8003f48 <USB_SetTurnaroundTime+0x138>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d202      	bcs.n	8003ebe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003eb8:	2309      	movs	r3, #9
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	e020      	b.n	8003f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4a21      	ldr	r2, [pc, #132]	; (8003f48 <USB_SetTurnaroundTime+0x138>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d306      	bcc.n	8003ed4 <USB_SetTurnaroundTime+0xc4>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4a20      	ldr	r2, [pc, #128]	; (8003f4c <USB_SetTurnaroundTime+0x13c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d802      	bhi.n	8003ed4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003ece:	2308      	movs	r3, #8
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e015      	b.n	8003f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4a1d      	ldr	r2, [pc, #116]	; (8003f4c <USB_SetTurnaroundTime+0x13c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d906      	bls.n	8003eea <USB_SetTurnaroundTime+0xda>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4a1c      	ldr	r2, [pc, #112]	; (8003f50 <USB_SetTurnaroundTime+0x140>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d202      	bcs.n	8003eea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003ee4:	2307      	movs	r3, #7
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	e00a      	b.n	8003f00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003eea:	2306      	movs	r3, #6
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	e007      	b.n	8003f00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d102      	bne.n	8003efc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003ef6:	2309      	movs	r3, #9
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e001      	b.n	8003f00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003efc:	2309      	movs	r3, #9
 8003efe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	029b      	lsls	r3, r3, #10
 8003f14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	00d8acbf 	.word	0x00d8acbf
 8003f30:	00e4e1c0 	.word	0x00e4e1c0
 8003f34:	00f42400 	.word	0x00f42400
 8003f38:	01067380 	.word	0x01067380
 8003f3c:	011a499f 	.word	0x011a499f
 8003f40:	01312cff 	.word	0x01312cff
 8003f44:	014ca43f 	.word	0x014ca43f
 8003f48:	016e3600 	.word	0x016e3600
 8003f4c:	01a6ab1f 	.word	0x01a6ab1f
 8003f50:	01e84800 	.word	0x01e84800

08003f54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f043 0201 	orr.w	r2, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f023 0201 	bic.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d115      	bne.n	8003fe6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	f7fd fa8e 	bl	80014e8 <HAL_Delay>
      ms++;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f001 f972 	bl	80052bc <USB_GetMode>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d01e      	beq.n	800401c <USB_SetCurrentMode+0x84>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b31      	cmp	r3, #49	; 0x31
 8003fe2:	d9f0      	bls.n	8003fc6 <USB_SetCurrentMode+0x2e>
 8003fe4:	e01a      	b.n	800401c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d115      	bne.n	8004018 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	f7fd fa75 	bl	80014e8 <HAL_Delay>
      ms++;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3301      	adds	r3, #1
 8004002:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f001 f959 	bl	80052bc <USB_GetMode>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <USB_SetCurrentMode+0x84>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b31      	cmp	r3, #49	; 0x31
 8004014:	d9f0      	bls.n	8003ff8 <USB_SetCurrentMode+0x60>
 8004016:	e001      	b.n	800401c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e005      	b.n	8004028 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b32      	cmp	r3, #50	; 0x32
 8004020:	d101      	bne.n	8004026 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004030:	b084      	sub	sp, #16
 8004032:	b580      	push	{r7, lr}
 8004034:	b086      	sub	sp, #24
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800403e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	e009      	b.n	8004064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	3340      	adds	r3, #64	; 0x40
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	2200      	movs	r2, #0
 800405c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	3301      	adds	r3, #1
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	2b0e      	cmp	r3, #14
 8004068:	d9f2      	bls.n	8004050 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800406a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d11c      	bne.n	80040aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800407e:	f043 0302 	orr.w	r3, r3, #2
 8004082:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	639a      	str	r2, [r3, #56]	; 0x38
 80040a8:	e00b      	b.n	80040c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040c8:	461a      	mov	r2, r3
 80040ca:	2300      	movs	r3, #0
 80040cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d4:	4619      	mov	r1, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040dc:	461a      	mov	r2, r3
 80040de:	680b      	ldr	r3, [r1, #0]
 80040e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d10c      	bne.n	8004102 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d104      	bne.n	80040f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040ee:	2100      	movs	r1, #0
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f945 	bl	8004380 <USB_SetDevSpeed>
 80040f6:	e008      	b.n	800410a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040f8:	2101      	movs	r1, #1
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f940 	bl	8004380 <USB_SetDevSpeed>
 8004100:	e003      	b.n	800410a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004102:	2103      	movs	r1, #3
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f93b 	bl	8004380 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800410a:	2110      	movs	r1, #16
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f8f3 	bl	80042f8 <USB_FlushTxFifo>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f90f 	bl	8004340 <USB_FlushRxFifo>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004132:	461a      	mov	r2, r3
 8004134:	2300      	movs	r3, #0
 8004136:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413e:	461a      	mov	r2, r3
 8004140:	2300      	movs	r3, #0
 8004142:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414a:	461a      	mov	r2, r3
 800414c:	2300      	movs	r3, #0
 800414e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004150:	2300      	movs	r3, #0
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	e043      	b.n	80041de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800416c:	d118      	bne.n	80041a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004180:	461a      	mov	r2, r3
 8004182:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	e013      	b.n	80041b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	461a      	mov	r2, r3
 8004198:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e008      	b.n	80041b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ac:	461a      	mov	r2, r3
 80041ae:	2300      	movs	r3, #0
 80041b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041be:	461a      	mov	r2, r3
 80041c0:	2300      	movs	r3, #0
 80041c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d0:	461a      	mov	r2, r3
 80041d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	3301      	adds	r3, #1
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d3b7      	bcc.n	8004156 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	e043      	b.n	8004274 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004202:	d118      	bne.n	8004236 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004216:	461a      	mov	r2, r3
 8004218:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e013      	b.n	8004248 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422c:	461a      	mov	r2, r3
 800422e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	e008      	b.n	8004248 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	461a      	mov	r2, r3
 8004244:	2300      	movs	r3, #0
 8004246:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004254:	461a      	mov	r2, r3
 8004256:	2300      	movs	r3, #0
 8004258:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004266:	461a      	mov	r2, r3
 8004268:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800426c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	3301      	adds	r3, #1
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	429a      	cmp	r2, r3
 800427a:	d3b7      	bcc.n	80041ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800428a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800428e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800429c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d105      	bne.n	80042b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f043 0210 	orr.w	r2, r3, #16
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699a      	ldr	r2, [r3, #24]
 80042b4:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <USB_DevInit+0x2c4>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	f043 0208 	orr.w	r2, r3, #8
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d107      	bne.n	80042e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042dc:	f043 0304 	orr.w	r3, r3, #4
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042f0:	b004      	add	sp, #16
 80042f2:	4770      	bx	lr
 80042f4:	803c3800 	.word	0x803c3800

080042f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	019b      	lsls	r3, r3, #6
 800430a:	f043 0220 	orr.w	r2, r3, #32
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3301      	adds	r3, #1
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	4a08      	ldr	r2, [pc, #32]	; (800433c <USB_FlushTxFifo+0x44>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e006      	b.n	8004330 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b20      	cmp	r3, #32
 800432c:	d0f1      	beq.n	8004312 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	00030d40 	.word	0x00030d40

08004340 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2210      	movs	r2, #16
 8004350:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3301      	adds	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	4a08      	ldr	r2, [pc, #32]	; (800437c <USB_FlushRxFifo+0x3c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e006      	b.n	8004370 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b10      	cmp	r3, #16
 800436c:	d0f1      	beq.n	8004352 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	00030d40 	.word	0x00030d40

08004380 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	68f9      	ldr	r1, [r7, #12]
 800439c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043a0:	4313      	orrs	r3, r2
 80043a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b087      	sub	sp, #28
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 0306 	and.w	r3, r3, #6
 80043ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]
 80043d6:	e00a      	b.n	80043ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d002      	beq.n	80043e4 <USB_GetDevSpeed+0x32>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b06      	cmp	r3, #6
 80043e2:	d102      	bne.n	80043ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80043e4:	2302      	movs	r3, #2
 80043e6:	75fb      	strb	r3, [r7, #23]
 80043e8:	e001      	b.n	80043ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80043ea:	230f      	movs	r3, #15
 80043ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80043ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	785b      	ldrb	r3, [r3, #1]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d13a      	bne.n	800448e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	2101      	movs	r1, #1
 800442a:	fa01 f303 	lsl.w	r3, r1, r3
 800442e:	b29b      	uxth	r3, r3
 8004430:	68f9      	ldr	r1, [r7, #12]
 8004432:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004436:	4313      	orrs	r3, r2
 8004438:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d155      	bne.n	80044fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	78db      	ldrb	r3, [r3, #3]
 800446a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800446c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	059b      	lsls	r3, r3, #22
 8004472:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004474:	4313      	orrs	r3, r2
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	0151      	lsls	r1, r2, #5
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	440a      	add	r2, r1
 800447e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	e036      	b.n	80044fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004494:	69da      	ldr	r2, [r3, #28]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	2101      	movs	r1, #1
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	041b      	lsls	r3, r3, #16
 80044a6:	68f9      	ldr	r1, [r7, #12]
 80044a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d11a      	bne.n	80044fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	78db      	ldrb	r3, [r3, #3]
 80044e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044e2:	430b      	orrs	r3, r1
 80044e4:	4313      	orrs	r3, r2
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	0151      	lsls	r1, r2, #5
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	440a      	add	r2, r1
 80044ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d161      	bne.n	80045ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800453a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800453e:	d11f      	bne.n	8004580 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	0151      	lsls	r1, r2, #5
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	440a      	add	r2, r1
 8004556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800455a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800455e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	0151      	lsls	r1, r2, #5
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	440a      	add	r2, r1
 8004576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800457a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800457e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	2101      	movs	r1, #1
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	b29b      	uxth	r3, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a0:	4013      	ands	r3, r2
 80045a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	2101      	movs	r1, #1
 80045b6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	68f9      	ldr	r1, [r7, #12]
 80045c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045c4:	4013      	ands	r3, r2
 80045c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	0159      	lsls	r1, r3, #5
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	440b      	add	r3, r1
 80045de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e2:	4619      	mov	r1, r3
 80045e4:	4b35      	ldr	r3, [pc, #212]	; (80046bc <USB_DeactivateEndpoint+0x1b0>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	600b      	str	r3, [r1, #0]
 80045ea:	e060      	b.n	80046ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004602:	d11f      	bne.n	8004644 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	0151      	lsls	r1, r2, #5
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	440a      	add	r2, r1
 800461a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800461e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004622:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800463e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004642:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	2101      	movs	r1, #1
 8004656:	fa01 f303 	lsl.w	r3, r1, r3
 800465a:	041b      	lsls	r3, r3, #16
 800465c:	43db      	mvns	r3, r3
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004664:	4013      	ands	r3, r2
 8004666:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	2101      	movs	r1, #1
 800467a:	fa01 f303 	lsl.w	r3, r1, r3
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	43db      	mvns	r3, r3
 8004682:	68f9      	ldr	r1, [r7, #12]
 8004684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004688:	4013      	ands	r3, r2
 800468a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	0159      	lsls	r1, r3, #5
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	440b      	add	r3, r1
 80046a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a6:	4619      	mov	r1, r3
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <USB_DeactivateEndpoint+0x1b4>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	ec337800 	.word	0xec337800
 80046c0:	eff37800 	.word	0xeff37800

080046c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08a      	sub	sp, #40	; 0x28
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	4613      	mov	r3, r2
 80046d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	785b      	ldrb	r3, [r3, #1]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	f040 815c 	bne.w	800499e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d132      	bne.n	8004754 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	0151      	lsls	r1, r2, #5
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	440a      	add	r2, r1
 8004704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004708:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800470c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004710:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	0151      	lsls	r1, r2, #5
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	440a      	add	r2, r1
 8004728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004730:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	440a      	add	r2, r1
 8004748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474c:	0cdb      	lsrs	r3, r3, #19
 800474e:	04db      	lsls	r3, r3, #19
 8004750:	6113      	str	r3, [r2, #16]
 8004752:	e074      	b.n	800483e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	440a      	add	r2, r1
 800476a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476e:	0cdb      	lsrs	r3, r3, #19
 8004770:	04db      	lsls	r3, r3, #19
 8004772:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	0151      	lsls	r1, r2, #5
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	440a      	add	r2, r1
 800478a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004792:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004796:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6959      	ldr	r1, [r3, #20]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	440b      	add	r3, r1
 80047b0:	1e59      	subs	r1, r3, #1
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80047bc:	4b9d      	ldr	r3, [pc, #628]	; (8004a34 <USB_EPStartXfer+0x370>)
 80047be:	400b      	ands	r3, r1
 80047c0:	69b9      	ldr	r1, [r7, #24]
 80047c2:	0148      	lsls	r0, r1, #5
 80047c4:	69f9      	ldr	r1, [r7, #28]
 80047c6:	4401      	add	r1, r0
 80047c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047cc:	4313      	orrs	r3, r2
 80047ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e6:	69b9      	ldr	r1, [r7, #24]
 80047e8:	0148      	lsls	r0, r1, #5
 80047ea:	69f9      	ldr	r1, [r7, #28]
 80047ec:	4401      	add	r1, r0
 80047ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047f2:	4313      	orrs	r3, r2
 80047f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	78db      	ldrb	r3, [r3, #3]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d11f      	bne.n	800483e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	440a      	add	r2, r1
 8004814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004818:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800481c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	440a      	add	r2, r1
 8004834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004838:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800483c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d14b      	bne.n	80048dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d009      	beq.n	8004860 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004858:	461a      	mov	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	78db      	ldrb	r3, [r3, #3]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d128      	bne.n	80048ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d110      	bne.n	800489a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	0151      	lsls	r1, r2, #5
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	440a      	add	r2, r1
 800488e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004892:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	e00f      	b.n	80048ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	0151      	lsls	r1, r2, #5
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	440a      	add	r2, r1
 80048b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	e12f      	b.n	8004b3c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	0151      	lsls	r1, r2, #5
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	440a      	add	r2, r1
 80048f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	78db      	ldrb	r3, [r3, #3]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d015      	beq.n	8004930 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 8117 	beq.w	8004b3c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	2101      	movs	r1, #1
 8004920:	fa01 f303 	lsl.w	r3, r1, r3
 8004924:	69f9      	ldr	r1, [r7, #28]
 8004926:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800492a:	4313      	orrs	r3, r2
 800492c:	634b      	str	r3, [r1, #52]	; 0x34
 800492e:	e105      	b.n	8004b3c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d110      	bne.n	8004962 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	0151      	lsls	r1, r2, #5
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	440a      	add	r2, r1
 8004956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800495a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	e00f      	b.n	8004982 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	440a      	add	r2, r1
 8004978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004980:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	68d9      	ldr	r1, [r3, #12]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	781a      	ldrb	r2, [r3, #0]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	b298      	uxth	r0, r3
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	4603      	mov	r3, r0
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fa2b 	bl	8004df2 <USB_WritePacket>
 800499c:	e0ce      	b.n	8004b3c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	0151      	lsls	r1, r2, #5
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	440a      	add	r2, r1
 80049b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b8:	0cdb      	lsrs	r3, r3, #19
 80049ba:	04db      	lsls	r3, r3, #19
 80049bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	0151      	lsls	r1, r2, #5
 80049d0:	69fa      	ldr	r2, [r7, #28]
 80049d2:	440a      	add	r2, r1
 80049d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d126      	bne.n	8004a38 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a00:	69b9      	ldr	r1, [r7, #24]
 8004a02:	0148      	lsls	r0, r1, #5
 8004a04:	69f9      	ldr	r1, [r7, #28]
 8004a06:	4401      	add	r1, r0
 8004a08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	0151      	lsls	r1, r2, #5
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	440a      	add	r2, r1
 8004a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a2e:	6113      	str	r3, [r2, #16]
 8004a30:	e036      	b.n	8004aa0 <USB_EPStartXfer+0x3dc>
 8004a32:	bf00      	nop
 8004a34:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	695a      	ldr	r2, [r3, #20]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	4413      	add	r3, r2
 8004a42:	1e5a      	subs	r2, r3, #1
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	8afb      	ldrh	r3, [r7, #22]
 8004a5e:	04d9      	lsls	r1, r3, #19
 8004a60:	4b39      	ldr	r3, [pc, #228]	; (8004b48 <USB_EPStartXfer+0x484>)
 8004a62:	400b      	ands	r3, r1
 8004a64:	69b9      	ldr	r1, [r7, #24]
 8004a66:	0148      	lsls	r0, r1, #5
 8004a68:	69f9      	ldr	r1, [r7, #28]
 8004a6a:	4401      	add	r1, r0
 8004a6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a70:	4313      	orrs	r3, r2
 8004a72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	8af9      	ldrh	r1, [r7, #22]
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a90:	69b9      	ldr	r1, [r7, #24]
 8004a92:	0148      	lsls	r0, r1, #5
 8004a94:	69f9      	ldr	r1, [r7, #28]
 8004a96:	4401      	add	r1, r0
 8004a98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d10d      	bne.n	8004ac2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	68d9      	ldr	r1, [r3, #12]
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abe:	460a      	mov	r2, r1
 8004ac0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	78db      	ldrb	r3, [r3, #3]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d128      	bne.n	8004b1c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d110      	bne.n	8004afc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	0151      	lsls	r1, r2, #5
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	440a      	add	r2, r1
 8004af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	e00f      	b.n	8004b1c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	0151      	lsls	r1, r2, #5
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	440a      	add	r2, r1
 8004b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	0151      	lsls	r1, r2, #5
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	440a      	add	r2, r1
 8004b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	1ff80000 	.word	0x1ff80000

08004b4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	4613      	mov	r3, r2
 8004b58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	785b      	ldrb	r3, [r3, #1]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	f040 80cd 	bne.w	8004d08 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d132      	bne.n	8004bdc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	0151      	lsls	r1, r2, #5
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	440a      	add	r2, r1
 8004b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	0151      	lsls	r1, r2, #5
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	440a      	add	r2, r1
 8004bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	0151      	lsls	r1, r2, #5
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	440a      	add	r2, r1
 8004bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd4:	0cdb      	lsrs	r3, r3, #19
 8004bd6:	04db      	lsls	r3, r3, #19
 8004bd8:	6113      	str	r3, [r2, #16]
 8004bda:	e04e      	b.n	8004c7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf6:	0cdb      	lsrs	r3, r3, #19
 8004bf8:	04db      	lsls	r3, r3, #19
 8004bfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c1e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	695a      	ldr	r2, [r3, #20]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d903      	bls.n	8004c34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	0151      	lsls	r1, r2, #5
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	440a      	add	r2, r1
 8004c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c6a:	6939      	ldr	r1, [r7, #16]
 8004c6c:	0148      	lsls	r0, r1, #5
 8004c6e:	6979      	ldr	r1, [r7, #20]
 8004c70:	4401      	add	r1, r0
 8004c72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c76:	4313      	orrs	r3, r2
 8004c78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d11e      	bne.n	8004cbe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d009      	beq.n	8004c9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c94:	461a      	mov	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	0151      	lsls	r1, r2, #5
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	440a      	add	r2, r1
 8004cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	e092      	b.n	8004de4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	0151      	lsls	r1, r2, #5
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	440a      	add	r2, r1
 8004cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cdc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d07e      	beq.n	8004de4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfc:	6979      	ldr	r1, [r7, #20]
 8004cfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d02:	4313      	orrs	r3, r2
 8004d04:	634b      	str	r3, [r1, #52]	; 0x34
 8004d06:	e06d      	b.n	8004de4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	0151      	lsls	r1, r2, #5
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	440a      	add	r2, r1
 8004d1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d22:	0cdb      	lsrs	r3, r3, #19
 8004d24:	04db      	lsls	r3, r3, #19
 8004d26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	0151      	lsls	r1, r2, #5
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	440a      	add	r2, r1
 8004d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d4a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	0151      	lsls	r1, r2, #5
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	440a      	add	r2, r1
 8004d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d92:	6939      	ldr	r1, [r7, #16]
 8004d94:	0148      	lsls	r0, r1, #5
 8004d96:	6979      	ldr	r1, [r7, #20]
 8004d98:	4401      	add	r1, r0
 8004d9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d10d      	bne.n	8004dc4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d009      	beq.n	8004dc4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	68d9      	ldr	r1, [r3, #12]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc0:	460a      	mov	r2, r1
 8004dc2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004de2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b089      	sub	sp, #36	; 0x24
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	461a      	mov	r2, r3
 8004e00:	460b      	mov	r3, r1
 8004e02:	71fb      	strb	r3, [r7, #7]
 8004e04:	4613      	mov	r3, r2
 8004e06:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d123      	bne.n	8004e60 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e18:	88bb      	ldrh	r3, [r7, #4]
 8004e1a:	3303      	adds	r3, #3
 8004e1c:	089b      	lsrs	r3, r3, #2
 8004e1e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e20:	2300      	movs	r3, #0
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	e018      	b.n	8004e58 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	031a      	lsls	r2, r3, #12
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e32:	461a      	mov	r2, r3
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	3301      	adds	r3, #1
 8004e44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	3301      	adds	r3, #1
 8004e56:	61bb      	str	r3, [r7, #24]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d3e2      	bcc.n	8004e26 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3724      	adds	r7, #36	; 0x24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b08b      	sub	sp, #44	; 0x2c
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e84:	88fb      	ldrh	r3, [r7, #6]
 8004e86:	089b      	lsrs	r3, r3, #2
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e94:	2300      	movs	r3, #0
 8004e96:	623b      	str	r3, [r7, #32]
 8004e98:	e014      	b.n	8004ec4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	3301      	adds	r3, #1
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	3301      	adds	r3, #1
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	623b      	str	r3, [r7, #32]
 8004ec4:	6a3a      	ldr	r2, [r7, #32]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d3e6      	bcc.n	8004e9a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ecc:	8bfb      	ldrh	r3, [r7, #30]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d01e      	beq.n	8004f10 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004edc:	461a      	mov	r2, r3
 8004ede:	f107 0310 	add.w	r3, r7, #16
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	701a      	strb	r2, [r3, #0]
      i++;
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	3301      	adds	r3, #1
 8004efc:	623b      	str	r3, [r7, #32]
      pDest++;
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	3301      	adds	r3, #1
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004f04:	8bfb      	ldrh	r3, [r7, #30]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f0a:	8bfb      	ldrh	r3, [r7, #30]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ea      	bne.n	8004ee6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	372c      	adds	r7, #44	; 0x2c
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b085      	sub	sp, #20
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	785b      	ldrb	r3, [r3, #1]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d12c      	bne.n	8004f94 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	db12      	blt.n	8004f72 <USB_EPSetStall+0x54>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00f      	beq.n	8004f72 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f70:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	0151      	lsls	r1, r2, #5
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	440a      	add	r2, r1
 8004f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	e02b      	b.n	8004fec <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	db12      	blt.n	8004fcc <USB_EPSetStall+0xae>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00f      	beq.n	8004fcc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fca:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d128      	bne.n	8005068 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	440a      	add	r2, r1
 800502c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005030:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005034:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	78db      	ldrb	r3, [r3, #3]
 800503a:	2b03      	cmp	r3, #3
 800503c:	d003      	beq.n	8005046 <USB_EPClearStall+0x4c>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	78db      	ldrb	r3, [r3, #3]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d138      	bne.n	80050b8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	440a      	add	r2, r1
 800505c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	e027      	b.n	80050b8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	0151      	lsls	r1, r2, #5
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	440a      	add	r2, r1
 800507e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005082:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005086:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	78db      	ldrb	r3, [r3, #3]
 800508c:	2b03      	cmp	r3, #3
 800508e:	d003      	beq.n	8005098 <USB_EPClearStall+0x9e>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	78db      	ldrb	r3, [r3, #3]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d10f      	bne.n	80050b8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	0151      	lsls	r1, r2, #5
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	440a      	add	r2, r1
 80050ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	460b      	mov	r3, r1
 80050d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050e8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80050fa:	68f9      	ldr	r1, [r7, #12]
 80050fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005100:	4313      	orrs	r3, r2
 8005102:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800512c:	f023 0303 	bic.w	r3, r3, #3
 8005130:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005140:	f023 0302 	bic.w	r3, r3, #2
 8005144:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800516e:	f023 0303 	bic.w	r3, r3, #3
 8005172:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005182:	f043 0302 	orr.w	r3, r3, #2
 8005186:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005196:	b480      	push	{r7}
 8005198:	b085      	sub	sp, #20
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4013      	ands	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051ae:	68fb      	ldr	r3, [r7, #12]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	4013      	ands	r3, r2
 80051de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	0c1b      	lsrs	r3, r3, #16
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	4013      	ands	r3, r2
 8005212:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	b29b      	uxth	r3, r3
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	4013      	ands	r3, r2
 8005250:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005252:	68bb      	ldr	r3, [r7, #8]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005282:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005284:	78fb      	ldrb	r3, [r7, #3]
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
 8005290:	01db      	lsls	r3, r3, #7
 8005292:	b2db      	uxtb	r3, r3
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4013      	ands	r3, r2
 80052ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052ae:	68bb      	ldr	r3, [r7, #8]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	f003 0301 	and.w	r3, r3, #1
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80052f6:	f023 0307 	bic.w	r3, r3, #7
 80052fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800530a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800530e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	460b      	mov	r3, r1
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	333c      	adds	r3, #60	; 0x3c
 8005336:	3304      	adds	r3, #4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4a26      	ldr	r2, [pc, #152]	; (80053d8 <USB_EP0_OutStart+0xb8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d90a      	bls.n	800535a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005354:	d101      	bne.n	800535a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	e037      	b.n	80053ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005360:	461a      	mov	r2, r3
 8005362:	2300      	movs	r3, #0
 8005364:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005374:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005378:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005388:	f043 0318 	orr.w	r3, r3, #24
 800538c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80053a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80053a2:	7afb      	ldrb	r3, [r7, #11]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d10f      	bne.n	80053c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ae:	461a      	mov	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80053c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	4f54300a 	.word	0x4f54300a

080053dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3301      	adds	r3, #1
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	4a13      	ldr	r2, [pc, #76]	; (800543c <USB_CoreReset+0x60>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d901      	bls.n	80053f8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e01a      	b.n	800542e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	daf3      	bge.n	80053e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f043 0201 	orr.w	r2, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3301      	adds	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	4a09      	ldr	r2, [pc, #36]	; (800543c <USB_CoreReset+0x60>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e006      	b.n	800542e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b01      	cmp	r3, #1
 800542a:	d0f1      	beq.n	8005410 <USB_CoreReset+0x34>

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	00030d40 	.word	0x00030d40

08005440 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800544c:	2054      	movs	r0, #84	; 0x54
 800544e:	f001 ffd3 	bl	80073f8 <USBD_static_malloc>
 8005452:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d105      	bne.n	8005466 <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005462:	2302      	movs	r3, #2
 8005464:	e039      	b.n	80054da <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	7c1b      	ldrb	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d107      	bne.n	8005486 <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2205      	movs	r2, #5
 800547a:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2205      	movs	r2, #5
 8005480:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8005484:	e006      	b.n	8005494 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2205      	movs	r2, #5
 800548a:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2205      	movs	r2, #5
 8005490:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8005494:	2314      	movs	r3, #20
 8005496:	2203      	movs	r2, #3
 8005498:	2181      	movs	r1, #129	; 0x81
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f001 fe89 	bl	80071b2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80054a6:	2308      	movs	r3, #8
 80054a8:	2203      	movs	r2, #3
 80054aa:	2101      	movs	r1, #1
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f001 fe80 	bl	80071b2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	2340      	movs	r3, #64	; 0x40
 80054d0:	2101      	movs	r1, #1
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f001 ff5c 	bl	8007390 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b082      	sub	sp, #8
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	460b      	mov	r3, r1
 80054ec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80054ee:	2181      	movs	r1, #129	; 0x81
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f001 fe84 	bl	80071fe <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8005502:	2101      	movs	r1, #1
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 fe7a 	bl	80071fe <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00e      	beq.n	8005542 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005534:	4618      	mov	r0, r3
 8005536:	f001 ff6d 	bl	8007414 <USBD_static_free>
    pdev->pClassData = NULL;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800555c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005574:	2303      	movs	r3, #3
 8005576:	e0ed      	b.n	8005754 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005580:	2b00      	cmp	r3, #0
 8005582:	d052      	beq.n	800562a <USBD_CUSTOM_HID_Setup+0xde>
 8005584:	2b20      	cmp	r3, #32
 8005586:	f040 80dd 	bne.w	8005744 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	3b02      	subs	r3, #2
 8005590:	2b09      	cmp	r3, #9
 8005592:	d842      	bhi.n	800561a <USBD_CUSTOM_HID_Setup+0xce>
 8005594:	a201      	add	r2, pc, #4	; (adr r2, 800559c <USBD_CUSTOM_HID_Setup+0x50>)
 8005596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559a:	bf00      	nop
 800559c:	080055f5 	.word	0x080055f5
 80055a0:	080055d3 	.word	0x080055d3
 80055a4:	0800561b 	.word	0x0800561b
 80055a8:	0800561b 	.word	0x0800561b
 80055ac:	0800561b 	.word	0x0800561b
 80055b0:	0800561b 	.word	0x0800561b
 80055b4:	0800561b 	.word	0x0800561b
 80055b8:	08005605 	.word	0x08005605
 80055bc:	080055e3 	.word	0x080055e3
 80055c0:	080055c5 	.word	0x080055c5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	885b      	ldrh	r3, [r3, #2]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	461a      	mov	r2, r3
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80055d0:	e02a      	b.n	8005628 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	3340      	adds	r3, #64	; 0x40
 80055d6:	2201      	movs	r2, #1
 80055d8:	4619      	mov	r1, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f001 fa67 	bl	8006aae <USBD_CtlSendData>
          break;
 80055e0:	e022      	b.n	8005628 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	885b      	ldrh	r3, [r3, #2]
 80055e6:	0a1b      	lsrs	r3, r3, #8
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 80055f2:	e019      	b.n	8005628 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	3344      	adds	r3, #68	; 0x44
 80055f8:	2201      	movs	r2, #1
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f001 fa56 	bl	8006aae <USBD_CtlSendData>
          break;
 8005602:	e011      	b.n	8005628 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	2201      	movs	r2, #1
 8005608:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800560a:	6939      	ldr	r1, [r7, #16]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	88db      	ldrh	r3, [r3, #6]
 8005610:	461a      	mov	r2, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f001 fa77 	bl	8006b06 <USBD_CtlPrepareRx>
          break;
 8005618:	e006      	b.n	8005628 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f001 f9d5 	bl	80069cc <USBD_CtlError>
          ret = USBD_FAIL;
 8005622:	2303      	movs	r3, #3
 8005624:	75fb      	strb	r3, [r7, #23]
          break;
 8005626:	bf00      	nop
      }
      break;
 8005628:	e093      	b.n	8005752 <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	785b      	ldrb	r3, [r3, #1]
 800562e:	2b0b      	cmp	r3, #11
 8005630:	d87f      	bhi.n	8005732 <USBD_CUSTOM_HID_Setup+0x1e6>
 8005632:	a201      	add	r2, pc, #4	; (adr r2, 8005638 <USBD_CUSTOM_HID_Setup+0xec>)
 8005634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005638:	08005669 	.word	0x08005669
 800563c:	08005741 	.word	0x08005741
 8005640:	08005733 	.word	0x08005733
 8005644:	08005733 	.word	0x08005733
 8005648:	08005733 	.word	0x08005733
 800564c:	08005733 	.word	0x08005733
 8005650:	08005693 	.word	0x08005693
 8005654:	08005733 	.word	0x08005733
 8005658:	08005733 	.word	0x08005733
 800565c:	08005733 	.word	0x08005733
 8005660:	080056e1 	.word	0x080056e1
 8005664:	0800570b 	.word	0x0800570b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b03      	cmp	r3, #3
 8005672:	d107      	bne.n	8005684 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005674:	f107 030e 	add.w	r3, r7, #14
 8005678:	2202      	movs	r2, #2
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f001 fa16 	bl	8006aae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005682:	e05e      	b.n	8005742 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f001 f9a0 	bl	80069cc <USBD_CtlError>
            ret = USBD_FAIL;
 800568c:	2303      	movs	r3, #3
 800568e:	75fb      	strb	r3, [r7, #23]
          break;
 8005690:	e057      	b.n	8005742 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	885b      	ldrh	r3, [r3, #2]
 8005696:	0a1b      	lsrs	r3, r3, #8
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b22      	cmp	r3, #34	; 0x22
 800569c:	d10b      	bne.n	80056b6 <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	88db      	ldrh	r3, [r3, #6]
 80056a2:	2bc4      	cmp	r3, #196	; 0xc4
 80056a4:	bf28      	it	cs
 80056a6:	23c4      	movcs	r3, #196	; 0xc4
 80056a8:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	61bb      	str	r3, [r7, #24]
 80056b4:	e00d      	b.n	80056d2 <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	885b      	ldrh	r3, [r3, #2]
 80056ba:	0a1b      	lsrs	r3, r3, #8
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b21      	cmp	r3, #33	; 0x21
 80056c0:	d107      	bne.n	80056d2 <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80056c2:	4b26      	ldr	r3, [pc, #152]	; (800575c <USBD_CUSTOM_HID_Setup+0x210>)
 80056c4:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	88db      	ldrh	r3, [r3, #6]
 80056ca:	2b09      	cmp	r3, #9
 80056cc:	bf28      	it	cs
 80056ce:	2309      	movcs	r3, #9
 80056d0:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80056d2:	8bfb      	ldrh	r3, [r7, #30]
 80056d4:	461a      	mov	r2, r3
 80056d6:	69b9      	ldr	r1, [r7, #24]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 f9e8 	bl	8006aae <USBD_CtlSendData>
          break;
 80056de:	e030      	b.n	8005742 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d107      	bne.n	80056fc <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	3348      	adds	r3, #72	; 0x48
 80056f0:	2201      	movs	r2, #1
 80056f2:	4619      	mov	r1, r3
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f001 f9da 	bl	8006aae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056fa:	e022      	b.n	8005742 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80056fc:	6839      	ldr	r1, [r7, #0]
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f001 f964 	bl	80069cc <USBD_CtlError>
            ret = USBD_FAIL;
 8005704:	2303      	movs	r3, #3
 8005706:	75fb      	strb	r3, [r7, #23]
          break;
 8005708:	e01b      	b.n	8005742 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b03      	cmp	r3, #3
 8005714:	d106      	bne.n	8005724 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	885b      	ldrh	r3, [r3, #2]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	461a      	mov	r2, r3
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005722:	e00e      	b.n	8005742 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f001 f950 	bl	80069cc <USBD_CtlError>
            ret = USBD_FAIL;
 800572c:	2303      	movs	r3, #3
 800572e:	75fb      	strb	r3, [r7, #23]
          break;
 8005730:	e007      	b.n	8005742 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005732:	6839      	ldr	r1, [r7, #0]
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f001 f949 	bl	80069cc <USBD_CtlError>
          ret = USBD_FAIL;
 800573a:	2303      	movs	r3, #3
 800573c:	75fb      	strb	r3, [r7, #23]
          break;
 800573e:	e000      	b.n	8005742 <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 8005740:	bf00      	nop
      }
      break;
 8005742:	e006      	b.n	8005752 <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f001 f940 	bl	80069cc <USBD_CtlError>
      ret = USBD_FAIL;
 800574c:	2303      	movs	r3, #3
 800574e:	75fb      	strb	r3, [r7, #23]
      break;
 8005750:	bf00      	nop
  }
  return (uint8_t)ret;
 8005752:	7dfb      	ldrb	r3, [r7, #23]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3720      	adds	r7, #32
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20000218 	.word	0x20000218

08005760 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2299      	movs	r2, #153	; 0x99
 800576c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800576e:	4b03      	ldr	r3, [pc, #12]	; (800577c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	20000044 	.word	0x20000044

08005780 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2299      	movs	r2, #153	; 0x99
 800578c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800578e:	4b03      	ldr	r3, [pc, #12]	; (800579c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8005790:	4618      	mov	r0, r3
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	200000e0 	.word	0x200000e0

080057a0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2299      	movs	r2, #153	; 0x99
 80057ac:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80057ae:	4b03      	ldr	r3, [pc, #12]	; (80057bc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	2000017c 	.word	0x2000017c

080057c0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	460b      	mov	r3, r1
 80057f0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e00b      	b.n	8005818 <USBD_CUSTOM_HID_DataOut+0x32>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005806:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4610      	mov	r0, r2
 8005814:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8005832:	2303      	movs	r3, #3
 8005834:	e00a      	b.n	800584c <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800583c:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	2340      	movs	r3, #64	; 0x40
 8005842:	2101      	movs	r1, #1
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 fda3 	bl	8007390 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005862:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800586a:	2303      	movs	r3, #3
 800586c:	e00e      	b.n	800588c <USBD_CUSTOM_HID_EP0_RxReady+0x38>
  }

  if (hhid->IsReportAvailable == 1U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005872:	2b01      	cmp	r3, #1
 8005874:	d109      	bne.n	800588a <USBD_CUSTOM_HID_EP0_RxReady+0x36>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4610      	mov	r0, r2
 8005882:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	220a      	movs	r2, #10
 80058a0:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80058a2:	4b03      	ldr	r3, [pc, #12]	; (80058b0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	20000224 	.word	0x20000224

080058b4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e004      	b.n	80058d2 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b086      	sub	sp, #24
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	4613      	mov	r3, r2
 80058ea:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e01f      	b.n	8005936 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	79fa      	ldrb	r2, [r7, #7]
 8005928:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f001 fbda 	bl	80070e4 <USBD_LL_Init>
 8005930:	4603      	mov	r3, r0
 8005932:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005934:	7dfb      	ldrb	r3, [r7, #23]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005952:	2303      	movs	r3, #3
 8005954:	e016      	b.n	8005984 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005972:	f107 020e 	add.w	r2, r7, #14
 8005976:	4610      	mov	r0, r2
 8005978:	4798      	blx	r3
 800597a:	4602      	mov	r2, r0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f001 fbf1 	bl	800717c <USBD_LL_Start>
 800599a:	4603      	mov	r3, r0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	460b      	mov	r3, r1
 80059c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80059c6:	2303      	movs	r3, #3
 80059c8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d009      	beq.n	80059e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	78fa      	ldrb	r2, [r7, #3]
 80059de:	4611      	mov	r1, r2
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
 80059e4:	4603      	mov	r3, r0
 80059e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b082      	sub	sp, #8
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	460b      	mov	r3, r1
 80059fc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	4611      	mov	r1, r2
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	4798      	blx	r3
  }

  return USBD_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 ff8f 	bl	8006958 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005a48:	461a      	mov	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d01a      	beq.n	8005a94 <USBD_LL_SetupStage+0x72>
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d822      	bhi.n	8005aa8 <USBD_LL_SetupStage+0x86>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <USBD_LL_SetupStage+0x4a>
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d00a      	beq.n	8005a80 <USBD_LL_SetupStage+0x5e>
 8005a6a:	e01d      	b.n	8005aa8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fa61 	bl	8005f3c <USBD_StdDevReq>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a7e:	e020      	b.n	8005ac2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a86:	4619      	mov	r1, r3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fac5 	bl	8006018 <USBD_StdItfReq>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	73fb      	strb	r3, [r7, #15]
      break;
 8005a92:	e016      	b.n	8005ac2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fb04 	bl	80060aa <USBD_StdEPReq>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa6:	e00c      	b.n	8005ac2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005aae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 fbc0 	bl	800723c <USBD_LL_StallEP>
 8005abc:	4603      	mov	r3, r0
 8005abe:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac0:	bf00      	nop
  }

  return ret;
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ada:	7afb      	ldrb	r3, [r7, #11]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d138      	bne.n	8005b52 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ae6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d14a      	bne.n	8005b88 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d913      	bls.n	8005b26 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	1ad2      	subs	r2, r2, r3
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	4293      	cmp	r3, r2
 8005b16:	bf28      	it	cs
 8005b18:	4613      	movcs	r3, r2
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f001 f80e 	bl	8006b40 <USBD_CtlContinueRx>
 8005b24:	e030      	b.n	8005b88 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d10b      	bne.n	8005b4a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d005      	beq.n	8005b4a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f001 f809 	bl	8006b62 <USBD_CtlSendStatus>
 8005b50:	e01a      	b.n	8005b88 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d114      	bne.n	8005b88 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00e      	beq.n	8005b88 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	7afa      	ldrb	r2, [r7, #11]
 8005b74:	4611      	mov	r1, r2
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	4798      	blx	r3
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005b84:	7dfb      	ldrb	r3, [r7, #23]
 8005b86:	e000      	b.n	8005b8a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b086      	sub	sp, #24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	607a      	str	r2, [r7, #4]
 8005b9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ba0:	7afb      	ldrb	r3, [r7, #11]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d16b      	bne.n	8005c7e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3314      	adds	r3, #20
 8005baa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d156      	bne.n	8005c64 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d914      	bls.n	8005bec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	1ad2      	subs	r2, r2, r3
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 ff83 	bl	8006ae4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bde:	2300      	movs	r3, #0
 8005be0:	2200      	movs	r2, #0
 8005be2:	2100      	movs	r1, #0
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f001 fbd3 	bl	8007390 <USBD_LL_PrepareReceive>
 8005bea:	e03b      	b.n	8005c64 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d11c      	bne.n	8005c32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d316      	bcc.n	8005c32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d20f      	bcs.n	8005c32 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c12:	2200      	movs	r2, #0
 8005c14:	2100      	movs	r1, #0
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 ff64 	bl	8006ae4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c24:	2300      	movs	r3, #0
 8005c26:	2200      	movs	r2, #0
 8005c28:	2100      	movs	r1, #0
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f001 fbb0 	bl	8007390 <USBD_LL_PrepareReceive>
 8005c30:	e018      	b.n	8005c64 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d10b      	bne.n	8005c56 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c56:	2180      	movs	r1, #128	; 0x80
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f001 faef 	bl	800723c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 ff92 	bl	8006b88 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d122      	bne.n	8005cb4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7ff fe98 	bl	80059a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c7c:	e01a      	b.n	8005cb4 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d114      	bne.n	8005cb4 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00e      	beq.n	8005cb4 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	7afa      	ldrb	r2, [r7, #11]
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	4798      	blx	r3
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
 8005cb2:	e000      	b.n	8005cb6 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b082      	sub	sp, #8
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e02f      	b.n	8005d52 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00f      	beq.n	8005d1c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d009      	beq.n	8005d1c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6852      	ldr	r2, [r2, #4]
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	4611      	mov	r1, r2
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2100      	movs	r1, #0
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f001 fa45 	bl	80071b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2208      	movs	r2, #8
 8005d34:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d38:	2308      	movs	r3, #8
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2180      	movs	r1, #128	; 0x80
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f001 fa37 	bl	80071b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	460b      	mov	r3, r1
 8005d64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	78fa      	ldrb	r2, [r7, #3]
 8005d6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2204      	movs	r2, #4
 8005d94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d106      	bne.n	8005dc8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e012      	b.n	8005e12 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d10b      	bne.n	8005e10 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	460b      	mov	r3, r1
 8005e24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e014      	b.n	8005e5e <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d10d      	bne.n	8005e5c <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	78fa      	ldrb	r2, [r7, #3]
 8005e56:	4611      	mov	r1, r2
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b082      	sub	sp, #8
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e014      	b.n	8005eaa <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d10d      	bne.n	8005ea8 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d007      	beq.n	8005ea8 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	78fa      	ldrb	r2, [r7, #3]
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d009      	beq.n	8005ef6 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6852      	ldr	r2, [r2, #4]
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	4798      	blx	r3
  }

  return USBD_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	3301      	adds	r3, #1
 8005f16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f1e:	8a3b      	ldrh	r3, [r7, #16]
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	b21a      	sxth	r2, r3
 8005f24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	b21b      	sxth	r3, r3
 8005f2c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f2e:	89fb      	ldrh	r3, [r7, #14]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f52:	2b40      	cmp	r3, #64	; 0x40
 8005f54:	d005      	beq.n	8005f62 <USBD_StdDevReq+0x26>
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d853      	bhi.n	8006002 <USBD_StdDevReq+0xc6>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00b      	beq.n	8005f76 <USBD_StdDevReq+0x3a>
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	d14f      	bne.n	8006002 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	4798      	blx	r3
 8005f70:	4603      	mov	r3, r0
 8005f72:	73fb      	strb	r3, [r7, #15]
      break;
 8005f74:	e04a      	b.n	800600c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	2b09      	cmp	r3, #9
 8005f7c:	d83b      	bhi.n	8005ff6 <USBD_StdDevReq+0xba>
 8005f7e:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <USBD_StdDevReq+0x48>)
 8005f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f84:	08005fd9 	.word	0x08005fd9
 8005f88:	08005fed 	.word	0x08005fed
 8005f8c:	08005ff7 	.word	0x08005ff7
 8005f90:	08005fe3 	.word	0x08005fe3
 8005f94:	08005ff7 	.word	0x08005ff7
 8005f98:	08005fb7 	.word	0x08005fb7
 8005f9c:	08005fad 	.word	0x08005fad
 8005fa0:	08005ff7 	.word	0x08005ff7
 8005fa4:	08005fcf 	.word	0x08005fcf
 8005fa8:	08005fc1 	.word	0x08005fc1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f9de 	bl	8006370 <USBD_GetDescriptor>
          break;
 8005fb4:	e024      	b.n	8006000 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fb43 	bl	8006644 <USBD_SetAddress>
          break;
 8005fbe:	e01f      	b.n	8006000 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005fc0:	6839      	ldr	r1, [r7, #0]
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fb82 	bl	80066cc <USBD_SetConfig>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	73fb      	strb	r3, [r7, #15]
          break;
 8005fcc:	e018      	b.n	8006000 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fc21 	bl	8006818 <USBD_GetConfig>
          break;
 8005fd6:	e013      	b.n	8006000 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fc52 	bl	8006884 <USBD_GetStatus>
          break;
 8005fe0:	e00e      	b.n	8006000 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005fe2:	6839      	ldr	r1, [r7, #0]
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fc81 	bl	80068ec <USBD_SetFeature>
          break;
 8005fea:	e009      	b.n	8006000 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fc90 	bl	8006914 <USBD_ClrFeature>
          break;
 8005ff4:	e004      	b.n	8006000 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fce7 	bl	80069cc <USBD_CtlError>
          break;
 8005ffe:	bf00      	nop
      }
      break;
 8006000:	e004      	b.n	800600c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fce1 	bl	80069cc <USBD_CtlError>
      break;
 800600a:	bf00      	nop
  }

  return ret;
 800600c:	7bfb      	ldrb	r3, [r7, #15]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop

08006018 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800602e:	2b40      	cmp	r3, #64	; 0x40
 8006030:	d005      	beq.n	800603e <USBD_StdItfReq+0x26>
 8006032:	2b40      	cmp	r3, #64	; 0x40
 8006034:	d82f      	bhi.n	8006096 <USBD_StdItfReq+0x7e>
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <USBD_StdItfReq+0x26>
 800603a:	2b20      	cmp	r3, #32
 800603c:	d12b      	bne.n	8006096 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006044:	b2db      	uxtb	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	2b02      	cmp	r3, #2
 800604a:	d81d      	bhi.n	8006088 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	889b      	ldrh	r3, [r3, #4]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b01      	cmp	r3, #1
 8006054:	d813      	bhi.n	800607e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	4798      	blx	r3
 8006064:	4603      	mov	r3, r0
 8006066:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	88db      	ldrh	r3, [r3, #6]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d110      	bne.n	8006092 <USBD_StdItfReq+0x7a>
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10d      	bne.n	8006092 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fd73 	bl	8006b62 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800607c:	e009      	b.n	8006092 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fca3 	bl	80069cc <USBD_CtlError>
          break;
 8006086:	e004      	b.n	8006092 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fc9e 	bl	80069cc <USBD_CtlError>
          break;
 8006090:	e000      	b.n	8006094 <USBD_StdItfReq+0x7c>
          break;
 8006092:	bf00      	nop
      }
      break;
 8006094:	e004      	b.n	80060a0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fc97 	bl	80069cc <USBD_CtlError>
      break;
 800609e:	bf00      	nop
  }

  return ret;
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	889b      	ldrh	r3, [r3, #4]
 80060bc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d007      	beq.n	80060da <USBD_StdEPReq+0x30>
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	f200 8145 	bhi.w	800635a <USBD_StdEPReq+0x2b0>
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00c      	beq.n	80060ee <USBD_StdEPReq+0x44>
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	f040 8140 	bne.w	800635a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	4798      	blx	r3
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]
      break;
 80060ec:	e13a      	b.n	8006364 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	785b      	ldrb	r3, [r3, #1]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d007      	beq.n	8006106 <USBD_StdEPReq+0x5c>
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	f300 8129 	bgt.w	800634e <USBD_StdEPReq+0x2a4>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d07f      	beq.n	8006200 <USBD_StdEPReq+0x156>
 8006100:	2b01      	cmp	r3, #1
 8006102:	d03c      	beq.n	800617e <USBD_StdEPReq+0xd4>
 8006104:	e123      	b.n	800634e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d002      	beq.n	8006118 <USBD_StdEPReq+0x6e>
 8006112:	2b03      	cmp	r3, #3
 8006114:	d016      	beq.n	8006144 <USBD_StdEPReq+0x9a>
 8006116:	e02c      	b.n	8006172 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006118:	7bbb      	ldrb	r3, [r7, #14]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00d      	beq.n	800613a <USBD_StdEPReq+0x90>
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	2b80      	cmp	r3, #128	; 0x80
 8006122:	d00a      	beq.n	800613a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006124:	7bbb      	ldrb	r3, [r7, #14]
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 f887 	bl	800723c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800612e:	2180      	movs	r1, #128	; 0x80
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 f883 	bl	800723c <USBD_LL_StallEP>
 8006136:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006138:	e020      	b.n	800617c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fc45 	bl	80069cc <USBD_CtlError>
              break;
 8006142:	e01b      	b.n	800617c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	885b      	ldrh	r3, [r3, #2]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10e      	bne.n	800616a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800614c:	7bbb      	ldrb	r3, [r7, #14]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00b      	beq.n	800616a <USBD_StdEPReq+0xc0>
 8006152:	7bbb      	ldrb	r3, [r7, #14]
 8006154:	2b80      	cmp	r3, #128	; 0x80
 8006156:	d008      	beq.n	800616a <USBD_StdEPReq+0xc0>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	88db      	ldrh	r3, [r3, #6]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d104      	bne.n	800616a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006160:	7bbb      	ldrb	r3, [r7, #14]
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 f869 	bl	800723c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fcf9 	bl	8006b62 <USBD_CtlSendStatus>

              break;
 8006170:	e004      	b.n	800617c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fc29 	bl	80069cc <USBD_CtlError>
              break;
 800617a:	bf00      	nop
          }
          break;
 800617c:	e0ec      	b.n	8006358 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d002      	beq.n	8006190 <USBD_StdEPReq+0xe6>
 800618a:	2b03      	cmp	r3, #3
 800618c:	d016      	beq.n	80061bc <USBD_StdEPReq+0x112>
 800618e:	e030      	b.n	80061f2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00d      	beq.n	80061b2 <USBD_StdEPReq+0x108>
 8006196:	7bbb      	ldrb	r3, [r7, #14]
 8006198:	2b80      	cmp	r3, #128	; 0x80
 800619a:	d00a      	beq.n	80061b2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800619c:	7bbb      	ldrb	r3, [r7, #14]
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 f84b 	bl	800723c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061a6:	2180      	movs	r1, #128	; 0x80
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 f847 	bl	800723c <USBD_LL_StallEP>
 80061ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061b0:	e025      	b.n	80061fe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fc09 	bl	80069cc <USBD_CtlError>
              break;
 80061ba:	e020      	b.n	80061fe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	885b      	ldrh	r3, [r3, #2]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d11b      	bne.n	80061fc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
 80061c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d004      	beq.n	80061d8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80061ce:	7bbb      	ldrb	r3, [r7, #14]
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 f851 	bl	800727a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fcc2 	bl	8006b62 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	4798      	blx	r3
 80061ec:	4603      	mov	r3, r0
 80061ee:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80061f0:	e004      	b.n	80061fc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fbe9 	bl	80069cc <USBD_CtlError>
              break;
 80061fa:	e000      	b.n	80061fe <USBD_StdEPReq+0x154>
              break;
 80061fc:	bf00      	nop
          }
          break;
 80061fe:	e0ab      	b.n	8006358 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d002      	beq.n	8006212 <USBD_StdEPReq+0x168>
 800620c:	2b03      	cmp	r3, #3
 800620e:	d032      	beq.n	8006276 <USBD_StdEPReq+0x1cc>
 8006210:	e097      	b.n	8006342 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006212:	7bbb      	ldrb	r3, [r7, #14]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <USBD_StdEPReq+0x17e>
 8006218:	7bbb      	ldrb	r3, [r7, #14]
 800621a:	2b80      	cmp	r3, #128	; 0x80
 800621c:	d004      	beq.n	8006228 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fbd3 	bl	80069cc <USBD_CtlError>
                break;
 8006226:	e091      	b.n	800634c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006228:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800622c:	2b00      	cmp	r3, #0
 800622e:	da0b      	bge.n	8006248 <USBD_StdEPReq+0x19e>
 8006230:	7bbb      	ldrb	r3, [r7, #14]
 8006232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	3310      	adds	r3, #16
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	4413      	add	r3, r2
 8006244:	3304      	adds	r3, #4
 8006246:	e00b      	b.n	8006260 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006248:	7bbb      	ldrb	r3, [r7, #14]
 800624a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	4413      	add	r3, r2
 800625e:	3304      	adds	r3, #4
 8006260:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2202      	movs	r2, #2
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fc1d 	bl	8006aae <USBD_CtlSendData>
              break;
 8006274:	e06a      	b.n	800634c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006276:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800627a:	2b00      	cmp	r3, #0
 800627c:	da11      	bge.n	80062a2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800627e:	7bbb      	ldrb	r3, [r7, #14]
 8006280:	f003 020f 	and.w	r2, r3, #15
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	440b      	add	r3, r1
 8006290:	3324      	adds	r3, #36	; 0x24
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d117      	bne.n	80062c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fb96 	bl	80069cc <USBD_CtlError>
                  break;
 80062a0:	e054      	b.n	800634c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80062a2:	7bbb      	ldrb	r3, [r7, #14]
 80062a4:	f003 020f 	and.w	r2, r3, #15
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	440b      	add	r3, r1
 80062b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d104      	bne.n	80062c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fb83 	bl	80069cc <USBD_CtlError>
                  break;
 80062c6:	e041      	b.n	800634c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	da0b      	bge.n	80062e8 <USBD_StdEPReq+0x23e>
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	3310      	adds	r3, #16
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	4413      	add	r3, r2
 80062e4:	3304      	adds	r3, #4
 80062e6:	e00b      	b.n	8006300 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062e8:	7bbb      	ldrb	r3, [r7, #14]
 80062ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	4413      	add	r3, r2
 80062fe:	3304      	adds	r3, #4
 8006300:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006302:	7bbb      	ldrb	r3, [r7, #14]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <USBD_StdEPReq+0x264>
 8006308:	7bbb      	ldrb	r3, [r7, #14]
 800630a:	2b80      	cmp	r3, #128	; 0x80
 800630c:	d103      	bne.n	8006316 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	e00e      	b.n	8006334 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006316:	7bbb      	ldrb	r3, [r7, #14]
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 ffcc 	bl	80072b8 <USBD_LL_IsStallEP>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2201      	movs	r2, #1
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	e002      	b.n	8006334 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2202      	movs	r2, #2
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fbb7 	bl	8006aae <USBD_CtlSendData>
              break;
 8006340:	e004      	b.n	800634c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fb41 	bl	80069cc <USBD_CtlError>
              break;
 800634a:	bf00      	nop
          }
          break;
 800634c:	e004      	b.n	8006358 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fb3b 	bl	80069cc <USBD_CtlError>
          break;
 8006356:	bf00      	nop
      }
      break;
 8006358:	e004      	b.n	8006364 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fb35 	bl	80069cc <USBD_CtlError>
      break;
 8006362:	bf00      	nop
  }

  return ret;
 8006364:	7bfb      	ldrb	r3, [r7, #15]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
	...

08006370 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800637e:	2300      	movs	r3, #0
 8006380:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	885b      	ldrh	r3, [r3, #2]
 800638a:	0a1b      	lsrs	r3, r3, #8
 800638c:	b29b      	uxth	r3, r3
 800638e:	3b01      	subs	r3, #1
 8006390:	2b06      	cmp	r3, #6
 8006392:	f200 8128 	bhi.w	80065e6 <USBD_GetDescriptor+0x276>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <USBD_GetDescriptor+0x2c>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063b9 	.word	0x080063b9
 80063a0:	080063d1 	.word	0x080063d1
 80063a4:	08006411 	.word	0x08006411
 80063a8:	080065e7 	.word	0x080065e7
 80063ac:	080065e7 	.word	0x080065e7
 80063b0:	08006587 	.word	0x08006587
 80063b4:	080065b3 	.word	0x080065b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	7c12      	ldrb	r2, [r2, #16]
 80063c4:	f107 0108 	add.w	r1, r7, #8
 80063c8:	4610      	mov	r0, r2
 80063ca:	4798      	blx	r3
 80063cc:	60f8      	str	r0, [r7, #12]
      break;
 80063ce:	e112      	b.n	80065f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	7c1b      	ldrb	r3, [r3, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10d      	bne.n	80063f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	f107 0208 	add.w	r2, r7, #8
 80063e4:	4610      	mov	r0, r2
 80063e6:	4798      	blx	r3
 80063e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3301      	adds	r3, #1
 80063ee:	2202      	movs	r2, #2
 80063f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80063f2:	e100      	b.n	80065f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	f107 0208 	add.w	r2, r7, #8
 8006400:	4610      	mov	r0, r2
 8006402:	4798      	blx	r3
 8006404:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3301      	adds	r3, #1
 800640a:	2202      	movs	r2, #2
 800640c:	701a      	strb	r2, [r3, #0]
      break;
 800640e:	e0f2      	b.n	80065f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	885b      	ldrh	r3, [r3, #2]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b05      	cmp	r3, #5
 8006418:	f200 80ac 	bhi.w	8006574 <USBD_GetDescriptor+0x204>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <USBD_GetDescriptor+0xb4>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	0800643d 	.word	0x0800643d
 8006428:	08006471 	.word	0x08006471
 800642c:	080064a5 	.word	0x080064a5
 8006430:	080064d9 	.word	0x080064d9
 8006434:	0800650d 	.word	0x0800650d
 8006438:	08006541 	.word	0x08006541
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	7c12      	ldrb	r2, [r2, #16]
 8006454:	f107 0108 	add.w	r1, r7, #8
 8006458:	4610      	mov	r0, r2
 800645a:	4798      	blx	r3
 800645c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800645e:	e091      	b.n	8006584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fab2 	bl	80069cc <USBD_CtlError>
            err++;
 8006468:	7afb      	ldrb	r3, [r7, #11]
 800646a:	3301      	adds	r3, #1
 800646c:	72fb      	strb	r3, [r7, #11]
          break;
 800646e:	e089      	b.n	8006584 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00b      	beq.n	8006494 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	7c12      	ldrb	r2, [r2, #16]
 8006488:	f107 0108 	add.w	r1, r7, #8
 800648c:	4610      	mov	r0, r2
 800648e:	4798      	blx	r3
 8006490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006492:	e077      	b.n	8006584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fa98 	bl	80069cc <USBD_CtlError>
            err++;
 800649c:	7afb      	ldrb	r3, [r7, #11]
 800649e:	3301      	adds	r3, #1
 80064a0:	72fb      	strb	r3, [r7, #11]
          break;
 80064a2:	e06f      	b.n	8006584 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	7c12      	ldrb	r2, [r2, #16]
 80064bc:	f107 0108 	add.w	r1, r7, #8
 80064c0:	4610      	mov	r0, r2
 80064c2:	4798      	blx	r3
 80064c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064c6:	e05d      	b.n	8006584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064c8:	6839      	ldr	r1, [r7, #0]
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fa7e 	bl	80069cc <USBD_CtlError>
            err++;
 80064d0:	7afb      	ldrb	r3, [r7, #11]
 80064d2:	3301      	adds	r3, #1
 80064d4:	72fb      	strb	r3, [r7, #11]
          break;
 80064d6:	e055      	b.n	8006584 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00b      	beq.n	80064fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	7c12      	ldrb	r2, [r2, #16]
 80064f0:	f107 0108 	add.w	r1, r7, #8
 80064f4:	4610      	mov	r0, r2
 80064f6:	4798      	blx	r3
 80064f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064fa:	e043      	b.n	8006584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa64 	bl	80069cc <USBD_CtlError>
            err++;
 8006504:	7afb      	ldrb	r3, [r7, #11]
 8006506:	3301      	adds	r3, #1
 8006508:	72fb      	strb	r3, [r7, #11]
          break;
 800650a:	e03b      	b.n	8006584 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	7c12      	ldrb	r2, [r2, #16]
 8006524:	f107 0108 	add.w	r1, r7, #8
 8006528:	4610      	mov	r0, r2
 800652a:	4798      	blx	r3
 800652c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800652e:	e029      	b.n	8006584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fa4a 	bl	80069cc <USBD_CtlError>
            err++;
 8006538:	7afb      	ldrb	r3, [r7, #11]
 800653a:	3301      	adds	r3, #1
 800653c:	72fb      	strb	r3, [r7, #11]
          break;
 800653e:	e021      	b.n	8006584 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	7c12      	ldrb	r2, [r2, #16]
 8006558:	f107 0108 	add.w	r1, r7, #8
 800655c:	4610      	mov	r0, r2
 800655e:	4798      	blx	r3
 8006560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006562:	e00f      	b.n	8006584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa30 	bl	80069cc <USBD_CtlError>
            err++;
 800656c:	7afb      	ldrb	r3, [r7, #11]
 800656e:	3301      	adds	r3, #1
 8006570:	72fb      	strb	r3, [r7, #11]
          break;
 8006572:	e007      	b.n	8006584 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fa28 	bl	80069cc <USBD_CtlError>
          err++;
 800657c:	7afb      	ldrb	r3, [r7, #11]
 800657e:	3301      	adds	r3, #1
 8006580:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006582:	bf00      	nop
      }
      break;
 8006584:	e037      	b.n	80065f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	7c1b      	ldrb	r3, [r3, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d109      	bne.n	80065a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006596:	f107 0208 	add.w	r2, r7, #8
 800659a:	4610      	mov	r0, r2
 800659c:	4798      	blx	r3
 800659e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065a0:	e029      	b.n	80065f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fa11 	bl	80069cc <USBD_CtlError>
        err++;
 80065aa:	7afb      	ldrb	r3, [r7, #11]
 80065ac:	3301      	adds	r3, #1
 80065ae:	72fb      	strb	r3, [r7, #11]
      break;
 80065b0:	e021      	b.n	80065f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	7c1b      	ldrb	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10d      	bne.n	80065d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	f107 0208 	add.w	r2, r7, #8
 80065c6:	4610      	mov	r0, r2
 80065c8:	4798      	blx	r3
 80065ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3301      	adds	r3, #1
 80065d0:	2207      	movs	r2, #7
 80065d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065d4:	e00f      	b.n	80065f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f9f7 	bl	80069cc <USBD_CtlError>
        err++;
 80065de:	7afb      	ldrb	r3, [r7, #11]
 80065e0:	3301      	adds	r3, #1
 80065e2:	72fb      	strb	r3, [r7, #11]
      break;
 80065e4:	e007      	b.n	80065f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f9ef 	bl	80069cc <USBD_CtlError>
      err++;
 80065ee:	7afb      	ldrb	r3, [r7, #11]
 80065f0:	3301      	adds	r3, #1
 80065f2:	72fb      	strb	r3, [r7, #11]
      break;
 80065f4:	bf00      	nop
  }

  if (err != 0U)
 80065f6:	7afb      	ldrb	r3, [r7, #11]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d11e      	bne.n	800663a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	88db      	ldrh	r3, [r3, #6]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d016      	beq.n	8006632 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006604:	893b      	ldrh	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00e      	beq.n	8006628 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	88da      	ldrh	r2, [r3, #6]
 800660e:	893b      	ldrh	r3, [r7, #8]
 8006610:	4293      	cmp	r3, r2
 8006612:	bf28      	it	cs
 8006614:	4613      	movcs	r3, r2
 8006616:	b29b      	uxth	r3, r3
 8006618:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800661a:	893b      	ldrh	r3, [r7, #8]
 800661c:	461a      	mov	r2, r3
 800661e:	68f9      	ldr	r1, [r7, #12]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fa44 	bl	8006aae <USBD_CtlSendData>
 8006626:	e009      	b.n	800663c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f9ce 	bl	80069cc <USBD_CtlError>
 8006630:	e004      	b.n	800663c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fa95 	bl	8006b62 <USBD_CtlSendStatus>
 8006638:	e000      	b.n	800663c <USBD_GetDescriptor+0x2cc>
    return;
 800663a:	bf00      	nop
  }
}
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop

08006644 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	889b      	ldrh	r3, [r3, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d131      	bne.n	80066ba <USBD_SetAddress+0x76>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	88db      	ldrh	r3, [r3, #6]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d12d      	bne.n	80066ba <USBD_SetAddress+0x76>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	885b      	ldrh	r3, [r3, #2]
 8006662:	2b7f      	cmp	r3, #127	; 0x7f
 8006664:	d829      	bhi.n	80066ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	885b      	ldrh	r3, [r3, #2]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006670:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b03      	cmp	r3, #3
 800667c:	d104      	bne.n	8006688 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f9a3 	bl	80069cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006686:	e01d      	b.n	80066c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	7bfa      	ldrb	r2, [r7, #15]
 800668c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fe3b 	bl	8007310 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fa61 	bl	8006b62 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d004      	beq.n	80066b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2202      	movs	r2, #2
 80066aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ae:	e009      	b.n	80066c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066b8:	e004      	b.n	80066c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f985 	bl	80069cc <USBD_CtlError>
  }
}
 80066c2:	bf00      	nop
 80066c4:	bf00      	nop
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	885b      	ldrh	r3, [r3, #2]
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	4b4c      	ldr	r3, [pc, #304]	; (8006814 <USBD_SetConfig+0x148>)
 80066e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80066e4:	4b4b      	ldr	r3, [pc, #300]	; (8006814 <USBD_SetConfig+0x148>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d905      	bls.n	80066f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f96c 	bl	80069cc <USBD_CtlError>
    return USBD_FAIL;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e088      	b.n	800680a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b02      	cmp	r3, #2
 8006702:	d002      	beq.n	800670a <USBD_SetConfig+0x3e>
 8006704:	2b03      	cmp	r3, #3
 8006706:	d025      	beq.n	8006754 <USBD_SetConfig+0x88>
 8006708:	e071      	b.n	80067ee <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800670a:	4b42      	ldr	r3, [pc, #264]	; (8006814 <USBD_SetConfig+0x148>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d01c      	beq.n	800674c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006712:	4b40      	ldr	r3, [pc, #256]	; (8006814 <USBD_SetConfig+0x148>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800671c:	4b3d      	ldr	r3, [pc, #244]	; (8006814 <USBD_SetConfig+0x148>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7ff f949 	bl	80059ba <USBD_SetClassConfig>
 8006728:	4603      	mov	r3, r0
 800672a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f949 	bl	80069cc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800673a:	e065      	b.n	8006808 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fa10 	bl	8006b62 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2203      	movs	r2, #3
 8006746:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800674a:	e05d      	b.n	8006808 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fa08 	bl	8006b62 <USBD_CtlSendStatus>
      break;
 8006752:	e059      	b.n	8006808 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006754:	4b2f      	ldr	r3, [pc, #188]	; (8006814 <USBD_SetConfig+0x148>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d112      	bne.n	8006782 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006764:	4b2b      	ldr	r3, [pc, #172]	; (8006814 <USBD_SetConfig+0x148>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	461a      	mov	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800676e:	4b29      	ldr	r3, [pc, #164]	; (8006814 <USBD_SetConfig+0x148>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7ff f93c 	bl	80059f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f9f1 	bl	8006b62 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006780:	e042      	b.n	8006808 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006782:	4b24      	ldr	r3, [pc, #144]	; (8006814 <USBD_SetConfig+0x148>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	429a      	cmp	r2, r3
 800678e:	d02a      	beq.n	80067e6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	b2db      	uxtb	r3, r3
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff f92a 	bl	80059f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800679e:	4b1d      	ldr	r3, [pc, #116]	; (8006814 <USBD_SetConfig+0x148>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80067a8:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <USBD_SetConfig+0x148>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff f903 	bl	80059ba <USBD_SetClassConfig>
 80067b4:	4603      	mov	r3, r0
 80067b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00f      	beq.n	80067de <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f903 	bl	80069cc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7ff f90f 	bl	80059f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80067dc:	e014      	b.n	8006808 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f9bf 	bl	8006b62 <USBD_CtlSendStatus>
      break;
 80067e4:	e010      	b.n	8006808 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f9bb 	bl	8006b62 <USBD_CtlSendStatus>
      break;
 80067ec:	e00c      	b.n	8006808 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f8eb 	bl	80069cc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80067f6:	4b07      	ldr	r3, [pc, #28]	; (8006814 <USBD_SetConfig+0x148>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7ff f8f8 	bl	80059f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006802:	2303      	movs	r3, #3
 8006804:	73fb      	strb	r3, [r7, #15]
      break;
 8006806:	bf00      	nop
  }

  return ret;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000478 	.word	0x20000478

08006818 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	88db      	ldrh	r3, [r3, #6]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d004      	beq.n	8006834 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f8cd 	bl	80069cc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006832:	e023      	b.n	800687c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	dc02      	bgt.n	8006846 <USBD_GetConfig+0x2e>
 8006840:	2b00      	cmp	r3, #0
 8006842:	dc03      	bgt.n	800684c <USBD_GetConfig+0x34>
 8006844:	e015      	b.n	8006872 <USBD_GetConfig+0x5a>
 8006846:	2b03      	cmp	r3, #3
 8006848:	d00b      	beq.n	8006862 <USBD_GetConfig+0x4a>
 800684a:	e012      	b.n	8006872 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	3308      	adds	r3, #8
 8006856:	2201      	movs	r2, #1
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f927 	bl	8006aae <USBD_CtlSendData>
        break;
 8006860:	e00c      	b.n	800687c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3304      	adds	r3, #4
 8006866:	2201      	movs	r2, #1
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f91f 	bl	8006aae <USBD_CtlSendData>
        break;
 8006870:	e004      	b.n	800687c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f8a9 	bl	80069cc <USBD_CtlError>
        break;
 800687a:	bf00      	nop
}
 800687c:	bf00      	nop
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006894:	b2db      	uxtb	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	2b02      	cmp	r3, #2
 800689a:	d81e      	bhi.n	80068da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	88db      	ldrh	r3, [r3, #6]
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d004      	beq.n	80068ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f890 	bl	80069cc <USBD_CtlError>
        break;
 80068ac:	e01a      	b.n	80068e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d005      	beq.n	80068ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f043 0202 	orr.w	r2, r3, #2
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	330c      	adds	r3, #12
 80068ce:	2202      	movs	r2, #2
 80068d0:	4619      	mov	r1, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f8eb 	bl	8006aae <USBD_CtlSendData>
      break;
 80068d8:	e004      	b.n	80068e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f875 	bl	80069cc <USBD_CtlError>
      break;
 80068e2:	bf00      	nop
  }
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	885b      	ldrh	r3, [r3, #2]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d106      	bne.n	800690c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f92b 	bl	8006b62 <USBD_CtlSendStatus>
  }
}
 800690c:	bf00      	nop
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006924:	b2db      	uxtb	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	2b02      	cmp	r3, #2
 800692a:	d80b      	bhi.n	8006944 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	885b      	ldrh	r3, [r3, #2]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d10c      	bne.n	800694e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f910 	bl	8006b62 <USBD_CtlSendStatus>
      }
      break;
 8006942:	e004      	b.n	800694e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f840 	bl	80069cc <USBD_CtlError>
      break;
 800694c:	e000      	b.n	8006950 <USBD_ClrFeature+0x3c>
      break;
 800694e:	bf00      	nop
  }
}
 8006950:	bf00      	nop
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	781a      	ldrb	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3301      	adds	r3, #1
 8006972:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	781a      	ldrb	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3301      	adds	r3, #1
 8006980:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff fabc 	bl	8005f00 <SWAPBYTE>
 8006988:	4603      	mov	r3, r0
 800698a:	461a      	mov	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3301      	adds	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3301      	adds	r3, #1
 800699a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7ff faaf 	bl	8005f00 <SWAPBYTE>
 80069a2:	4603      	mov	r3, r0
 80069a4:	461a      	mov	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	3301      	adds	r3, #1
 80069ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f7ff faa2 	bl	8005f00 <SWAPBYTE>
 80069bc:	4603      	mov	r3, r0
 80069be:	461a      	mov	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	80da      	strh	r2, [r3, #6]
}
 80069c4:	bf00      	nop
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80069d6:	2180      	movs	r1, #128	; 0x80
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fc2f 	bl	800723c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80069de:	2100      	movs	r1, #0
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fc2b 	bl	800723c <USBD_LL_StallEP>
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b086      	sub	sp, #24
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d036      	beq.n	8006a72 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006a08:	6938      	ldr	r0, [r7, #16]
 8006a0a:	f000 f836 	bl	8006a7a <USBD_GetLen>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	3301      	adds	r3, #1
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4413      	add	r3, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	7812      	ldrb	r2, [r2, #0]
 8006a26:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	4413      	add	r3, r2
 8006a34:	2203      	movs	r2, #3
 8006a36:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a3e:	e013      	b.n	8006a68 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	4413      	add	r3, r2
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	7812      	ldrb	r2, [r2, #0]
 8006a4a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	613b      	str	r3, [r7, #16]
    idx++;
 8006a52:	7dfb      	ldrb	r3, [r7, #23]
 8006a54:	3301      	adds	r3, #1
 8006a56:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	2200      	movs	r2, #0
 8006a60:	701a      	strb	r2, [r3, #0]
    idx++;
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
 8006a64:	3301      	adds	r3, #1
 8006a66:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1e7      	bne.n	8006a40 <USBD_GetString+0x52>
 8006a70:	e000      	b.n	8006a74 <USBD_GetString+0x86>
    return;
 8006a72:	bf00      	nop
  }
}
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a8a:	e005      	b.n	8006a98 <USBD_GetLen+0x1e>
  {
    len++;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	3301      	adds	r3, #1
 8006a96:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1f5      	bne.n	8006a8c <USBD_GetLen+0x12>
  }

  return len;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2202      	movs	r2, #2
 8006abe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 fc3a 	bl	800734e <USBD_LL_Transmit>

  return USBD_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	2100      	movs	r1, #0
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 fc29 	bl	800734e <USBD_LL_Transmit>

  return USBD_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2203      	movs	r2, #3
 8006b16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	2100      	movs	r1, #0
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 fc2d 	bl	8007390 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	2100      	movs	r1, #0
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 fc1c 	bl	8007390 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2204      	movs	r2, #4
 8006b6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b72:	2300      	movs	r3, #0
 8006b74:	2200      	movs	r2, #0
 8006b76:	2100      	movs	r1, #0
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fbe8 	bl	800734e <USBD_LL_Transmit>

  return USBD_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2205      	movs	r2, #5
 8006b94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fbf6 	bl	8007390 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4912      	ldr	r1, [pc, #72]	; (8006c00 <MX_USB_DEVICE_Init+0x50>)
 8006bb8:	4812      	ldr	r0, [pc, #72]	; (8006c04 <MX_USB_DEVICE_Init+0x54>)
 8006bba:	f7fe fe90 	bl	80058de <USBD_Init>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006bc4:	f7fa fa40 	bl	8001048 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006bc8:	490f      	ldr	r1, [pc, #60]	; (8006c08 <MX_USB_DEVICE_Init+0x58>)
 8006bca:	480e      	ldr	r0, [pc, #56]	; (8006c04 <MX_USB_DEVICE_Init+0x54>)
 8006bcc:	f7fe feb7 	bl	800593e <USBD_RegisterClass>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006bd6:	f7fa fa37 	bl	8001048 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006bda:	490c      	ldr	r1, [pc, #48]	; (8006c0c <MX_USB_DEVICE_Init+0x5c>)
 8006bdc:	4809      	ldr	r0, [pc, #36]	; (8006c04 <MX_USB_DEVICE_Init+0x54>)
 8006bde:	f7fe fe69 	bl	80058b4 <USBD_CUSTOM_HID_RegisterInterface>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006be8:	f7fa fa2e 	bl	8001048 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006bec:	4805      	ldr	r0, [pc, #20]	; (8006c04 <MX_USB_DEVICE_Init+0x54>)
 8006bee:	f7fe fecd 	bl	800598c <USBD_Start>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006bf8:	f7fa fa26 	bl	8001048 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006bfc:	bf00      	nop
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	20000304 	.word	0x20000304
 8006c04:	200004e4 	.word	0x200004e4
 8006c08:	2000000c 	.word	0x2000000c
 8006c0c:	200002f4 	.word	0x200002f4

08006c10 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006c20:	b480      	push	{r7}
 8006c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006c24:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS( uint8_t* state)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
//memcpy(buffer,state,64);

	//USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,buffer,64);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8006c38:	4803      	ldr	r0, [pc, #12]	; (8006c48 <CUSTOM_HID_OutEvent_FS+0x18>)
 8006c3a:	f7fe fdf1 	bl	8005820 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 8006c3e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	200004e4 	.word	0x200004e4

08006c4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	6039      	str	r1, [r7, #0]
 8006c56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2212      	movs	r2, #18
 8006c5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006c5e:	4b03      	ldr	r3, [pc, #12]	; (8006c6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	20000320 	.word	0x20000320

08006c70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	4603      	mov	r3, r0
 8006c78:	6039      	str	r1, [r7, #0]
 8006c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2204      	movs	r2, #4
 8006c80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006c82:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	20000334 	.word	0x20000334

08006c94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	6039      	str	r1, [r7, #0]
 8006c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d105      	bne.n	8006cb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	4907      	ldr	r1, [pc, #28]	; (8006cc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006caa:	4808      	ldr	r0, [pc, #32]	; (8006ccc <USBD_FS_ProductStrDescriptor+0x38>)
 8006cac:	f7ff fe9f 	bl	80069ee <USBD_GetString>
 8006cb0:	e004      	b.n	8006cbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	4904      	ldr	r1, [pc, #16]	; (8006cc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006cb6:	4805      	ldr	r0, [pc, #20]	; (8006ccc <USBD_FS_ProductStrDescriptor+0x38>)
 8006cb8:	f7ff fe99 	bl	80069ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8006cbc:	4b02      	ldr	r3, [pc, #8]	; (8006cc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	200007b4 	.word	0x200007b4
 8006ccc:	08007780 	.word	0x08007780

08006cd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	6039      	str	r1, [r7, #0]
 8006cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	4904      	ldr	r1, [pc, #16]	; (8006cf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006ce0:	4804      	ldr	r0, [pc, #16]	; (8006cf4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ce2:	f7ff fe84 	bl	80069ee <USBD_GetString>
  return USBD_StrDesc;
 8006ce6:	4b02      	ldr	r3, [pc, #8]	; (8006cf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	200007b4 	.word	0x200007b4
 8006cf4:	0800778c 	.word	0x0800778c

08006cf8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	6039      	str	r1, [r7, #0]
 8006d02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	221a      	movs	r2, #26
 8006d08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d0a:	f000 f843 	bl	8006d94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d0e:	4b02      	ldr	r3, [pc, #8]	; (8006d18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20000338 	.word	0x20000338

08006d1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	6039      	str	r1, [r7, #0]
 8006d26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d105      	bne.n	8006d3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	4907      	ldr	r1, [pc, #28]	; (8006d50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d32:	4808      	ldr	r0, [pc, #32]	; (8006d54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d34:	f7ff fe5b 	bl	80069ee <USBD_GetString>
 8006d38:	e004      	b.n	8006d44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	4904      	ldr	r1, [pc, #16]	; (8006d50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d3e:	4805      	ldr	r0, [pc, #20]	; (8006d54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d40:	f7ff fe55 	bl	80069ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d44:	4b02      	ldr	r3, [pc, #8]	; (8006d50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	200007b4 	.word	0x200007b4
 8006d54:	0800779c 	.word	0x0800779c

08006d58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	6039      	str	r1, [r7, #0]
 8006d62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d105      	bne.n	8006d76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	4907      	ldr	r1, [pc, #28]	; (8006d8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d6e:	4808      	ldr	r0, [pc, #32]	; (8006d90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d70:	f7ff fe3d 	bl	80069ee <USBD_GetString>
 8006d74:	e004      	b.n	8006d80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	4904      	ldr	r1, [pc, #16]	; (8006d8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d7a:	4805      	ldr	r0, [pc, #20]	; (8006d90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d7c:	f7ff fe37 	bl	80069ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d80:	4b02      	ldr	r3, [pc, #8]	; (8006d8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	200007b4 	.word	0x200007b4
 8006d90:	080077b0 	.word	0x080077b0

08006d94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006d9a:	4b0f      	ldr	r3, [pc, #60]	; (8006dd8 <Get_SerialNum+0x44>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006da0:	4b0e      	ldr	r3, [pc, #56]	; (8006ddc <Get_SerialNum+0x48>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006da6:	4b0e      	ldr	r3, [pc, #56]	; (8006de0 <Get_SerialNum+0x4c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4413      	add	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d009      	beq.n	8006dce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006dba:	2208      	movs	r2, #8
 8006dbc:	4909      	ldr	r1, [pc, #36]	; (8006de4 <Get_SerialNum+0x50>)
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 f814 	bl	8006dec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	4908      	ldr	r1, [pc, #32]	; (8006de8 <Get_SerialNum+0x54>)
 8006dc8:	68b8      	ldr	r0, [r7, #8]
 8006dca:	f000 f80f 	bl	8006dec <IntToUnicode>
  }
}
 8006dce:	bf00      	nop
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	1fff7a10 	.word	0x1fff7a10
 8006ddc:	1fff7a14 	.word	0x1fff7a14
 8006de0:	1fff7a18 	.word	0x1fff7a18
 8006de4:	2000033a 	.word	0x2000033a
 8006de8:	2000034a 	.word	0x2000034a

08006dec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	4613      	mov	r3, r2
 8006df8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006dfe:	2300      	movs	r3, #0
 8006e00:	75fb      	strb	r3, [r7, #23]
 8006e02:	e027      	b.n	8006e54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	0f1b      	lsrs	r3, r3, #28
 8006e08:	2b09      	cmp	r3, #9
 8006e0a:	d80b      	bhi.n	8006e24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	0f1b      	lsrs	r3, r3, #28
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	7dfb      	ldrb	r3, [r7, #23]
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	4619      	mov	r1, r3
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	440b      	add	r3, r1
 8006e1c:	3230      	adds	r2, #48	; 0x30
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	e00a      	b.n	8006e3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	0f1b      	lsrs	r3, r3, #28
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	4619      	mov	r1, r3
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	440b      	add	r3, r1
 8006e34:	3237      	adds	r2, #55	; 0x37
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
 8006e42:	005b      	lsls	r3, r3, #1
 8006e44:	3301      	adds	r3, #1
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	4413      	add	r3, r2
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
 8006e50:	3301      	adds	r3, #1
 8006e52:	75fb      	strb	r3, [r7, #23]
 8006e54:	7dfa      	ldrb	r2, [r7, #23]
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d3d3      	bcc.n	8006e04 <IntToUnicode+0x18>
  }
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
	...

08006e6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08a      	sub	sp, #40	; 0x28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e74:	f107 0314 	add.w	r3, r7, #20
 8006e78:	2200      	movs	r2, #0
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	605a      	str	r2, [r3, #4]
 8006e7e:	609a      	str	r2, [r3, #8]
 8006e80:	60da      	str	r2, [r3, #12]
 8006e82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e8c:	d13a      	bne.n	8006f04 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e8e:	2300      	movs	r3, #0
 8006e90:	613b      	str	r3, [r7, #16]
 8006e92:	4b1e      	ldr	r3, [pc, #120]	; (8006f0c <HAL_PCD_MspInit+0xa0>)
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e96:	4a1d      	ldr	r2, [pc, #116]	; (8006f0c <HAL_PCD_MspInit+0xa0>)
 8006e98:	f043 0301 	orr.w	r3, r3, #1
 8006e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e9e:	4b1b      	ldr	r3, [pc, #108]	; (8006f0c <HAL_PCD_MspInit+0xa0>)
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	613b      	str	r3, [r7, #16]
 8006ea8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006eaa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ebc:	230a      	movs	r3, #10
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ec0:	f107 0314 	add.w	r3, r7, #20
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4812      	ldr	r0, [pc, #72]	; (8006f10 <HAL_PCD_MspInit+0xa4>)
 8006ec8:	f7fa fea6 	bl	8001c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ecc:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <HAL_PCD_MspInit+0xa0>)
 8006ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed0:	4a0e      	ldr	r2, [pc, #56]	; (8006f0c <HAL_PCD_MspInit+0xa0>)
 8006ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed6:	6353      	str	r3, [r2, #52]	; 0x34
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <HAL_PCD_MspInit+0xa0>)
 8006ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee0:	4a0a      	ldr	r2, [pc, #40]	; (8006f0c <HAL_PCD_MspInit+0xa0>)
 8006ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ee6:	6453      	str	r3, [r2, #68]	; 0x44
 8006ee8:	4b08      	ldr	r3, [pc, #32]	; (8006f0c <HAL_PCD_MspInit+0xa0>)
 8006eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	2043      	movs	r0, #67	; 0x43
 8006efa:	f7fa fe56 	bl	8001baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006efe:	2043      	movs	r0, #67	; 0x43
 8006f00:	f7fa fe6f 	bl	8001be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f04:	bf00      	nop
 8006f06:	3728      	adds	r7, #40	; 0x28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	40020000 	.word	0x40020000

08006f14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	f7fe fd79 	bl	8005a22 <USBD_LL_SetupStage>
}
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006f4a:	78fa      	ldrb	r2, [r7, #3]
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	1a9b      	subs	r3, r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	78fb      	ldrb	r3, [r7, #3]
 8006f60:	4619      	mov	r1, r3
 8006f62:	f7fe fdb3 	bl	8005acc <USBD_LL_DataOutStage>
}
 8006f66:	bf00      	nop
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	460b      	mov	r3, r1
 8006f78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006f80:	78fa      	ldrb	r2, [r7, #3]
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	4613      	mov	r3, r2
 8006f86:	00db      	lsls	r3, r3, #3
 8006f88:	1a9b      	subs	r3, r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	440b      	add	r3, r1
 8006f8e:	3348      	adds	r3, #72	; 0x48
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	78fb      	ldrb	r3, [r7, #3]
 8006f94:	4619      	mov	r1, r3
 8006f96:	f7fe fdfc 	bl	8005b92 <USBD_LL_DataInStage>
}
 8006f9a:	bf00      	nop
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b082      	sub	sp, #8
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fe ff10 	bl	8005dd6 <USBD_LL_SOF>
}
 8006fb6:	bf00      	nop
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d001      	beq.n	8006fd6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006fd2:	f7fa f839 	bl	8001048 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fdc:	7bfa      	ldrb	r2, [r7, #15]
 8006fde:	4611      	mov	r1, r2
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fe feba 	bl	8005d5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fe fe66 	bl	8005cbe <USBD_LL_Reset>
}
 8006ff2:	bf00      	nop
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800700a:	4618      	mov	r0, r3
 800700c:	f7fe feb5 	bl	8005d7a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6812      	ldr	r2, [r2, #0]
 800701e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007022:	f043 0301 	orr.w	r3, r3, #1
 8007026:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007030:	4b04      	ldr	r3, [pc, #16]	; (8007044 <HAL_PCD_SuspendCallback+0x48>)
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	4a03      	ldr	r2, [pc, #12]	; (8007044 <HAL_PCD_SuspendCallback+0x48>)
 8007036:	f043 0306 	orr.w	r3, r3, #6
 800703a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800703c:	bf00      	nop
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	e000ed00 	.word	0xe000ed00

08007048 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fea5 	bl	8005da6 <USBD_LL_Resume>
}
 800705c:	bf00      	nop
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	460b      	mov	r3, r1
 800706e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007076:	78fa      	ldrb	r2, [r7, #3]
 8007078:	4611      	mov	r1, r2
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe fef3 	bl	8005e66 <USBD_LL_IsoOUTIncomplete>
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	460b      	mov	r3, r1
 8007092:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800709a:	78fa      	ldrb	r2, [r7, #3]
 800709c:	4611      	mov	r1, r2
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe febb 	bl	8005e1a <USBD_LL_IsoINIncomplete>
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe fef9 	bl	8005eb2 <USBD_LL_DevConnected>
}
 80070c0:	bf00      	nop
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fe fef6 	bl	8005ec8 <USBD_LL_DevDisconnected>
}
 80070dc:	bf00      	nop
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d13c      	bne.n	800716e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80070f4:	4a20      	ldr	r2, [pc, #128]	; (8007178 <USBD_LL_Init+0x94>)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a1e      	ldr	r2, [pc, #120]	; (8007178 <USBD_LL_Init+0x94>)
 8007100:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007104:	4b1c      	ldr	r3, [pc, #112]	; (8007178 <USBD_LL_Init+0x94>)
 8007106:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800710a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800710c:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <USBD_LL_Init+0x94>)
 800710e:	2204      	movs	r2, #4
 8007110:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007112:	4b19      	ldr	r3, [pc, #100]	; (8007178 <USBD_LL_Init+0x94>)
 8007114:	2202      	movs	r2, #2
 8007116:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007118:	4b17      	ldr	r3, [pc, #92]	; (8007178 <USBD_LL_Init+0x94>)
 800711a:	2200      	movs	r2, #0
 800711c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800711e:	4b16      	ldr	r3, [pc, #88]	; (8007178 <USBD_LL_Init+0x94>)
 8007120:	2202      	movs	r2, #2
 8007122:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007124:	4b14      	ldr	r3, [pc, #80]	; (8007178 <USBD_LL_Init+0x94>)
 8007126:	2200      	movs	r2, #0
 8007128:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800712a:	4b13      	ldr	r3, [pc, #76]	; (8007178 <USBD_LL_Init+0x94>)
 800712c:	2200      	movs	r2, #0
 800712e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007130:	4b11      	ldr	r3, [pc, #68]	; (8007178 <USBD_LL_Init+0x94>)
 8007132:	2200      	movs	r2, #0
 8007134:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007136:	4b10      	ldr	r3, [pc, #64]	; (8007178 <USBD_LL_Init+0x94>)
 8007138:	2200      	movs	r2, #0
 800713a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800713c:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <USBD_LL_Init+0x94>)
 800713e:	2200      	movs	r2, #0
 8007140:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007142:	480d      	ldr	r0, [pc, #52]	; (8007178 <USBD_LL_Init+0x94>)
 8007144:	f7fb f84a 	bl	80021dc <HAL_PCD_Init>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800714e:	f7f9 ff7b 	bl	8001048 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007152:	2180      	movs	r1, #128	; 0x80
 8007154:	4808      	ldr	r0, [pc, #32]	; (8007178 <USBD_LL_Init+0x94>)
 8007156:	f7fc f9a8 	bl	80034aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800715a:	2240      	movs	r2, #64	; 0x40
 800715c:	2100      	movs	r1, #0
 800715e:	4806      	ldr	r0, [pc, #24]	; (8007178 <USBD_LL_Init+0x94>)
 8007160:	f7fc f95c 	bl	800341c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007164:	2280      	movs	r2, #128	; 0x80
 8007166:	2101      	movs	r1, #1
 8007168:	4803      	ldr	r0, [pc, #12]	; (8007178 <USBD_LL_Init+0x94>)
 800716a:	f7fc f957 	bl	800341c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	200009b4 	.word	0x200009b4

0800717c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007192:	4618      	mov	r0, r3
 8007194:	f7fb f93f 	bl	8002416 <HAL_PCD_Start>
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 f942 	bl	8007428 <USBD_Get_USB_Status>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	4608      	mov	r0, r1
 80071bc:	4611      	mov	r1, r2
 80071be:	461a      	mov	r2, r3
 80071c0:	4603      	mov	r3, r0
 80071c2:	70fb      	strb	r3, [r7, #3]
 80071c4:	460b      	mov	r3, r1
 80071c6:	70bb      	strb	r3, [r7, #2]
 80071c8:	4613      	mov	r3, r2
 80071ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80071da:	78bb      	ldrb	r3, [r7, #2]
 80071dc:	883a      	ldrh	r2, [r7, #0]
 80071de:	78f9      	ldrb	r1, [r7, #3]
 80071e0:	f7fb fd23 	bl	8002c2a <HAL_PCD_EP_Open>
 80071e4:	4603      	mov	r3, r0
 80071e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 f91c 	bl	8007428 <USBD_Get_USB_Status>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	460b      	mov	r3, r1
 8007208:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007218:	78fa      	ldrb	r2, [r7, #3]
 800721a:	4611      	mov	r1, r2
 800721c:	4618      	mov	r0, r3
 800721e:	f7fb fd6c 	bl	8002cfa <HAL_PCD_EP_Close>
 8007222:	4603      	mov	r3, r0
 8007224:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	4618      	mov	r0, r3
 800722a:	f000 f8fd 	bl	8007428 <USBD_Get_USB_Status>
 800722e:	4603      	mov	r3, r0
 8007230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007232:	7bbb      	ldrb	r3, [r7, #14]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007256:	78fa      	ldrb	r2, [r7, #3]
 8007258:	4611      	mov	r1, r2
 800725a:	4618      	mov	r0, r3
 800725c:	f7fb fe44 	bl	8002ee8 <HAL_PCD_EP_SetStall>
 8007260:	4603      	mov	r3, r0
 8007262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	4618      	mov	r0, r3
 8007268:	f000 f8de 	bl	8007428 <USBD_Get_USB_Status>
 800726c:	4603      	mov	r3, r0
 800726e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007270:	7bbb      	ldrb	r3, [r7, #14]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	460b      	mov	r3, r1
 8007284:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007294:	78fa      	ldrb	r2, [r7, #3]
 8007296:	4611      	mov	r1, r2
 8007298:	4618      	mov	r0, r3
 800729a:	f7fb fe89 	bl	8002fb0 <HAL_PCD_EP_ClrStall>
 800729e:	4603      	mov	r3, r0
 80072a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 f8bf 	bl	8007428 <USBD_Get_USB_Status>
 80072aa:	4603      	mov	r3, r0
 80072ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80072cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	da0b      	bge.n	80072ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072da:	68f9      	ldr	r1, [r7, #12]
 80072dc:	4613      	mov	r3, r2
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	1a9b      	subs	r3, r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	333e      	adds	r3, #62	; 0x3e
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	e00b      	b.n	8007304 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80072ec:	78fb      	ldrb	r3, [r7, #3]
 80072ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072f2:	68f9      	ldr	r1, [r7, #12]
 80072f4:	4613      	mov	r3, r2
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	1a9b      	subs	r3, r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	440b      	add	r3, r1
 80072fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007302:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800732a:	78fa      	ldrb	r2, [r7, #3]
 800732c:	4611      	mov	r1, r2
 800732e:	4618      	mov	r0, r3
 8007330:	f7fb fc56 	bl	8002be0 <HAL_PCD_SetAddress>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 f874 	bl	8007428 <USBD_Get_USB_Status>
 8007340:	4603      	mov	r3, r0
 8007342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007344:	7bbb      	ldrb	r3, [r7, #14]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b086      	sub	sp, #24
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
 800735a:	460b      	mov	r3, r1
 800735c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800736c:	7af9      	ldrb	r1, [r7, #11]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	f7fb fd6f 	bl	8002e54 <HAL_PCD_EP_Transmit>
 8007376:	4603      	mov	r3, r0
 8007378:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 f853 	bl	8007428 <USBD_Get_USB_Status>
 8007382:	4603      	mov	r3, r0
 8007384:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007386:	7dbb      	ldrb	r3, [r7, #22]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	607a      	str	r2, [r7, #4]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	460b      	mov	r3, r1
 800739e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80073ae:	7af9      	ldrb	r1, [r7, #11]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	f7fb fceb 	bl	8002d8e <HAL_PCD_EP_Receive>
 80073b8:	4603      	mov	r3, r0
 80073ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073bc:	7dfb      	ldrb	r3, [r7, #23]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 f832 	bl	8007428 <USBD_Get_USB_Status>
 80073c4:	4603      	mov	r3, r0
 80073c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80073c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b082      	sub	sp, #8
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	460b      	mov	r3, r1
 80073dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073e4:	78fa      	ldrb	r2, [r7, #3]
 80073e6:	4611      	mov	r1, r2
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fb fd1b 	bl	8002e24 <HAL_PCD_EP_GetRxCount>
 80073ee:	4603      	mov	r3, r0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007400:	4b03      	ldr	r3, [pc, #12]	; (8007410 <USBD_static_malloc+0x18>)
}
 8007402:	4618      	mov	r0, r3
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	2000047c 	.word	0x2000047c

08007414 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]

}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	4603      	mov	r3, r0
 8007430:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	2b03      	cmp	r3, #3
 800743a:	d817      	bhi.n	800746c <USBD_Get_USB_Status+0x44>
 800743c:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <USBD_Get_USB_Status+0x1c>)
 800743e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007442:	bf00      	nop
 8007444:	08007455 	.word	0x08007455
 8007448:	0800745b 	.word	0x0800745b
 800744c:	08007461 	.word	0x08007461
 8007450:	08007467 	.word	0x08007467
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	73fb      	strb	r3, [r7, #15]
    break;
 8007458:	e00b      	b.n	8007472 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800745a:	2303      	movs	r3, #3
 800745c:	73fb      	strb	r3, [r7, #15]
    break;
 800745e:	e008      	b.n	8007472 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007460:	2301      	movs	r3, #1
 8007462:	73fb      	strb	r3, [r7, #15]
    break;
 8007464:	e005      	b.n	8007472 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007466:	2303      	movs	r3, #3
 8007468:	73fb      	strb	r3, [r7, #15]
    break;
 800746a:	e002      	b.n	8007472 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800746c:	2303      	movs	r3, #3
 800746e:	73fb      	strb	r3, [r7, #15]
    break;
 8007470:	bf00      	nop
  }
  return usb_status;
 8007472:	7bfb      	ldrb	r3, [r7, #15]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <_ZdlPvj>:
 8007480:	f000 b811 	b.w	80074a6 <_ZdlPv>

08007484 <_Znwj>:
 8007484:	2801      	cmp	r0, #1
 8007486:	bf38      	it	cc
 8007488:	2001      	movcc	r0, #1
 800748a:	b510      	push	{r4, lr}
 800748c:	4604      	mov	r4, r0
 800748e:	4620      	mov	r0, r4
 8007490:	f000 f846 	bl	8007520 <malloc>
 8007494:	b930      	cbnz	r0, 80074a4 <_Znwj+0x20>
 8007496:	f000 f809 	bl	80074ac <_ZSt15get_new_handlerv>
 800749a:	b908      	cbnz	r0, 80074a0 <_Znwj+0x1c>
 800749c:	f000 f80e 	bl	80074bc <abort>
 80074a0:	4780      	blx	r0
 80074a2:	e7f4      	b.n	800748e <_Znwj+0xa>
 80074a4:	bd10      	pop	{r4, pc}

080074a6 <_ZdlPv>:
 80074a6:	f000 b843 	b.w	8007530 <free>
	...

080074ac <_ZSt15get_new_handlerv>:
 80074ac:	4b02      	ldr	r3, [pc, #8]	; (80074b8 <_ZSt15get_new_handlerv+0xc>)
 80074ae:	6818      	ldr	r0, [r3, #0]
 80074b0:	f3bf 8f5b 	dmb	ish
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	200004d4 	.word	0x200004d4

080074bc <abort>:
 80074bc:	b508      	push	{r3, lr}
 80074be:	2006      	movs	r0, #6
 80074c0:	f000 f928 	bl	8007714 <raise>
 80074c4:	2001      	movs	r0, #1
 80074c6:	f7f9 fec5 	bl	8001254 <_exit>
	...

080074cc <__errno>:
 80074cc:	4b01      	ldr	r3, [pc, #4]	; (80074d4 <__errno+0x8>)
 80074ce:	6818      	ldr	r0, [r3, #0]
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	20000354 	.word	0x20000354

080074d8 <__libc_init_array>:
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	4d0d      	ldr	r5, [pc, #52]	; (8007510 <__libc_init_array+0x38>)
 80074dc:	4c0d      	ldr	r4, [pc, #52]	; (8007514 <__libc_init_array+0x3c>)
 80074de:	1b64      	subs	r4, r4, r5
 80074e0:	10a4      	asrs	r4, r4, #2
 80074e2:	2600      	movs	r6, #0
 80074e4:	42a6      	cmp	r6, r4
 80074e6:	d109      	bne.n	80074fc <__libc_init_array+0x24>
 80074e8:	4d0b      	ldr	r5, [pc, #44]	; (8007518 <__libc_init_array+0x40>)
 80074ea:	4c0c      	ldr	r4, [pc, #48]	; (800751c <__libc_init_array+0x44>)
 80074ec:	f000 f93c 	bl	8007768 <_init>
 80074f0:	1b64      	subs	r4, r4, r5
 80074f2:	10a4      	asrs	r4, r4, #2
 80074f4:	2600      	movs	r6, #0
 80074f6:	42a6      	cmp	r6, r4
 80074f8:	d105      	bne.n	8007506 <__libc_init_array+0x2e>
 80074fa:	bd70      	pop	{r4, r5, r6, pc}
 80074fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007500:	4798      	blx	r3
 8007502:	3601      	adds	r6, #1
 8007504:	e7ee      	b.n	80074e4 <__libc_init_array+0xc>
 8007506:	f855 3b04 	ldr.w	r3, [r5], #4
 800750a:	4798      	blx	r3
 800750c:	3601      	adds	r6, #1
 800750e:	e7f2      	b.n	80074f6 <__libc_init_array+0x1e>
 8007510:	08007844 	.word	0x08007844
 8007514:	08007844 	.word	0x08007844
 8007518:	08007844 	.word	0x08007844
 800751c:	08007848 	.word	0x08007848

08007520 <malloc>:
 8007520:	4b02      	ldr	r3, [pc, #8]	; (800752c <malloc+0xc>)
 8007522:	4601      	mov	r1, r0
 8007524:	6818      	ldr	r0, [r3, #0]
 8007526:	f000 b863 	b.w	80075f0 <_malloc_r>
 800752a:	bf00      	nop
 800752c:	20000354 	.word	0x20000354

08007530 <free>:
 8007530:	4b02      	ldr	r3, [pc, #8]	; (800753c <free+0xc>)
 8007532:	4601      	mov	r1, r0
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	f000 b80b 	b.w	8007550 <_free_r>
 800753a:	bf00      	nop
 800753c:	20000354 	.word	0x20000354

08007540 <memset>:
 8007540:	4402      	add	r2, r0
 8007542:	4603      	mov	r3, r0
 8007544:	4293      	cmp	r3, r2
 8007546:	d100      	bne.n	800754a <memset+0xa>
 8007548:	4770      	bx	lr
 800754a:	f803 1b01 	strb.w	r1, [r3], #1
 800754e:	e7f9      	b.n	8007544 <memset+0x4>

08007550 <_free_r>:
 8007550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007552:	2900      	cmp	r1, #0
 8007554:	d048      	beq.n	80075e8 <_free_r+0x98>
 8007556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800755a:	9001      	str	r0, [sp, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	f1a1 0404 	sub.w	r4, r1, #4
 8007562:	bfb8      	it	lt
 8007564:	18e4      	addlt	r4, r4, r3
 8007566:	f000 f8f1 	bl	800774c <__malloc_lock>
 800756a:	4a20      	ldr	r2, [pc, #128]	; (80075ec <_free_r+0x9c>)
 800756c:	9801      	ldr	r0, [sp, #4]
 800756e:	6813      	ldr	r3, [r2, #0]
 8007570:	4615      	mov	r5, r2
 8007572:	b933      	cbnz	r3, 8007582 <_free_r+0x32>
 8007574:	6063      	str	r3, [r4, #4]
 8007576:	6014      	str	r4, [r2, #0]
 8007578:	b003      	add	sp, #12
 800757a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800757e:	f000 b8eb 	b.w	8007758 <__malloc_unlock>
 8007582:	42a3      	cmp	r3, r4
 8007584:	d90b      	bls.n	800759e <_free_r+0x4e>
 8007586:	6821      	ldr	r1, [r4, #0]
 8007588:	1862      	adds	r2, r4, r1
 800758a:	4293      	cmp	r3, r2
 800758c:	bf04      	itt	eq
 800758e:	681a      	ldreq	r2, [r3, #0]
 8007590:	685b      	ldreq	r3, [r3, #4]
 8007592:	6063      	str	r3, [r4, #4]
 8007594:	bf04      	itt	eq
 8007596:	1852      	addeq	r2, r2, r1
 8007598:	6022      	streq	r2, [r4, #0]
 800759a:	602c      	str	r4, [r5, #0]
 800759c:	e7ec      	b.n	8007578 <_free_r+0x28>
 800759e:	461a      	mov	r2, r3
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	b10b      	cbz	r3, 80075a8 <_free_r+0x58>
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	d9fa      	bls.n	800759e <_free_r+0x4e>
 80075a8:	6811      	ldr	r1, [r2, #0]
 80075aa:	1855      	adds	r5, r2, r1
 80075ac:	42a5      	cmp	r5, r4
 80075ae:	d10b      	bne.n	80075c8 <_free_r+0x78>
 80075b0:	6824      	ldr	r4, [r4, #0]
 80075b2:	4421      	add	r1, r4
 80075b4:	1854      	adds	r4, r2, r1
 80075b6:	42a3      	cmp	r3, r4
 80075b8:	6011      	str	r1, [r2, #0]
 80075ba:	d1dd      	bne.n	8007578 <_free_r+0x28>
 80075bc:	681c      	ldr	r4, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	6053      	str	r3, [r2, #4]
 80075c2:	4421      	add	r1, r4
 80075c4:	6011      	str	r1, [r2, #0]
 80075c6:	e7d7      	b.n	8007578 <_free_r+0x28>
 80075c8:	d902      	bls.n	80075d0 <_free_r+0x80>
 80075ca:	230c      	movs	r3, #12
 80075cc:	6003      	str	r3, [r0, #0]
 80075ce:	e7d3      	b.n	8007578 <_free_r+0x28>
 80075d0:	6825      	ldr	r5, [r4, #0]
 80075d2:	1961      	adds	r1, r4, r5
 80075d4:	428b      	cmp	r3, r1
 80075d6:	bf04      	itt	eq
 80075d8:	6819      	ldreq	r1, [r3, #0]
 80075da:	685b      	ldreq	r3, [r3, #4]
 80075dc:	6063      	str	r3, [r4, #4]
 80075de:	bf04      	itt	eq
 80075e0:	1949      	addeq	r1, r1, r5
 80075e2:	6021      	streq	r1, [r4, #0]
 80075e4:	6054      	str	r4, [r2, #4]
 80075e6:	e7c7      	b.n	8007578 <_free_r+0x28>
 80075e8:	b003      	add	sp, #12
 80075ea:	bd30      	pop	{r4, r5, pc}
 80075ec:	200004d8 	.word	0x200004d8

080075f0 <_malloc_r>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	1ccd      	adds	r5, r1, #3
 80075f4:	f025 0503 	bic.w	r5, r5, #3
 80075f8:	3508      	adds	r5, #8
 80075fa:	2d0c      	cmp	r5, #12
 80075fc:	bf38      	it	cc
 80075fe:	250c      	movcc	r5, #12
 8007600:	2d00      	cmp	r5, #0
 8007602:	4606      	mov	r6, r0
 8007604:	db01      	blt.n	800760a <_malloc_r+0x1a>
 8007606:	42a9      	cmp	r1, r5
 8007608:	d903      	bls.n	8007612 <_malloc_r+0x22>
 800760a:	230c      	movs	r3, #12
 800760c:	6033      	str	r3, [r6, #0]
 800760e:	2000      	movs	r0, #0
 8007610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007612:	f000 f89b 	bl	800774c <__malloc_lock>
 8007616:	4921      	ldr	r1, [pc, #132]	; (800769c <_malloc_r+0xac>)
 8007618:	680a      	ldr	r2, [r1, #0]
 800761a:	4614      	mov	r4, r2
 800761c:	b99c      	cbnz	r4, 8007646 <_malloc_r+0x56>
 800761e:	4f20      	ldr	r7, [pc, #128]	; (80076a0 <_malloc_r+0xb0>)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	b923      	cbnz	r3, 800762e <_malloc_r+0x3e>
 8007624:	4621      	mov	r1, r4
 8007626:	4630      	mov	r0, r6
 8007628:	f000 f83c 	bl	80076a4 <_sbrk_r>
 800762c:	6038      	str	r0, [r7, #0]
 800762e:	4629      	mov	r1, r5
 8007630:	4630      	mov	r0, r6
 8007632:	f000 f837 	bl	80076a4 <_sbrk_r>
 8007636:	1c43      	adds	r3, r0, #1
 8007638:	d123      	bne.n	8007682 <_malloc_r+0x92>
 800763a:	230c      	movs	r3, #12
 800763c:	6033      	str	r3, [r6, #0]
 800763e:	4630      	mov	r0, r6
 8007640:	f000 f88a 	bl	8007758 <__malloc_unlock>
 8007644:	e7e3      	b.n	800760e <_malloc_r+0x1e>
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	1b5b      	subs	r3, r3, r5
 800764a:	d417      	bmi.n	800767c <_malloc_r+0x8c>
 800764c:	2b0b      	cmp	r3, #11
 800764e:	d903      	bls.n	8007658 <_malloc_r+0x68>
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	441c      	add	r4, r3
 8007654:	6025      	str	r5, [r4, #0]
 8007656:	e004      	b.n	8007662 <_malloc_r+0x72>
 8007658:	6863      	ldr	r3, [r4, #4]
 800765a:	42a2      	cmp	r2, r4
 800765c:	bf0c      	ite	eq
 800765e:	600b      	streq	r3, [r1, #0]
 8007660:	6053      	strne	r3, [r2, #4]
 8007662:	4630      	mov	r0, r6
 8007664:	f000 f878 	bl	8007758 <__malloc_unlock>
 8007668:	f104 000b 	add.w	r0, r4, #11
 800766c:	1d23      	adds	r3, r4, #4
 800766e:	f020 0007 	bic.w	r0, r0, #7
 8007672:	1ac2      	subs	r2, r0, r3
 8007674:	d0cc      	beq.n	8007610 <_malloc_r+0x20>
 8007676:	1a1b      	subs	r3, r3, r0
 8007678:	50a3      	str	r3, [r4, r2]
 800767a:	e7c9      	b.n	8007610 <_malloc_r+0x20>
 800767c:	4622      	mov	r2, r4
 800767e:	6864      	ldr	r4, [r4, #4]
 8007680:	e7cc      	b.n	800761c <_malloc_r+0x2c>
 8007682:	1cc4      	adds	r4, r0, #3
 8007684:	f024 0403 	bic.w	r4, r4, #3
 8007688:	42a0      	cmp	r0, r4
 800768a:	d0e3      	beq.n	8007654 <_malloc_r+0x64>
 800768c:	1a21      	subs	r1, r4, r0
 800768e:	4630      	mov	r0, r6
 8007690:	f000 f808 	bl	80076a4 <_sbrk_r>
 8007694:	3001      	adds	r0, #1
 8007696:	d1dd      	bne.n	8007654 <_malloc_r+0x64>
 8007698:	e7cf      	b.n	800763a <_malloc_r+0x4a>
 800769a:	bf00      	nop
 800769c:	200004d8 	.word	0x200004d8
 80076a0:	200004dc 	.word	0x200004dc

080076a4 <_sbrk_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4d06      	ldr	r5, [pc, #24]	; (80076c0 <_sbrk_r+0x1c>)
 80076a8:	2300      	movs	r3, #0
 80076aa:	4604      	mov	r4, r0
 80076ac:	4608      	mov	r0, r1
 80076ae:	602b      	str	r3, [r5, #0]
 80076b0:	f7f9 fdda 	bl	8001268 <_sbrk>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	d102      	bne.n	80076be <_sbrk_r+0x1a>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	b103      	cbz	r3, 80076be <_sbrk_r+0x1a>
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	20000dbc 	.word	0x20000dbc

080076c4 <_raise_r>:
 80076c4:	291f      	cmp	r1, #31
 80076c6:	b538      	push	{r3, r4, r5, lr}
 80076c8:	4604      	mov	r4, r0
 80076ca:	460d      	mov	r5, r1
 80076cc:	d904      	bls.n	80076d8 <_raise_r+0x14>
 80076ce:	2316      	movs	r3, #22
 80076d0:	6003      	str	r3, [r0, #0]
 80076d2:	f04f 30ff 	mov.w	r0, #4294967295
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80076da:	b112      	cbz	r2, 80076e2 <_raise_r+0x1e>
 80076dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076e0:	b94b      	cbnz	r3, 80076f6 <_raise_r+0x32>
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 f830 	bl	8007748 <_getpid_r>
 80076e8:	462a      	mov	r2, r5
 80076ea:	4601      	mov	r1, r0
 80076ec:	4620      	mov	r0, r4
 80076ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076f2:	f000 b817 	b.w	8007724 <_kill_r>
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d00a      	beq.n	8007710 <_raise_r+0x4c>
 80076fa:	1c59      	adds	r1, r3, #1
 80076fc:	d103      	bne.n	8007706 <_raise_r+0x42>
 80076fe:	2316      	movs	r3, #22
 8007700:	6003      	str	r3, [r0, #0]
 8007702:	2001      	movs	r0, #1
 8007704:	e7e7      	b.n	80076d6 <_raise_r+0x12>
 8007706:	2400      	movs	r4, #0
 8007708:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800770c:	4628      	mov	r0, r5
 800770e:	4798      	blx	r3
 8007710:	2000      	movs	r0, #0
 8007712:	e7e0      	b.n	80076d6 <_raise_r+0x12>

08007714 <raise>:
 8007714:	4b02      	ldr	r3, [pc, #8]	; (8007720 <raise+0xc>)
 8007716:	4601      	mov	r1, r0
 8007718:	6818      	ldr	r0, [r3, #0]
 800771a:	f7ff bfd3 	b.w	80076c4 <_raise_r>
 800771e:	bf00      	nop
 8007720:	20000354 	.word	0x20000354

08007724 <_kill_r>:
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	4d07      	ldr	r5, [pc, #28]	; (8007744 <_kill_r+0x20>)
 8007728:	2300      	movs	r3, #0
 800772a:	4604      	mov	r4, r0
 800772c:	4608      	mov	r0, r1
 800772e:	4611      	mov	r1, r2
 8007730:	602b      	str	r3, [r5, #0]
 8007732:	f7f9 fd7f 	bl	8001234 <_kill>
 8007736:	1c43      	adds	r3, r0, #1
 8007738:	d102      	bne.n	8007740 <_kill_r+0x1c>
 800773a:	682b      	ldr	r3, [r5, #0]
 800773c:	b103      	cbz	r3, 8007740 <_kill_r+0x1c>
 800773e:	6023      	str	r3, [r4, #0]
 8007740:	bd38      	pop	{r3, r4, r5, pc}
 8007742:	bf00      	nop
 8007744:	20000dbc 	.word	0x20000dbc

08007748 <_getpid_r>:
 8007748:	f7f9 bd6c 	b.w	8001224 <_getpid>

0800774c <__malloc_lock>:
 800774c:	4801      	ldr	r0, [pc, #4]	; (8007754 <__malloc_lock+0x8>)
 800774e:	f000 b809 	b.w	8007764 <__retarget_lock_acquire_recursive>
 8007752:	bf00      	nop
 8007754:	20000dc4 	.word	0x20000dc4

08007758 <__malloc_unlock>:
 8007758:	4801      	ldr	r0, [pc, #4]	; (8007760 <__malloc_unlock+0x8>)
 800775a:	f000 b804 	b.w	8007766 <__retarget_lock_release_recursive>
 800775e:	bf00      	nop
 8007760:	20000dc4 	.word	0x20000dc4

08007764 <__retarget_lock_acquire_recursive>:
 8007764:	4770      	bx	lr

08007766 <__retarget_lock_release_recursive>:
 8007766:	4770      	bx	lr

08007768 <_init>:
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	bf00      	nop
 800776c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776e:	bc08      	pop	{r3}
 8007770:	469e      	mov	lr, r3
 8007772:	4770      	bx	lr

08007774 <_fini>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	bf00      	nop
 8007778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777a:	bc08      	pop	{r3}
 800777c:	469e      	mov	lr, r3
 800777e:	4770      	bx	lr
