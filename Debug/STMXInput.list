
STMXInput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e2c  08006e2c  000203b8  2**0
                  CONTENTS
  4 .ARM          00000008  08006e2c  08006e2c  00016e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e34  08006e34  000203b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e34  08006e34  00016e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b8  20000000  08006e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000978  200003b8  080071f4  000203b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d30  080071f4  00020d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f6b  00000000  00000000  000203e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a76  00000000  00000000  00038353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  0003bdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  0003cb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c728  00000000  00000000  0003d730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115fa  00000000  00000000  00059e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b7cd  00000000  00000000  0006b452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6c1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038ac  00000000  00000000  000f6c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200003b8 	.word	0x200003b8
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006d60 	.word	0x08006d60

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200003bc 	.word	0x200003bc
 80001d0:	08006d60 	.word	0x08006d60

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_ZN4XUSB4initEv>:
#ifdef __cplusplus

class XUSB
{
public:
	static void init(){ usb_xinput_init(); }
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	f000 fe20 	bl	8001114 <usb_xinput_init>
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <_ZN4XUSB9availableEv>:
	static uint16_t available() { return usb_xinput_available(); }
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
 80004dc:	f000 fdc4 	bl	8001068 <usb_xinput_available>
 80004e0:	4603      	mov	r3, r0
 80004e2:	4618      	mov	r0, r3
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <_ZN4XUSB4sendEPhh>:
	static uint8_t send(uint8_t *buffer, uint8_t nbytes) { return usb_xinput_send(buffer, nbytes); }
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
 80004ee:	460b      	mov	r3, r1
 80004f0:	70fb      	strb	r3, [r7, #3]
 80004f2:	78fb      	ldrb	r3, [r7, #3]
 80004f4:	4619      	mov	r1, r3
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f000 fddc 	bl	80010b4 <usb_xinput_send>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4618      	mov	r0, r3
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <_ZN4XUSB4recvEPhh>:
	static uint8_t recv(uint8_t *buffer, uint8_t nbytes) { return usb_xinput_recv(buffer, nbytes); }
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	460b      	mov	r3, r1
 8000510:	70fb      	strb	r3, [r7, #3]
 8000512:	78fb      	ldrb	r3, [r7, #3]
 8000514:	4619      	mov	r1, r3
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 fdb2 	bl	8001080 <usb_xinput_recv>
 800051c:	4603      	mov	r3, r0
 800051e:	4618      	mov	r0, r3
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <_ZN4Xbox8autosendEv>:
		bool newData;  // Flag for tx data changed
		bool autoSendOption;  // Flag for automatically sending data

		void setJoystickDirect(XInputControl joy, int16_t x, int16_t y);

		void inline autosend() {
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
			if (autoSendOption) { send(); }
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	7e5b      	ldrb	r3, [r3, #25]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d002      	beq.n	800053c <_ZN4Xbox8autosendEv+0x16>
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 fa24 	bl	8000984 <_ZN4Xbox4sendEv>
		}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <_Z3maplllll>:
#include "Xbox.h"



long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	69b9      	ldr	r1, [r7, #24]
 800055a:	683a      	ldr	r2, [r7, #0]
 800055c:	1a8a      	subs	r2, r1, r2
 800055e:	fb02 f203 	mul.w	r2, r2, r3
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	fb92 f2f3 	sdiv	r2, r2, r3
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	4413      	add	r3, r2
}
 8000570:	4618      	mov	r0, r3
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <_Z17getButtonFromEnum13XInputControl>:
static const XInputMap_Button Map_ButtonA(3, 4);
static const XInputMap_Button Map_ButtonB(3, 5);
static const XInputMap_Button Map_ButtonX(3, 6);
static const XInputMap_Button Map_ButtonY(3, 7);

const XInputMap_Button * getButtonFromEnum(XInputControl ctrl) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	switch (ctrl) {
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b12      	cmp	r3, #18
 800058a:	d847      	bhi.n	800061c <_Z17getButtonFromEnum13XInputControl+0xa0>
 800058c:	a201      	add	r2, pc, #4	; (adr r2, 8000594 <_Z17getButtonFromEnum13XInputControl+0x18>)
 800058e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000592:	bf00      	nop
 8000594:	08000619 	.word	0x08000619
 8000598:	080005f1 	.word	0x080005f1
 800059c:	080005f5 	.word	0x080005f5
 80005a0:	080005f9 	.word	0x080005f9
 80005a4:	080005fd 	.word	0x080005fd
 80005a8:	08000601 	.word	0x08000601
 80005ac:	08000605 	.word	0x08000605
 80005b0:	08000615 	.word	0x08000615
 80005b4:	08000611 	.word	0x08000611
 80005b8:	08000609 	.word	0x08000609
 80005bc:	0800060d 	.word	0x0800060d
 80005c0:	080005e1 	.word	0x080005e1
 80005c4:	080005e5 	.word	0x080005e5
 80005c8:	080005e9 	.word	0x080005e9
 80005cc:	080005ed 	.word	0x080005ed
 80005d0:	0800061d 	.word	0x0800061d
 80005d4:	0800061d 	.word	0x0800061d
 80005d8:	08000609 	.word	0x08000609
 80005dc:	0800060d 	.word	0x0800060d
	case(DPAD_UP):      return &Map_DpadUp;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <_Z17getButtonFromEnum13XInputControl+0xb0>)
 80005e2:	e01c      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(DPAD_DOWN):    return &Map_DpadDown;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <_Z17getButtonFromEnum13XInputControl+0xb4>)
 80005e6:	e01a      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(DPAD_LEFT):    return &Map_DpadLeft;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <_Z17getButtonFromEnum13XInputControl+0xb8>)
 80005ea:	e018      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(DPAD_RIGHT):   return &Map_DpadRight;
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <_Z17getButtonFromEnum13XInputControl+0xbc>)
 80005ee:	e016      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_A):     return &Map_ButtonA;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <_Z17getButtonFromEnum13XInputControl+0xc0>)
 80005f2:	e014      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_B):     return &Map_ButtonB;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <_Z17getButtonFromEnum13XInputControl+0xc4>)
 80005f6:	e012      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_X):     return &Map_ButtonX;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <_Z17getButtonFromEnum13XInputControl+0xc8>)
 80005fa:	e010      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_Y):     return &Map_ButtonY;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <_Z17getButtonFromEnum13XInputControl+0xcc>)
 80005fe:	e00e      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_LB):    return &Map_ButtonLB;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <_Z17getButtonFromEnum13XInputControl+0xd0>)
 8000602:	e00c      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_RB):    return &Map_ButtonRB;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <_Z17getButtonFromEnum13XInputControl+0xd4>)
 8000606:	e00a      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(JOY_LEFT):
	case(BUTTON_L3):    return &Map_ButtonL3;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <_Z17getButtonFromEnum13XInputControl+0xd8>)
 800060a:	e008      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(JOY_RIGHT):
	case(BUTTON_R3):    return &Map_ButtonR3;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <_Z17getButtonFromEnum13XInputControl+0xdc>)
 800060e:	e006      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_START): return &Map_ButtonStart;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <_Z17getButtonFromEnum13XInputControl+0xe0>)
 8000612:	e004      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_BACK):  return &Map_ButtonBack;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <_Z17getButtonFromEnum13XInputControl+0xe4>)
 8000616:	e002      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	case(BUTTON_LOGO):  return &Map_ButtonLogo;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <_Z17getButtonFromEnum13XInputControl+0xe8>)
 800061a:	e000      	b.n	800061e <_Z17getButtonFromEnum13XInputControl+0xa2>
	default: return nullptr;
 800061c:	2300      	movs	r3, #0
	}
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	08006dc0 	.word	0x08006dc0
 8000630:	08006dc4 	.word	0x08006dc4
 8000634:	08006dc8 	.word	0x08006dc8
 8000638:	08006dcc 	.word	0x08006dcc
 800063c:	08006dec 	.word	0x08006dec
 8000640:	08006df0 	.word	0x08006df0
 8000644:	08006df4 	.word	0x08006df4
 8000648:	08006df8 	.word	0x08006df8
 800064c:	08006de0 	.word	0x08006de0
 8000650:	08006de4 	.word	0x08006de4
 8000654:	08006dd8 	.word	0x08006dd8
 8000658:	08006ddc 	.word	0x08006ddc
 800065c:	08006dd0 	.word	0x08006dd0
 8000660:	08006dd4 	.word	0x08006dd4
 8000664:	08006de8 	.word	0x08006de8

08000668 <_Z18getTriggerFromEnum13XInputControl>:
const Xbox::Range XInputMap_Trigger::range = { 0, 255 };  // uint8_t

static const XInputMap_Trigger Map_TriggerLeft(4);
static const XInputMap_Trigger Map_TriggerRight(5);

const XInputMap_Trigger * getTriggerFromEnum(XInputControl ctrl) {
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	switch (ctrl) {
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b0f      	cmp	r3, #15
 8000676:	d002      	beq.n	800067e <_Z18getTriggerFromEnum13XInputControl+0x16>
 8000678:	2b10      	cmp	r3, #16
 800067a:	d002      	beq.n	8000682 <_Z18getTriggerFromEnum13XInputControl+0x1a>
 800067c:	e003      	b.n	8000686 <_Z18getTriggerFromEnum13XInputControl+0x1e>
	case(TRIGGER_LEFT): return &Map_TriggerLeft;
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <_Z18getTriggerFromEnum13XInputControl+0x2c>)
 8000680:	e002      	b.n	8000688 <_Z18getTriggerFromEnum13XInputControl+0x20>
	case(TRIGGER_RIGHT): return &Map_TriggerRight;
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <_Z18getTriggerFromEnum13XInputControl+0x30>)
 8000684:	e000      	b.n	8000688 <_Z18getTriggerFromEnum13XInputControl+0x20>
	default: return nullptr;
 8000686:	2300      	movs	r3, #0
	}
}
 8000688:	4618      	mov	r0, r3
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	08006e04 	.word	0x08006e04
 8000698:	08006e08 	.word	0x08006e08

0800069c <_ZN4XboxC1Ev>:

// --------------------------------------------------------
// Xbox Class (API)                           |
// --------------------------------------------------------

Xbox::Xbox() :
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	tx(), rumble() // Zero initialize arrays
 80006a4:	4a17      	ldr	r2, [pc, #92]	; (8000704 <_ZN4XboxC1Ev+0x68>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	1d1a      	adds	r2, r3, #4
 80006ae:	2313      	movs	r3, #19
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db04      	blt.n	80006be <_ZN4XboxC1Ev+0x22>
 80006b4:	2100      	movs	r1, #0
 80006b6:	7011      	strb	r1, [r2, #0]
 80006b8:	3201      	adds	r2, #1
 80006ba:	3b01      	subs	r3, #1
 80006bc:	e7f8      	b.n	80006b0 <_ZN4XboxC1Ev+0x14>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f103 021b 	add.w	r2, r3, #27
 80006c4:	2301      	movs	r3, #1
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	db04      	blt.n	80006d4 <_ZN4XboxC1Ev+0x38>
 80006ca:	2100      	movs	r1, #0
 80006cc:	7011      	strb	r1, [r2, #0]
 80006ce:	3201      	adds	r2, #1
 80006d0:	3b01      	subs	r3, #1
 80006d2:	e7f8      	b.n	80006c6 <_ZN4XboxC1Ev+0x2a>
{
	this->begin();
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f817 	bl	8000708 <_ZN4Xbox5beginEv>
	reset();
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 fa9a 	bl	8000c14 <_ZN4Xbox5resetEv>

	while(this->receive());  // flush USB OUT buffer
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f000 f95e 	bl	80009a2 <_ZN4Xbox7receiveEv>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	bf14      	ite	ne
 80006ec:	2301      	movne	r3, #1
 80006ee:	2300      	moveq	r3, #0
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d000      	beq.n	80006f8 <_ZN4XboxC1Ev+0x5c>
 80006f6:	e7f3      	b.n	80006e0 <_ZN4XboxC1Ev+0x44>

}
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	08006e14 	.word	0x08006e14

08000708 <_ZN4Xbox5beginEv>:

void Xbox::begin() {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	// Empty for now
	//usb_xinput_init();
	XUSB::init();
 8000710:	f7ff fedc 	bl	80004cc <_ZN4XUSB4initEv>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <_ZN4Xbox5pressEh>:

void Xbox::press(uint8_t button) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	70fb      	strb	r3, [r7, #3]
	setButton(button, true);
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	2201      	movs	r2, #1
 800072c:	4619      	mov	r1, r3
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f000 f804 	bl	800073c <_ZN4Xbox9setButtonEhb>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <_ZN4Xbox9setButtonEhb>:

void Xbox::release(uint8_t button) {
	setButton(button, false);
}

void Xbox::setButton(uint8_t button, bool state) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
 8000748:	4613      	mov	r3, r2
 800074a:	70bb      	strb	r3, [r7, #2]
	const XInputMap_Button * buttonData = getButtonFromEnum((XInputControl) button);
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff14 	bl	800057c <_Z17getButtonFromEnum13XInputControl>
 8000754:	60f8      	str	r0, [r7, #12]
	if (buttonData != nullptr) {
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d03d      	beq.n	80007d8 <_ZN4Xbox9setButtonEhb+0x9c>
		if (getButton(button) == state) return;  // Button hasn't changed
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	4619      	mov	r1, r3
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f8b1 	bl	80008c8 <_ZNK4Xbox9getButtonEh>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	78bb      	ldrb	r3, [r7, #2]
 800076c:	4293      	cmp	r3, r2
 800076e:	bf0c      	ite	eq
 8000770:	2301      	moveq	r3, #1
 8000772:	2300      	movne	r3, #0
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d145      	bne.n	8000806 <_ZN4Xbox9setButtonEhb+0xca>

		if (state) { tx[buttonData->index] |= buttonData->mask; }  // Press
 800077a:	78bb      	ldrb	r3, [r7, #2]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00f      	beq.n	80007a0 <_ZN4Xbox9setButtonEhb+0x64>
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	791a      	ldrb	r2, [r3, #4]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	785b      	ldrb	r3, [r3, #1]
 8000790:	68f9      	ldr	r1, [r7, #12]
 8000792:	7809      	ldrb	r1, [r1, #0]
 8000794:	4313      	orrs	r3, r2
 8000796:	b2da      	uxtb	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	440b      	add	r3, r1
 800079c:	711a      	strb	r2, [r3, #4]
 800079e:	e014      	b.n	80007ca <_ZN4Xbox9setButtonEhb+0x8e>
		else { tx[buttonData->index] &= ~(buttonData->mask); }  // Release
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	b25a      	sxtb	r2, r3
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	785b      	ldrb	r3, [r3, #1]
 80007b2:	b25b      	sxtb	r3, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	4013      	ands	r3, r2
 80007ba:	b25a      	sxtb	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	440b      	add	r3, r1
 80007c8:	711a      	strb	r2, [r3, #4]
		newData = true;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2201      	movs	r2, #1
 80007ce:	761a      	strb	r2, [r3, #24]
		autosend();
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff fea8 	bl	8000526 <_ZN4Xbox8autosendEv>
 80007d6:	e019      	b.n	800080c <_ZN4Xbox9setButtonEhb+0xd0>
	}
	else {
		Range * triggerRange = getRangeFromEnum((XInputControl) button);
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	4619      	mov	r1, r3
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 f969 	bl	8000ab4 <_ZN4Xbox16getRangeFromEnumE13XInputControl>
 80007e2:	60b8      	str	r0, [r7, #8]
		if (triggerRange == nullptr) return;  // Not a trigger (or joystick, but the trigger function will ignore that)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d00f      	beq.n	800080a <_ZN4Xbox9setButtonEhb+0xce>
		setTrigger((XInputControl) button, state ? triggerRange->max : triggerRange->min);  // Treat trigger like a button
 80007ea:	78bb      	ldrb	r3, [r7, #2]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <_ZN4Xbox9setButtonEhb+0xba>
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	e001      	b.n	80007fa <_ZN4Xbox9setButtonEhb+0xbe>
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	78f9      	ldrb	r1, [r7, #3]
 80007fc:	461a      	mov	r2, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f808 	bl	8000814 <_ZN4Xbox10setTriggerE13XInputControll>
 8000804:	e002      	b.n	800080c <_ZN4Xbox9setButtonEhb+0xd0>
		if (getButton(button) == state) return;  // Button hasn't changed
 8000806:	bf00      	nop
 8000808:	e000      	b.n	800080c <_ZN4Xbox9setButtonEhb+0xd0>
		if (triggerRange == nullptr) return;  // Not a trigger (or joystick, but the trigger function will ignore that)
 800080a:	bf00      	nop
	}
}
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <_ZN4Xbox10setTriggerE13XInputControll>:

	autoSendOption = autoSendTemp;  // Re-enable from option
	autosend();
}

void Xbox::setTrigger(XInputControl trigger, int32_t val) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	460b      	mov	r3, r1
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	72fb      	strb	r3, [r7, #11]
	const XInputMap_Trigger * triggerData = getTriggerFromEnum(trigger);
 8000822:	7afb      	ldrb	r3, [r7, #11]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff1f 	bl	8000668 <_Z18getTriggerFromEnum13XInputControl>
 800082a:	6178      	str	r0, [r7, #20]
	if (triggerData == nullptr) return;  // Not a trigger
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d029      	beq.n	8000886 <_ZN4Xbox10setTriggerE13XInputControll+0x72>

	val = rescaleInput(val, *getRangeFromEnum(trigger), XInputMap_Trigger::range);
 8000832:	7afb      	ldrb	r3, [r7, #11]
 8000834:	4619      	mov	r1, r3
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f000 f93c 	bl	8000ab4 <_ZN4Xbox16getRangeFromEnumE13XInputControl>
 800083c:	4603      	mov	r3, r0
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <_ZN4Xbox10setTriggerE13XInputControll+0x80>)
 8000840:	4619      	mov	r1, r3
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f000 f960 	bl	8000b08 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_>
 8000848:	6078      	str	r0, [r7, #4]
	if (getTrigger(trigger) == val) return;  // Trigger hasn't changed
 800084a:	7afb      	ldrb	r3, [r7, #11]
 800084c:	4619      	mov	r1, r3
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f000 f871 	bl	8000936 <_ZNK4Xbox10getTriggerE13XInputControl>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4293      	cmp	r3, r2
 800085c:	bf0c      	ite	eq
 800085e:	2301      	moveq	r3, #1
 8000860:	2300      	movne	r3, #0
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d110      	bne.n	800088a <_ZN4Xbox10setTriggerE13XInputControll+0x76>

	tx[triggerData->index] = val;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	b2da      	uxtb	r2, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	440b      	add	r3, r1
 8000876:	711a      	strb	r2, [r3, #4]
	newData = true;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	2201      	movs	r2, #1
 800087c:	761a      	strb	r2, [r3, #24]
	autosend();
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff fe51 	bl	8000526 <_ZN4Xbox8autosendEv>
 8000884:	e002      	b.n	800088c <_ZN4Xbox10setTriggerE13XInputControll+0x78>
	if (triggerData == nullptr) return;  // Not a trigger
 8000886:	bf00      	nop
 8000888:	e000      	b.n	800088c <_ZN4Xbox10setTriggerE13XInputControll+0x78>
	if (getTrigger(trigger) == val) return;  // Trigger hasn't changed
 800088a:	bf00      	nop
}
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	08006dfc 	.word	0x08006dfc

08000898 <_ZN4Xbox10releaseAllEv>:
	}

	autosend();
}

void Xbox::releaseAll() {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	const uint8_t offset = 2;  // Skip message type and packet size
 80008a0:	2302      	movs	r3, #2
 80008a2:	73fb      	strb	r3, [r7, #15]
	memset(tx + offset, 0x00, sizeof(tx) - offset);  // Clear TX array
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3304      	adds	r3, #4
 80008a8:	3302      	adds	r3, #2
 80008aa:	2212      	movs	r2, #18
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f006 f942 	bl	8006b38 <memset>
	newData = true;  // Data changed and is unsent
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2201      	movs	r2, #1
 80008b8:	761a      	strb	r2, [r3, #24]
	autosend();
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fe33 	bl	8000526 <_ZN4Xbox8autosendEv>
}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <_ZNK4Xbox9getButtonEh>:

void Xbox::setAutoSend(bool a) {
	autoSendOption = a;
}

bool Xbox::getButton(uint8_t button) const {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
	const XInputMap_Button* buttonData = getButtonFromEnum((XInputControl) button);
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fe50 	bl	800057c <_Z17getButtonFromEnum13XInputControl>
 80008dc:	60f8      	str	r0, [r7, #12]
	if (buttonData != nullptr) {
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d00f      	beq.n	8000904 <_ZNK4Xbox9getButtonEh+0x3c>
		return tx[buttonData->index] & buttonData->mask;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	791a      	ldrb	r2, [r3, #4]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	785b      	ldrb	r3, [r3, #1]
 80008f4:	4013      	ands	r3, r2
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	bf14      	ite	ne
 80008fc:	2301      	movne	r3, #1
 80008fe:	2300      	moveq	r3, #0
 8000900:	b2db      	uxtb	r3, r3
 8000902:	e014      	b.n	800092e <_ZNK4Xbox9getButtonEh+0x66>
	}
	const XInputMap_Trigger* triggerData = getTriggerFromEnum((XInputControl) button);
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff feae 	bl	8000668 <_Z18getTriggerFromEnum13XInputControl>
 800090c:	60b8      	str	r0, [r7, #8]
	if (triggerData != nullptr) {
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d00b      	beq.n	800092c <_ZNK4Xbox9getButtonEh+0x64>
		return getTrigger((XInputControl) button) != 0 ? 1 : 0;
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	4619      	mov	r1, r3
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 f80c 	bl	8000936 <_ZNK4Xbox10getTriggerE13XInputControl>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	bf14      	ite	ne
 8000924:	2301      	movne	r3, #1
 8000926:	2300      	moveq	r3, #0
 8000928:	b2db      	uxtb	r3, r3
 800092a:	e000      	b.n	800092e <_ZNK4Xbox9getButtonEh+0x66>
	}
	return 0;  // Not a button or a trigger
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <_ZNK4Xbox10getTriggerE13XInputControl>:

bool Xbox::getDpad(XInputControl dpad) const {
	return getButton(dpad);
}

uint8_t Xbox::getTrigger(XInputControl trigger) const {
 8000936:	b580      	push	{r7, lr}
 8000938:	b084      	sub	sp, #16
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	460b      	mov	r3, r1
 8000940:	70fb      	strb	r3, [r7, #3]
	const XInputMap_Trigger * triggerData = getTriggerFromEnum(trigger);
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fe8f 	bl	8000668 <_Z18getTriggerFromEnum13XInputControl>
 800094a:	60f8      	str	r0, [r7, #12]
	if (triggerData == nullptr) return 0;  // Not a trigger
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d101      	bne.n	8000956 <_ZNK4Xbox10getTriggerE13XInputControl+0x20>
 8000952:	2300      	movs	r3, #0
 8000954:	e005      	b.n	8000962 <_ZNK4Xbox10getTriggerE13XInputControl+0x2c>
	return tx[triggerData->index];
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4413      	add	r3, r2
 8000960:	791b      	ldrb	r3, [r3, #4]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <_ZNK4Xbox13getLEDPatternEv>:

uint8_t Xbox::getRumbleRight() const {
	return rumble[RumbleRight.bufferIndex];
}

XInputLEDPattern Xbox::getLEDPattern() const {
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
	return ledPattern;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7f5b      	ldrb	r3, [r3, #29]
 8000976:	b2db      	uxtb	r3, r3
}
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_ZN4Xbox4sendEv>:


//Send an update packet to the PC
int Xbox::send() {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	//if (!newData) return 0;  // TX data hasn't changed //here is problem
	//newData = false;

	return XUSB::send(tx, 20);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3304      	adds	r3, #4
 8000990:	2114      	movs	r1, #20
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fda7 	bl	80004e6 <_ZN4XUSB4sendEPhh>
 8000998:	4603      	mov	r3, r0

}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <_ZN4Xbox7receiveEv>:

int Xbox::receive() {
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]

	if (XUSB::available() == 0) {
 80009aa:	f7ff fd95 	bl	80004d8 <_ZN4XUSB9availableEv>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf0c      	ite	eq
 80009b4:	2301      	moveq	r3, #1
 80009b6:	2300      	movne	r3, #0
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <_ZN4Xbox7receiveEv+0x20>
		return 0;  // No packet available
 80009be:	2300      	movs	r3, #0
 80009c0:	e02f      	b.n	8000a22 <_ZN4Xbox7receiveEv+0x80>
	}

	// Grab packet and store it in rx array
	uint8_t rx[8];
	const int bytesRecv = XUSB::recv(rx, sizeof(rx));
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	2108      	movs	r1, #8
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fd9c 	bl	8000506 <_ZN4XUSB4recvEPhh>
 80009ce:	4603      	mov	r3, r0
 80009d0:	617b      	str	r3, [r7, #20]

	// Only process if received 3 or more bytes (min valid packet size)
	if (bytesRecv >= 3) {
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	dd23      	ble.n	8000a20 <_ZN4Xbox7receiveEv+0x7e>
		const uint8_t PacketType = rx[0];
 80009d8:	7a3b      	ldrb	r3, [r7, #8]
 80009da:	74fb      	strb	r3, [r7, #19]

		// Rumble Packet
		if (PacketType == (uint8_t)XInputReceiveType::Rumble) {
 80009dc:	7cfb      	ldrb	r3, [r7, #19]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d116      	bne.n	8000a10 <_ZN4Xbox7receiveEv+0x6e>
			rumble[RumbleLeft.bufferIndex] = rx[RumbleLeft.rxIndex];   // Big weight (Left grip)
 80009e2:	2303      	movs	r3, #3
 80009e4:	2200      	movs	r2, #0
 80009e6:	4611      	mov	r1, r2
 80009e8:	f107 0218 	add.w	r2, r7, #24
 80009ec:	4413      	add	r3, r2
 80009ee:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	440b      	add	r3, r1
 80009f6:	76da      	strb	r2, [r3, #27]
			rumble[RumbleRight.bufferIndex] = rx[RumbleRight.rxIndex];  // Small weight (Right grip)
 80009f8:	2304      	movs	r3, #4
 80009fa:	2201      	movs	r2, #1
 80009fc:	4611      	mov	r1, r2
 80009fe:	f107 0218 	add.w	r2, r7, #24
 8000a02:	4413      	add	r3, r2
 8000a04:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	440b      	add	r3, r1
 8000a0c:	76da      	strb	r2, [r3, #27]
 8000a0e:	e007      	b.n	8000a20 <_ZN4Xbox7receiveEv+0x7e>
		}
		// LED Packet
		else if (PacketType == (uint8_t)XInputReceiveType::LEDs) {
 8000a10:	7cfb      	ldrb	r3, [r7, #19]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d104      	bne.n	8000a20 <_ZN4Xbox7receiveEv+0x7e>
			parseLED(rx[2]);
 8000a16:	7abb      	ldrb	r3, [r7, #10]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f000 f806 	bl	8000a2c <_ZN4Xbox8parseLEDEh>
		}


	}

	return bytesRecv;
 8000a20:	697b      	ldr	r3, [r7, #20]

}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <_ZN4Xbox8parseLEDEh>:

void Xbox::parseLED(uint8_t leds) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	70fb      	strb	r3, [r7, #3]
	if (leds > 0x0D) return;  // Not a known pattern
 8000a38:	78fb      	ldrb	r3, [r7, #3]
 8000a3a:	2b0d      	cmp	r3, #13
 8000a3c:	d832      	bhi.n	8000aa4 <_ZN4Xbox8parseLEDEh+0x78>

	ledPattern = (XInputLEDPattern) leds;  // Save pattern
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	78fa      	ldrb	r2, [r7, #3]
 8000a42:	775a      	strb	r2, [r3, #29]
	switch (ledPattern) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7f5b      	ldrb	r3, [r3, #29]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b09      	cmp	r3, #9
 8000a4c:	d82c      	bhi.n	8000aa8 <_ZN4Xbox8parseLEDEh+0x7c>
 8000a4e:	a201      	add	r2, pc, #4	; (adr r2, 8000a54 <_ZN4Xbox8parseLEDEh+0x28>)
 8000a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a54:	08000a7d 	.word	0x08000a7d
 8000a58:	08000a7d 	.word	0x08000a7d
 8000a5c:	08000a85 	.word	0x08000a85
 8000a60:	08000a8d 	.word	0x08000a8d
 8000a64:	08000a95 	.word	0x08000a95
 8000a68:	08000a9d 	.word	0x08000a9d
 8000a6c:	08000a85 	.word	0x08000a85
 8000a70:	08000a8d 	.word	0x08000a8d
 8000a74:	08000a95 	.word	0x08000a95
 8000a78:	08000a9d 	.word	0x08000a9d
	case(XInputLEDPattern::Off):
	case(XInputLEDPattern::Blinking):
		player = 0;  // Not connected
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	769a      	strb	r2, [r3, #26]
		break;
 8000a82:	e012      	b.n	8000aaa <_ZN4Xbox8parseLEDEh+0x7e>
	case(XInputLEDPattern::On1):
	case(XInputLEDPattern::Flash1):
		player = 1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2201      	movs	r2, #1
 8000a88:	769a      	strb	r2, [r3, #26]
		break;
 8000a8a:	e00e      	b.n	8000aaa <_ZN4Xbox8parseLEDEh+0x7e>
	case(XInputLEDPattern::On2):
	case(XInputLEDPattern::Flash2):
		player = 2;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2202      	movs	r2, #2
 8000a90:	769a      	strb	r2, [r3, #26]
		break;
 8000a92:	e00a      	b.n	8000aaa <_ZN4Xbox8parseLEDEh+0x7e>
	case(XInputLEDPattern::On3):
	case(XInputLEDPattern::Flash3):
		player = 3;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2203      	movs	r2, #3
 8000a98:	769a      	strb	r2, [r3, #26]
		break;
 8000a9a:	e006      	b.n	8000aaa <_ZN4Xbox8parseLEDEh+0x7e>
	case(XInputLEDPattern::On4):
	case(XInputLEDPattern::Flash4):
		player = 4;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	769a      	strb	r2, [r3, #26]
		break;
 8000aa2:	e002      	b.n	8000aaa <_ZN4Xbox8parseLEDEh+0x7e>
	if (leds > 0x0D) return;  // Not a known pattern
 8000aa4:	bf00      	nop
 8000aa6:	e000      	b.n	8000aaa <_ZN4Xbox8parseLEDEh+0x7e>
	default: return;  // Pattern doesn't affect player #
 8000aa8:	bf00      	nop
	}
}
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <_ZN4Xbox16getRangeFromEnumE13XInputControl>:

Xbox::Range * Xbox::getRangeFromEnum(XInputControl ctrl) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	70fb      	strb	r3, [r7, #3]
	switch (ctrl) {
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	3b0f      	subs	r3, #15
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d817      	bhi.n	8000af8 <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x44>
 8000ac8:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x1c>)
 8000aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ace:	bf00      	nop
 8000ad0:	08000ae1 	.word	0x08000ae1
 8000ad4:	08000ae7 	.word	0x08000ae7
 8000ad8:	08000aed 	.word	0x08000aed
 8000adc:	08000af3 	.word	0x08000af3
	case(TRIGGER_LEFT): return &rangeTrigLeft;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3320      	adds	r3, #32
 8000ae4:	e009      	b.n	8000afa <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x46>
	case(TRIGGER_RIGHT): return &rangeTrigRight;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3328      	adds	r3, #40	; 0x28
 8000aea:	e006      	b.n	8000afa <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x46>
	case(JOY_LEFT): return &rangeJoyLeft;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3330      	adds	r3, #48	; 0x30
 8000af0:	e003      	b.n	8000afa <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x46>
	case(JOY_RIGHT): return &rangeJoyRight;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3338      	adds	r3, #56	; 0x38
 8000af6:	e000      	b.n	8000afa <_ZN4Xbox16getRangeFromEnumE13XInputControl+0x46>
	default: return nullptr;
 8000af8:	2300      	movs	r3, #0
	}
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_>:

int32_t Xbox::rescaleInput(int32_t val, const Range& in, const Range& out) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
	if (val <= in.min) return out.min;  // Out of range -
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	dc02      	bgt.n	8000b24 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x1c>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	e024      	b.n	8000b6e <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x66>
	if (val >= in.max) return out.max;  // Out of range +
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	db02      	blt.n	8000b34 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x2c>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	e01c      	b.n	8000b6e <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x66>
	if (in.min == out.min && in.max == out.max) return val;  // Ranges identical
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d107      	bne.n	8000b50 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x48>
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d101      	bne.n	8000b50 <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x48>
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	e00e      	b.n	8000b6e <_ZN4Xbox12rescaleInputElRKNS_5RangeES2_+0x66>
	return map(val, in.min, in.max, out.min, out.max);
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	6819      	ldr	r1, [r3, #0]
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	4603      	mov	r3, r0
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f7ff fced 	bl	8000544 <_Z3maplllll>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	bf00      	nop
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_ZN4Xbox15setTriggerRangeEll>:

int16_t Xbox::invertInput(int16_t val, const Range& range) {
	return range.max - val + range.min;
}

void Xbox::setTriggerRange(int32_t rangeMin, int32_t rangeMax) {
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b084      	sub	sp, #16
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
	setRange(TRIGGER_LEFT, rangeMin, rangeMax);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68ba      	ldr	r2, [r7, #8]
 8000b86:	210f      	movs	r1, #15
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f000 f820 	bl	8000bce <_ZN4Xbox8setRangeE13XInputControlll>
	setRange(TRIGGER_RIGHT, rangeMin, rangeMax);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68ba      	ldr	r2, [r7, #8]
 8000b92:	2110      	movs	r1, #16
 8000b94:	68f8      	ldr	r0, [r7, #12]
 8000b96:	f000 f81a 	bl	8000bce <_ZN4Xbox8setRangeE13XInputControlll>
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <_ZN4Xbox16setJoystickRangeEll>:

void Xbox::setJoystickRange(int32_t rangeMin, int32_t rangeMax) {
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	60f8      	str	r0, [r7, #12]
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
	setRange(JOY_LEFT, rangeMin, rangeMax);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	2111      	movs	r1, #17
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f000 f80a 	bl	8000bce <_ZN4Xbox8setRangeE13XInputControlll>
	setRange(JOY_RIGHT, rangeMin, rangeMax);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	68ba      	ldr	r2, [r7, #8]
 8000bbe:	2112      	movs	r1, #18
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f000 f804 	bl	8000bce <_ZN4Xbox8setRangeE13XInputControlll>
}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_ZN4Xbox8setRangeE13XInputControlll>:

void Xbox::setRange(XInputControl ctrl, int32_t rangeMin, int32_t rangeMax) {
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	72fb      	strb	r3, [r7, #11]
	if (rangeMin >= rangeMax) return;  // Error: Max < Min
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	da0f      	bge.n	8000c06 <_ZN4Xbox8setRangeE13XInputControlll+0x38>

	Range * range = getRangeFromEnum(ctrl);
 8000be6:	7afb      	ldrb	r3, [r7, #11]
 8000be8:	4619      	mov	r1, r3
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f7ff ff62 	bl	8000ab4 <_ZN4Xbox16getRangeFromEnumE13XInputControl>
 8000bf0:	6178      	str	r0, [r7, #20]
	if (range == nullptr) return;  // Not an addressable range
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d008      	beq.n	8000c0a <_ZN4Xbox8setRangeE13XInputControlll+0x3c>

	range->min = rangeMin;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	601a      	str	r2, [r3, #0]
	range->max = rangeMax;
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	683a      	ldr	r2, [r7, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	e002      	b.n	8000c0c <_ZN4Xbox8setRangeE13XInputControlll+0x3e>
	if (rangeMin >= rangeMax) return;  // Error: Max < Min
 8000c06:	bf00      	nop
 8000c08:	e000      	b.n	8000c0c <_ZN4Xbox8setRangeE13XInputControlll+0x3e>
	if (range == nullptr) return;  // Not an addressable range
 8000c0a:	bf00      	nop
}
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <_ZN4Xbox5resetEv>:

// Resets class back to initial values
void Xbox::reset() {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	// Reset control data (tx)
	autoSendOption = false;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	765a      	strb	r2, [r3, #25]
	releaseAll();  // Clear TX buffer
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff fe38 	bl	8000898 <_ZN4Xbox10releaseAllEv>
	tx[0] = 0x00;  // Set tx message type
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	711a      	strb	r2, [r3, #4]
	tx[1] = 0x14;  // Set tx packet size (20)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2214      	movs	r2, #20
 8000c32:	715a      	strb	r2, [r3, #5]

	// Reset received data (rx)
	player = 0;  // Not connected, no player
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	769a      	strb	r2, [r3, #26]
	memset((void*) rumble, 0x00, sizeof(rumble));  // Clear rumble values
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	331b      	adds	r3, #27
 8000c3e:	2202      	movs	r2, #2
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f005 ff78 	bl	8006b38 <memset>
	ledPattern = XInputLEDPattern::Off;  // No LEDs on
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	775a      	strb	r2, [r3, #29]

	// Reset rescale ranges
	setTriggerRange(XInputMap_Trigger::range.min, XInputMap_Trigger::range.max);
 8000c4e:	2300      	movs	r3, #0
 8000c50:	22ff      	movs	r2, #255	; 0xff
 8000c52:	4619      	mov	r1, r3
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff8e 	bl	8000b76 <_ZN4Xbox15setTriggerRangeEll>
	setJoystickRange(XInputMap_Joystick::range.min, XInputMap_Joystick::range.max);
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_ZN4Xbox5resetEv+0x64>)
 8000c5c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000c60:	4619      	mov	r1, r3
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ff9d 	bl	8000ba2 <_ZN4Xbox16setJoystickRangeEll>
	this->send();
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff fe8b 	bl	8000984 <_ZN4Xbox4sendEv>
	// Clear user-set options


}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	ffff8000 	.word	0xffff8000

08000c7c <_ZN4XboxD1Ev>:

Xbox::~Xbox() {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <_ZN4XboxD1Ev+0x1c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	08006e14 	.word	0x08006e14

08000c9c <_ZN4XboxD0Ev>:
Xbox::~Xbox() {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
}
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ffe9 	bl	8000c7c <_ZN4XboxD1Ev>
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f005 fee3 	bl	8006a78 <_ZdlPvj>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <main>:


Xbox *gamepad;

int main(void)
{
 8000cbc:	b598      	push	{r3, r4, r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc0:	f000 fa58 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc4:	f000 f84c 	bl	8000d60 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc8:	f000 f8be 	bl	8000e48 <_ZL12MX_GPIO_Initv>
  //MX_USB_DEVICE_Init();
  gamepad=new Xbox();
 8000ccc:	2040      	movs	r0, #64	; 0x40
 8000cce:	f005 fed5 	bl	8006a7c <_Znwj>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	461c      	mov	r4, r3
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f7ff fce0 	bl	800069c <_ZN4XboxC1Ev>
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <main+0x9c>)
 8000cde:	601c      	str	r4, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce6:	481d      	ldr	r0, [pc, #116]	; (8000d5c <main+0xa0>)
 8000ce8:	f000 fd70 	bl	80017cc <HAL_GPIO_WritePin>

HAL_Delay(2000);
 8000cec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cf0:	f000 fab2 	bl	8001258 <HAL_Delay>

HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfa:	4818      	ldr	r0, [pc, #96]	; (8000d5c <main+0xa0>)
 8000cfc:	f000 fd66 	bl	80017cc <HAL_GPIO_WritePin>



//bool but=false;

gamepad->press(BUTTON_A);
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <main+0x9c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2101      	movs	r1, #1
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fd08 	bl	800071c <_ZN4Xbox5pressEh>
	 // USBD_LL_Transmit(&hUsbDeviceFS,0x81,tx,20);
	  //gamepad->setButton(BUTTON_A,but);

	  //HAL_Delay(2000);

	  if(gamepad->getLEDPattern()!=0)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <main+0x9c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fe2a 	bl	800096a <_ZNK4Xbox13getLEDPatternEv>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf14      	ite	ne
 8000d1c:	2301      	movne	r3, #1
 8000d1e:	2300      	moveq	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d006      	beq.n	8000d34 <main+0x78>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <main+0xa0>)
 8000d2e:	f000 fd4d 	bl	80017cc <HAL_GPIO_WritePin>
 8000d32:	e005      	b.n	8000d40 <main+0x84>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3a:	4808      	ldr	r0, [pc, #32]	; (8000d5c <main+0xa0>)
 8000d3c:	f000 fd46 	bl	80017cc <HAL_GPIO_WritePin>
	  }

	 // but=!but;

	  gamepad->send();
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <main+0x9c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fe1d 	bl	8000984 <_ZN4Xbox4sendEv>


	  gamepad->receive();
 8000d4a:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <main+0x9c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fe27 	bl	80009a2 <_ZN4Xbox7receiveEv>
	  if(gamepad->getLEDPattern()!=0)
 8000d54:	e7da      	b.n	8000d0c <main+0x50>
 8000d56:	bf00      	nop
 8000d58:	200003d4 	.word	0x200003d4
 8000d5c:	40020800 	.word	0x40020800

08000d60 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	2230      	movs	r2, #48	; 0x30
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f005 fee2 	bl	8006b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <_Z18SystemClock_Configv+0xe0>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a2c      	ldr	r2, [pc, #176]	; (8000e40 <_Z18SystemClock_Configv+0xe0>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <_Z18SystemClock_Configv+0xe0>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <_Z18SystemClock_Configv+0xe4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dac:	4a25      	ldr	r2, [pc, #148]	; (8000e44 <_Z18SystemClock_Configv+0xe4>)
 8000dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <_Z18SystemClock_Configv+0xe4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000dd8:	2390      	movs	r3, #144	; 0x90
 8000dda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000de0:	2305      	movs	r3, #5
 8000de2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 fe8b 	bl	8002b04 <HAL_RCC_OscConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bf14      	ite	ne
 8000df4:	2301      	movne	r3, #1
 8000df6:	2300      	moveq	r3, #0
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000dfe:	f000 f867 	bl	8000ed0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e02:	230f      	movs	r3, #15
 8000e04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000e06:	2301      	movs	r3, #1
 8000e08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]



  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 f8e9 	bl	8002ff4 <HAL_RCC_ClockConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	bf14      	ite	ne
 8000e28:	2301      	movne	r3, #1
 8000e2a:	2300      	moveq	r3, #0
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8000e32:	f000 f84d 	bl	8000ed0 <Error_Handler>
  }


}
 8000e36:	bf00      	nop
 8000e38:	3750      	adds	r7, #80	; 0x50
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40007000 	.word	0x40007000

08000e48 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <_ZL12MX_GPIO_Initv+0x80>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <_ZL12MX_GPIO_Initv+0x80>)
 8000e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <_ZL12MX_GPIO_Initv+0x80>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <_ZL12MX_GPIO_Initv+0x80>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a15      	ldr	r2, [pc, #84]	; (8000ec8 <_ZL12MX_GPIO_Initv+0x80>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <_ZL12MX_GPIO_Initv+0x80>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <_ZL12MX_GPIO_Initv+0x80>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <_ZL12MX_GPIO_Initv+0x80>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <_ZL12MX_GPIO_Initv+0x80>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef gpio; // obiekt gpio będący konfiguracją portów GPIO
   gpio.Pin = GPIO_PIN_13; // konfigurujemy pin 5
 8000ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea6:	60fb      	str	r3, [r7, #12]
   gpio.Mode = GPIO_MODE_OUTPUT_PP; // jako wyjście
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
   gpio.Pull = GPIO_NOPULL; // rezystory podciągające są wyłączone
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
   gpio.Speed = GPIO_SPEED_FREQ_LOW; // wystarczą nieskie częstotliwości przełączania
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOC, &gpio);
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4804      	ldr	r0, [pc, #16]	; (8000ecc <_ZL12MX_GPIO_Initv+0x84>)
 8000ebc:	f000 fb02 	bl	80014c4 <HAL_GPIO_Init>

}
 8000ec0:	bf00      	nop
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020800 	.word	0x40020800

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <Error_Handler+0x8>
	...

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a0f      	ldr	r2, [pc, #60]	; (8000f28 <HAL_MspInit+0x4c>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <NMI_Handler+0x4>

08000f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <MemManage_Handler+0x4>

08000f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <BusFault_Handler+0x4>

08000f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <UsageFault_Handler+0x4>

08000f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f78:	f000 f94e 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <OTG_FS_IRQHandler+0x10>)
 8000f86:	f000 fd8a 	bl	8001a9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000918 	.word	0x20000918

08000f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
	return 1;
 8000f98:	2301      	movs	r3, #1
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <_kill>:

int _kill(int pid, int sig)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fae:	f005 fd89 	bl	8006ac4 <__errno>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2216      	movs	r2, #22
 8000fb6:	601a      	str	r2, [r3, #0]
	return -1;
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_exit>:

void _exit (int status)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ffe7 	bl	8000fa4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fd6:	e7fe      	b.n	8000fd6 <_exit+0x12>

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f005 fd5c 	bl	8006ac4 <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20010000 	.word	0x20010000
 8001038:	00000400 	.word	0x00000400
 800103c:	200003d8 	.word	0x200003d8
 8001040:	20000d30 	.word	0x20000d30

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <usb_xinput_available>:
}*/

// Function to check if packets are available
// to be received on the RX endpoint
uint16_t usb_xinput_available()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	return USBD_LL_GetRxDataSize(&hUsbDeviceFS,2);
 800106c:	2102      	movs	r1, #2
 800106e:	4803      	ldr	r0, [pc, #12]	; (800107c <usb_xinput_available+0x14>)
 8001070:	f005 fcab 	bl	80069ca <USBD_LL_GetRxDataSize>
 8001074:	4603      	mov	r3, r0
 8001076:	b29b      	uxth	r3, r3
}
 8001078:	4618      	mov	r0, r3
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000448 	.word	0x20000448

08001080 <usb_xinput_recv>:


// Function receives packets from the RX endpoint
uint8_t usb_xinput_recv(uint8_t *buffer, uint8_t nbytes)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
	if (hUsbDeviceFS.pClassData == NULL)
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <usb_xinput_recv+0x30>)
 800108e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <usb_xinput_recv+0x1a>
		  {
		    return (uint8_t)USBD_FAIL;
 8001096:	2303      	movs	r3, #3
 8001098:	e006      	b.n	80010a8 <usb_xinput_recv+0x28>
		  }

		 USBD_LL_PrepareReceive(&hUsbDeviceFS,CUSTOM_HID_EPOUT_ADDR,buffer,nbytes);
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	2101      	movs	r1, #1
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <usb_xinput_recv+0x30>)
 80010a2:	f005 fc71 	bl	8006988 <USBD_LL_PrepareReceive>

	return USBD_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000448 	.word	0x20000448

080010b4 <usb_xinput_send>:


// Function used to send packets out of the TX endpoint
// This is used to send button reports
uint8_t usb_xinput_send(uint8_t *buffer, uint8_t nbytes)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
	//while(USBD_LL_IsStallEP()){}

	if (hUsbDeviceFS.pClassData == NULL)
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <usb_xinput_send+0x5c>)
 80010c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <usb_xinput_send+0x1a>
	  {
	    return (uint8_t)USBD_FAIL;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e01c      	b.n	8001108 <usb_xinput_send+0x54>
	  }

	USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <usb_xinput_send+0x5c>)
 80010d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80010d4:	60fb      	str	r3, [r7, #12]

	if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <usb_xinput_send+0x5c>)
 80010d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d111      	bne.n	8001106 <usb_xinput_send+0x52>
	  {
	    if (hhid->state == CUSTOM_HID_IDLE)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10a      	bne.n	8001102 <usb_xinput_send+0x4e>
	    {
	      hhid->state = CUSTOM_HID_BUSY;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2201      	movs	r2, #1
 80010f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	      USBD_LL_Transmit(&hUsbDeviceFS,CUSTOM_HID_EPIN_ADDR,buffer,nbytes);
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	2181      	movs	r1, #129	; 0x81
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <usb_xinput_send+0x5c>)
 80010fc:	f005 fc23 	bl	8006946 <USBD_LL_Transmit>
 8001100:	e001      	b.n	8001106 <usb_xinput_send+0x52>
	    }
	    else
	    {
	      return (uint8_t)USBD_BUSY;
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <usb_xinput_send+0x54>
	    }
	  }


	return USBD_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000448 	.word	0x20000448

08001114 <usb_xinput_init>:

void usb_xinput_init()
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	MX_USB_DEVICE_Init();
 8001118:	f005 f846 	bl	80061a8 <MX_USB_DEVICE_Init>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800113c:	4c0b      	ldr	r4, [pc, #44]	; (800116c <LoopFillZerobss+0x26>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800114a:	f7ff ff7b 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f005 fcbf 	bl	8006ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff fdb3 	bl	8000cbc <main>
  bx  lr    
 8001156:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001158:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	200003b8 	.word	0x200003b8
  ldr r2, =_sidata
 8001164:	08006e3c 	.word	0x08006e3c
  ldr r2, =_sbss
 8001168:	200003b8 	.word	0x200003b8
  ldr r4, =_ebss
 800116c:	20000d30 	.word	0x20000d30

08001170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_Init+0x40>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_Init+0x40>)
 800118a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_Init+0x40>)
 8001196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f94f 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	200f      	movs	r0, #15
 80011a4:	f000 f808 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fe98 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f967 	bl	80014aa <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f92f 	bl	8001456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	20000008 	.word	0x20000008
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008
 800123c:	20000444 	.word	0x20000444

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000444 	.word	0x20000444

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff ffee 	bl	8001240 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d005      	beq.n	800127e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_Delay+0x44>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800127e:	bf00      	nop
 8001280:	f7ff ffde 	bl	8001240 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d8f7      	bhi.n	8001280 <HAL_Delay+0x28>
  {
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000008 	.word	0x20000008

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <__NVIC_EnableIRQ+0x38>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f7ff ff8e 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff29 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff3e 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff8e 	bl	8001394 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5d 	bl	8001340 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff31 	bl	8001304 <__NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffa2 	bl	80013fc <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
 80014de:	e159      	b.n	8001794 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014e0:	2201      	movs	r2, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	f040 8148 	bne.w	800178e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	2b01      	cmp	r3, #1
 8001508:	d005      	beq.n	8001516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001512:	2b02      	cmp	r3, #2
 8001514:	d130      	bne.n	8001578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800154c:	2201      	movs	r2, #1
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 0201 	and.w	r2, r3, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b03      	cmp	r3, #3
 8001582:	d017      	beq.n	80015b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d123      	bne.n	8001608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	08da      	lsrs	r2, r3, #3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3208      	adds	r2, #8
 80015c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	08da      	lsrs	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3208      	adds	r2, #8
 8001602:	69b9      	ldr	r1, [r7, #24]
 8001604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0203 	and.w	r2, r3, #3
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80a2 	beq.w	800178e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b57      	ldr	r3, [pc, #348]	; (80017ac <HAL_GPIO_Init+0x2e8>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	4a56      	ldr	r2, [pc, #344]	; (80017ac <HAL_GPIO_Init+0x2e8>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
 800165a:	4b54      	ldr	r3, [pc, #336]	; (80017ac <HAL_GPIO_Init+0x2e8>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001666:	4a52      	ldr	r2, [pc, #328]	; (80017b0 <HAL_GPIO_Init+0x2ec>)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a49      	ldr	r2, [pc, #292]	; (80017b4 <HAL_GPIO_Init+0x2f0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d019      	beq.n	80016c6 <HAL_GPIO_Init+0x202>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a48      	ldr	r2, [pc, #288]	; (80017b8 <HAL_GPIO_Init+0x2f4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <HAL_GPIO_Init+0x1fe>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a47      	ldr	r2, [pc, #284]	; (80017bc <HAL_GPIO_Init+0x2f8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d00d      	beq.n	80016be <HAL_GPIO_Init+0x1fa>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a46      	ldr	r2, [pc, #280]	; (80017c0 <HAL_GPIO_Init+0x2fc>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d007      	beq.n	80016ba <HAL_GPIO_Init+0x1f6>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a45      	ldr	r2, [pc, #276]	; (80017c4 <HAL_GPIO_Init+0x300>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d101      	bne.n	80016b6 <HAL_GPIO_Init+0x1f2>
 80016b2:	2304      	movs	r3, #4
 80016b4:	e008      	b.n	80016c8 <HAL_GPIO_Init+0x204>
 80016b6:	2307      	movs	r3, #7
 80016b8:	e006      	b.n	80016c8 <HAL_GPIO_Init+0x204>
 80016ba:	2303      	movs	r3, #3
 80016bc:	e004      	b.n	80016c8 <HAL_GPIO_Init+0x204>
 80016be:	2302      	movs	r3, #2
 80016c0:	e002      	b.n	80016c8 <HAL_GPIO_Init+0x204>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <HAL_GPIO_Init+0x204>
 80016c6:	2300      	movs	r3, #0
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	f002 0203 	and.w	r2, r2, #3
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	4093      	lsls	r3, r2
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016d8:	4935      	ldr	r1, [pc, #212]	; (80017b0 <HAL_GPIO_Init+0x2ec>)
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	089b      	lsrs	r3, r3, #2
 80016de:	3302      	adds	r3, #2
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e6:	4b38      	ldr	r3, [pc, #224]	; (80017c8 <HAL_GPIO_Init+0x304>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800170a:	4a2f      	ldr	r2, [pc, #188]	; (80017c8 <HAL_GPIO_Init+0x304>)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <HAL_GPIO_Init+0x304>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001734:	4a24      	ldr	r2, [pc, #144]	; (80017c8 <HAL_GPIO_Init+0x304>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173a:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <HAL_GPIO_Init+0x304>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800175e:	4a1a      	ldr	r2, [pc, #104]	; (80017c8 <HAL_GPIO_Init+0x304>)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_GPIO_Init+0x304>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001788:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <HAL_GPIO_Init+0x304>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3301      	adds	r3, #1
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	2b0f      	cmp	r3, #15
 8001798:	f67f aea2 	bls.w	80014e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3724      	adds	r7, #36	; 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40013800 	.word	0x40013800
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40020800 	.word	0x40020800
 80017c0:	40020c00 	.word	0x40020c00
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40013c00 	.word	0x40013c00

080017cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
 80017d8:	4613      	mov	r3, r2
 80017da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017dc:	787b      	ldrb	r3, [r7, #1]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017e8:	e003      	b.n	80017f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	041a      	lsls	r2, r3, #16
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	619a      	str	r2, [r3, #24]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001800:	b08f      	sub	sp, #60	; 0x3c
 8001802:	af0a      	add	r7, sp, #40	; 0x28
 8001804:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e10f      	b.n	8001a30 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f004 fe1a 	bl	8006464 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2203      	movs	r2, #3
 8001834:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f001 fe8d 	bl	800356e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	687e      	ldr	r6, [r7, #4]
 800185c:	466d      	mov	r5, sp
 800185e:	f106 0410 	add.w	r4, r6, #16
 8001862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800186a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800186e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001872:	1d33      	adds	r3, r6, #4
 8001874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001876:	6838      	ldr	r0, [r7, #0]
 8001878:	f001 fd64 	bl	8003344 <USB_CoreInit>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d005      	beq.n	800188e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2202      	movs	r2, #2
 8001886:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0d0      	b.n	8001a30 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f001 fe7b 	bl	8003590 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800189a:	2300      	movs	r3, #0
 800189c:	73fb      	strb	r3, [r7, #15]
 800189e:	e04a      	b.n	8001936 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	1a9b      	subs	r3, r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	333d      	adds	r3, #61	; 0x3d
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	1a9b      	subs	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	333c      	adds	r3, #60	; 0x3c
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	b298      	uxth	r0, r3
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	3342      	adds	r3, #66	; 0x42
 80018dc:	4602      	mov	r2, r0
 80018de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	333f      	adds	r3, #63	; 0x3f
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	3344      	adds	r3, #68	; 0x44
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	3348      	adds	r3, #72	; 0x48
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	3350      	adds	r3, #80	; 0x50
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	3301      	adds	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	d3af      	bcc.n	80018a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e044      	b.n	80019d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001972:	7bfa      	ldrb	r2, [r7, #15]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	3301      	adds	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d3b5      	bcc.n	8001946 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	687e      	ldr	r6, [r7, #4]
 80019e2:	466d      	mov	r5, sp
 80019e4:	f106 0410 	add.w	r4, r6, #16
 80019e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80019f8:	1d33      	adds	r3, r6, #4
 80019fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019fc:	6838      	ldr	r0, [r7, #0]
 80019fe:	f001 fe13 	bl	8003628 <USB_DevInit>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e00d      	b.n	8001a30 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 fe8f 	bl	800474c <USB_DevDisconnect>

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_PCD_Start+0x1c>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e020      	b.n	8001a96 <HAL_PCD_Start+0x5e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d109      	bne.n	8001a78 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d005      	beq.n	8001a78 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 fd65 	bl	800354c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 fe3f 	bl	800470a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a9e:	b590      	push	{r4, r7, lr}
 8001aa0:	b08d      	sub	sp, #52	; 0x34
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f002 fefd 	bl	80048b4 <USB_GetMode>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f040 839d 	bne.w	80021fc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fe61 	bl	800478e <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8393 	beq.w	80021fa <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 fe58 	bl	800478e <USB_ReadInterrupts>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d107      	bne.n	8001af8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f002 0202 	and.w	r2, r2, #2
 8001af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 fe46 	bl	800478e <USB_ReadInterrupts>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b10      	cmp	r3, #16
 8001b0a:	d161      	bne.n	8001bd0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699a      	ldr	r2, [r3, #24]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0210 	bic.w	r2, r2, #16
 8001b1a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	f003 020f 	and.w	r2, r3, #15
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	3304      	adds	r3, #4
 8001b3a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	0c5b      	lsrs	r3, r3, #17
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d124      	bne.n	8001b92 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d035      	beq.n	8001bc0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	091b      	lsrs	r3, r3, #4
 8001b5c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	6a38      	ldr	r0, [r7, #32]
 8001b68:	f002 fc7d 	bl	8004466 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	091b      	lsrs	r3, r3, #4
 8001b74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b78:	441a      	add	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	699a      	ldr	r2, [r3, #24]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b8a:	441a      	add	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	619a      	str	r2, [r3, #24]
 8001b90:	e016      	b.n	8001bc0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	0c5b      	lsrs	r3, r3, #17
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d110      	bne.n	8001bc0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	6a38      	ldr	r0, [r7, #32]
 8001baa:	f002 fc5c 	bl	8004466 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	699a      	ldr	r2, [r3, #24]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bba:	441a      	add	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0210 	orr.w	r2, r2, #16
 8001bce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 fdda 	bl	800478e <USB_ReadInterrupts>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001be4:	d16e      	bne.n	8001cc4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f002 fde0 	bl	80047b4 <USB_ReadDevAllOutEpInterrupt>
 8001bf4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001bf6:	e062      	b.n	8001cbe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d057      	beq.n	8001cb2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 fe05 	bl	800481c <USB_ReadDevOutEPInterrupt>
 8001c12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00c      	beq.n	8001c38 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 fdb0 	bl	8002798 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00c      	beq.n	8001c5c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	015a      	lsls	r2, r3, #5
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2308      	movs	r3, #8
 8001c52:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 feaa 	bl	80029b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d008      	beq.n	8001c78 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	015a      	lsls	r2, r3, #5
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c72:	461a      	mov	r2, r3
 8001c74:	2310      	movs	r3, #16
 8001c76:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	f003 0320 	and.w	r3, r3, #32
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d008      	beq.n	8001c94 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	015a      	lsls	r2, r3, #5
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c8e:	461a      	mov	r2, r3
 8001c90:	2320      	movs	r3, #32
 8001c92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d009      	beq.n	8001cb2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	015a      	lsls	r2, r3, #5
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001caa:	461a      	mov	r2, r3
 8001cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cba:	085b      	lsrs	r3, r3, #1
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d199      	bne.n	8001bf8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f002 fd60 	bl	800478e <USB_ReadInterrupts>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001cd8:	f040 80c0 	bne.w	8001e5c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f002 fd81 	bl	80047e8 <USB_ReadDevAllInEpInterrupt>
 8001ce6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001cec:	e0b2      	b.n	8001e54 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80a7 	beq.w	8001e48 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f002 fda7 	bl	8004858 <USB_ReadDevInEPInterrupt>
 8001d0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d057      	beq.n	8001dc6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69f9      	ldr	r1, [r7, #28]
 8001d32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d36:	4013      	ands	r3, r2
 8001d38:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d46:	461a      	mov	r2, r3
 8001d48:	2301      	movs	r3, #1
 8001d4a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d132      	bne.n	8001dba <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d58:	4613      	mov	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	3348      	adds	r3, #72	; 0x48
 8001d64:	6819      	ldr	r1, [r3, #0]
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4403      	add	r3, r0
 8001d74:	3344      	adds	r3, #68	; 0x44
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4419      	add	r1, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4403      	add	r3, r0
 8001d88:	3348      	adds	r3, #72	; 0x48
 8001d8a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d113      	bne.n	8001dba <HAL_PCD_IRQHandler+0x31c>
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	1a9b      	subs	r3, r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	3350      	adds	r3, #80	; 0x50
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d108      	bne.n	8001dba <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001db2:	461a      	mov	r2, r3
 8001db4:	2101      	movs	r1, #1
 8001db6:	f002 fdaf 	bl	8004918 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f004 fbd0 	bl	8006566 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2308      	movs	r3, #8
 8001de0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2310      	movs	r3, #16
 8001dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e14:	461a      	mov	r2, r3
 8001e16:	2340      	movs	r3, #64	; 0x40
 8001e18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e30:	461a      	mov	r2, r3
 8001e32:	2302      	movs	r3, #2
 8001e34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fc1b 	bl	800267e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f47f af49 	bne.w	8001cee <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 fc94 	bl	800478e <USB_ReadInterrupts>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e70:	d122      	bne.n	8001eb8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d108      	bne.n	8001ea2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e98:	2100      	movs	r1, #0
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fe26 	bl	8002aec <HAL_PCDEx_LPM_Callback>
 8001ea0:	e002      	b.n	8001ea8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f004 fbcc 	bl	8006640 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 fc66 	bl	800478e <USB_ReadInterrupts>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ecc:	d112      	bne.n	8001ef4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d102      	bne.n	8001ee4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f004 fb88 	bl	80065f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ef2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 fc48 	bl	800478e <USB_ReadInterrupts>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f08:	f040 80c7 	bne.w	800209a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	69fa      	ldr	r2, [r7, #28]
 8001f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2110      	movs	r1, #16
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 fce2 	bl	80038f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f30:	e056      	b.n	8001fe0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f44:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f56:	0151      	lsls	r1, r2, #5
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	440a      	add	r2, r1
 8001f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f64:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f76:	0151      	lsls	r1, r2, #5
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	440a      	add	r2, r1
 8001f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f92:	461a      	mov	r2, r3
 8001f94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f98:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001faa:	0151      	lsls	r1, r2, #5
 8001fac:	69fa      	ldr	r2, [r7, #28]
 8001fae:	440a      	add	r2, r1
 8001fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fb8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fca:	0151      	lsls	r1, r2, #5
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	440a      	add	r2, r1
 8001fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fd8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fdc:	3301      	adds	r3, #1
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d3a3      	bcc.n	8001f32 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ffc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	2b00      	cmp	r3, #0
 8002004:	d016      	beq.n	8002034 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800200c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002016:	f043 030b 	orr.w	r3, r3, #11
 800201a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800202c:	f043 030b 	orr.w	r3, r3, #11
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	e015      	b.n	8002060 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002042:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002046:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800204a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800205a:	f043 030b 	orr.w	r3, r3, #11
 800205e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800206e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002072:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002084:	461a      	mov	r2, r3
 8002086:	f002 fc47 	bl	8004918 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002098:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 fb75 	bl	800478e <USB_ReadInterrupts>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ae:	d124      	bne.n	80020fa <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f002 fc0b 	bl	80048d0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f001 fc73 	bl	80039aa <USB_GetDevSpeed>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681c      	ldr	r4, [r3, #0]
 80020d0:	f001 f92c 	bl	800332c <HAL_RCC_GetHCLKFreq>
 80020d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	4620      	mov	r0, r4
 80020e0:	f001 f992 	bl	8003408 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f004 fa66 	bl	80065b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f002 fb45 	bl	800478e <USB_ReadInterrupts>
 8002104:	4603      	mov	r3, r0
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b08      	cmp	r3, #8
 800210c:	d10a      	bne.n	8002124 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f004 fa43 	bl	800659a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f002 0208 	and.w	r2, r2, #8
 8002122:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f002 fb30 	bl	800478e <USB_ReadInterrupts>
 800212e:	4603      	mov	r3, r0
 8002130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002134:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002138:	d10f      	bne.n	800215a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	b2db      	uxtb	r3, r3
 8002142:	4619      	mov	r1, r3
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f004 fa9b 	bl	8006680 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002158:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f002 fb15 	bl	800478e <USB_ReadInterrupts>
 8002164:	4603      	mov	r3, r0
 8002166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800216e:	d10f      	bne.n	8002190 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	b2db      	uxtb	r3, r3
 8002178:	4619      	mov	r1, r3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f004 fa6e 	bl	800665c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800218e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f002 fafa 	bl	800478e <USB_ReadInterrupts>
 800219a:	4603      	mov	r3, r0
 800219c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a4:	d10a      	bne.n	80021bc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f004 fa7c 	bl	80066a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f002 fae4 	bl	800478e <USB_ReadInterrupts>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d115      	bne.n	80021fc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f004 fa6c 	bl	80066c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6859      	ldr	r1, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	e000      	b.n	80021fc <HAL_PCD_IRQHandler+0x75e>
      return;
 80021fa:	bf00      	nop
    }
  }
}
 80021fc:	3734      	adds	r7, #52	; 0x34
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd90      	pop	{r4, r7, pc}

08002202 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_PCD_SetAddress+0x1a>
 8002218:	2302      	movs	r3, #2
 800221a:	e013      	b.n	8002244 <HAL_PCD_SetAddress+0x42>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f002 fa42 	bl	80046be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	4608      	mov	r0, r1
 8002256:	4611      	mov	r1, r2
 8002258:	461a      	mov	r2, r3
 800225a:	4603      	mov	r3, r0
 800225c:	70fb      	strb	r3, [r7, #3]
 800225e:	460b      	mov	r3, r1
 8002260:	803b      	strh	r3, [r7, #0]
 8002262:	4613      	mov	r3, r2
 8002264:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800226a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800226e:	2b00      	cmp	r3, #0
 8002270:	da0f      	bge.n	8002292 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	f003 020f 	and.w	r2, r3, #15
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	3338      	adds	r3, #56	; 0x38
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	3304      	adds	r3, #4
 8002288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	705a      	strb	r2, [r3, #1]
 8002290:	e00f      	b.n	80022b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	f003 020f 	and.w	r2, r3, #15
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	3304      	adds	r3, #4
 80022aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022be:	883a      	ldrh	r2, [r7, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	78ba      	ldrb	r2, [r7, #2]
 80022c8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	785b      	ldrb	r3, [r3, #1]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022dc:	78bb      	ldrb	r3, [r7, #2]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d102      	bne.n	80022e8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_PCD_EP_Open+0xaa>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e00e      	b.n	8002314 <HAL_PCD_EP_Open+0xc8>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68f9      	ldr	r1, [r7, #12]
 8002304:	4618      	mov	r0, r3
 8002306:	f001 fb75 	bl	80039f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002312:	7afb      	ldrb	r3, [r7, #11]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800232c:	2b00      	cmp	r3, #0
 800232e:	da0f      	bge.n	8002350 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	f003 020f 	and.w	r2, r3, #15
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	3338      	adds	r3, #56	; 0x38
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2201      	movs	r2, #1
 800234c:	705a      	strb	r2, [r3, #1]
 800234e:	e00f      	b.n	8002370 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	f003 020f 	and.w	r2, r3, #15
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	3304      	adds	r3, #4
 8002368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	b2da      	uxtb	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_PCD_EP_Close+0x6e>
 8002386:	2302      	movs	r3, #2
 8002388:	e00e      	b.n	80023a8 <HAL_PCD_EP_Close+0x8c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68f9      	ldr	r1, [r7, #12]
 8002398:	4618      	mov	r0, r3
 800239a:	f001 fbb3 	bl	8003b04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	460b      	mov	r3, r1
 80023be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c0:	7afb      	ldrb	r3, [r7, #11]
 80023c2:	f003 020f 	and.w	r2, r3, #15
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4413      	add	r3, r2
 80023d6:	3304      	adds	r3, #4
 80023d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2200      	movs	r2, #0
 80023f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023f2:	7afb      	ldrb	r3, [r7, #11]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d102      	bne.n	800240c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800240c:	7afb      	ldrb	r3, [r7, #11]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	6979      	ldr	r1, [r7, #20]
 8002424:	f001 fe8e 	bl	8004144 <USB_EP0StartXfer>
 8002428:	e008      	b.n	800243c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	6979      	ldr	r1, [r7, #20]
 8002438:	f001 fc40 	bl	8003cbc <USB_EPStartXfer>
  }

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	f003 020f 	and.w	r2, r3, #15
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002468:	681b      	ldr	r3, [r3, #0]
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	460b      	mov	r3, r1
 8002484:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002486:	7afb      	ldrb	r3, [r7, #11]
 8002488:	f003 020f 	and.w	r2, r3, #15
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	3338      	adds	r3, #56	; 0x38
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4413      	add	r3, r2
 800249a:	3304      	adds	r3, #4
 800249c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	2201      	movs	r2, #1
 80024b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024b6:	7afb      	ldrb	r3, [r7, #11]
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d102      	bne.n	80024d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024d0:	7afb      	ldrb	r3, [r7, #11]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	6979      	ldr	r1, [r7, #20]
 80024e8:	f001 fe2c 	bl	8004144 <USB_EP0StartXfer>
 80024ec:	e008      	b.n	8002500 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	6979      	ldr	r1, [r7, #20]
 80024fc:	f001 fbde 	bl	8003cbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	460b      	mov	r3, r1
 8002514:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	f003 020f 	and.w	r2, r3, #15
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	d901      	bls.n	8002528 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e050      	b.n	80025ca <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800252c:	2b00      	cmp	r3, #0
 800252e:	da0f      	bge.n	8002550 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	f003 020f 	and.w	r2, r3, #15
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	3338      	adds	r3, #56	; 0x38
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4413      	add	r3, r2
 8002544:	3304      	adds	r3, #4
 8002546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	705a      	strb	r2, [r3, #1]
 800254e:	e00d      	b.n	800256c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	3304      	adds	r3, #4
 8002564:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	b2da      	uxtb	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_PCD_EP_SetStall+0x82>
 8002588:	2302      	movs	r3, #2
 800258a:	e01e      	b.n	80025ca <HAL_PCD_EP_SetStall+0xc0>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68f9      	ldr	r1, [r7, #12]
 800259a:	4618      	mov	r0, r3
 800259c:	f001 ffbb 	bl	8004516 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10a      	bne.n	80025c0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	b2d9      	uxtb	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025ba:	461a      	mov	r2, r3
 80025bc:	f002 f9ac 	bl	8004918 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b084      	sub	sp, #16
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	f003 020f 	and.w	r2, r3, #15
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d901      	bls.n	80025f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e042      	b.n	8002676 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	da0f      	bge.n	8002618 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	f003 020f 	and.w	r2, r3, #15
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	3338      	adds	r3, #56	; 0x38
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	3304      	adds	r3, #4
 800260e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	705a      	strb	r2, [r3, #1]
 8002616:	e00f      	b.n	8002638 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	f003 020f 	and.w	r2, r3, #15
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	3304      	adds	r3, #4
 8002630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	b2da      	uxtb	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_PCD_EP_ClrStall+0x86>
 8002654:	2302      	movs	r3, #2
 8002656:	e00e      	b.n	8002676 <HAL_PCD_EP_ClrStall+0xa4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68f9      	ldr	r1, [r7, #12]
 8002666:	4618      	mov	r0, r3
 8002668:	f001 ffc3 	bl	80045f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b08a      	sub	sp, #40	; 0x28
 8002682:	af02      	add	r7, sp, #8
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	3338      	adds	r3, #56	; 0x38
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	3304      	adds	r3, #4
 80026a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d901      	bls.n	80026b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e06c      	b.n	8002790 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d902      	bls.n	80026d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3303      	adds	r3, #3
 80026d6:	089b      	lsrs	r3, r3, #2
 80026d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026da:	e02b      	b.n	8002734 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d902      	bls.n	80026f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	3303      	adds	r3, #3
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	68d9      	ldr	r1, [r3, #12]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	b2da      	uxtb	r2, r3
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002710:	b2db      	uxtb	r3, r3
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	4603      	mov	r3, r0
 8002716:	6978      	ldr	r0, [r7, #20]
 8002718:	f001 fe67 	bl	80043ea <USB_WritePacket>

    ep->xfer_buff  += len;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	441a      	add	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	441a      	add	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	b29b      	uxth	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	429a      	cmp	r2, r3
 8002748:	d809      	bhi.n	800275e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002752:	429a      	cmp	r2, r3
 8002754:	d203      	bcs.n	800275e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1be      	bne.n	80026dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	429a      	cmp	r2, r3
 8002768:	d811      	bhi.n	800278e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	2201      	movs	r2, #1
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	43db      	mvns	r3, r3
 8002784:	6939      	ldr	r1, [r7, #16]
 8002786:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800278a:	4013      	ands	r3, r2
 800278c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3720      	adds	r7, #32
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	333c      	adds	r3, #60	; 0x3c
 80027b0:	3304      	adds	r3, #4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	f040 80a0 	bne.w	8002910 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a72      	ldr	r2, [pc, #456]	; (80029a8 <PCD_EP_OutXfrComplete_int+0x210>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	f240 80dd 	bls.w	800299e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80d7 	beq.w	800299e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fc:	461a      	mov	r2, r3
 80027fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002802:	6093      	str	r3, [r2, #8]
 8002804:	e0cb      	b.n	800299e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d009      	beq.n	8002824 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800281c:	461a      	mov	r2, r3
 800281e:	2320      	movs	r3, #32
 8002820:	6093      	str	r3, [r2, #8]
 8002822:	e0bc      	b.n	800299e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800282a:	2b00      	cmp	r3, #0
 800282c:	f040 80b7 	bne.w	800299e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4a5d      	ldr	r2, [pc, #372]	; (80029a8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d90f      	bls.n	8002858 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800284e:	461a      	mov	r2, r3
 8002850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002854:	6093      	str	r3, [r2, #8]
 8002856:	e0a2      	b.n	800299e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800286a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	0159      	lsls	r1, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	440b      	add	r3, r1
 8002874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800287e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4403      	add	r3, r0
 800288e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002892:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028a6:	6819      	ldr	r1, [r3, #0]
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4403      	add	r3, r0
 80028b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4419      	add	r1, r3
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4403      	add	r3, r0
 80028cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028d0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d114      	bne.n	8002902 <PCD_EP_OutXfrComplete_int+0x16a>
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d108      	bne.n	8002902 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028fa:	461a      	mov	r2, r3
 80028fc:	2101      	movs	r1, #1
 80028fe:	f002 f80b 	bl	8004918 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	4619      	mov	r1, r3
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f003 fe11 	bl	8006530 <HAL_PCD_DataOutStageCallback>
 800290e:	e046      	b.n	800299e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a26      	ldr	r2, [pc, #152]	; (80029ac <PCD_EP_OutXfrComplete_int+0x214>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d124      	bne.n	8002962 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4413      	add	r3, r2
 800292a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800292e:	461a      	mov	r2, r3
 8002930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002934:	6093      	str	r3, [r2, #8]
 8002936:	e032      	b.n	800299e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800294e:	461a      	mov	r2, r3
 8002950:	2320      	movs	r3, #32
 8002952:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	4619      	mov	r1, r3
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f003 fde8 	bl	8006530 <HAL_PCD_DataOutStageCallback>
 8002960:	e01d      	b.n	800299e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d114      	bne.n	8002992 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d108      	bne.n	8002992 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800298a:	461a      	mov	r2, r3
 800298c:	2100      	movs	r1, #0
 800298e:	f001 ffc3 	bl	8004918 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	4619      	mov	r1, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f003 fdc9 	bl	8006530 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	4f54300a 	.word	0x4f54300a
 80029ac:	4f54310a 	.word	0x4f54310a

080029b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	333c      	adds	r3, #60	; 0x3c
 80029c8:	3304      	adds	r3, #4
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <PCD_EP_OutSetupPacket_int+0x88>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d90e      	bls.n	8002a04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d009      	beq.n	8002a04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029fc:	461a      	mov	r2, r3
 80029fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f003 fd81 	bl	800650c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d90c      	bls.n	8002a2c <PCD_EP_OutSetupPacket_int+0x7c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d108      	bne.n	8002a2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a24:	461a      	mov	r2, r3
 8002a26:	2101      	movs	r1, #1
 8002a28:	f001 ff76 	bl	8004918 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	4f54300a 	.word	0x4f54300a

08002a3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d107      	bne.n	8002a6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a5a:	883b      	ldrh	r3, [r7, #0]
 8002a5c:	0419      	lsls	r1, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
 8002a68:	e028      	b.n	8002abc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4413      	add	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]
 8002a7c:	e00d      	b.n	8002a9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	3340      	adds	r3, #64	; 0x40
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	0c1b      	lsrs	r3, r3, #16
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	4413      	add	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	3301      	adds	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d3ec      	bcc.n	8002a7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002aa4:	883b      	ldrh	r3, [r7, #0]
 8002aa6:	0418      	lsls	r0, r3, #16
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6819      	ldr	r1, [r3, #0]
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	4302      	orrs	r2, r0
 8002ab4:	3340      	adds	r3, #64	; 0x40
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e264      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d075      	beq.n	8002c0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b22:	4ba3      	ldr	r3, [pc, #652]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d00c      	beq.n	8002b48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2e:	4ba0      	ldr	r3, [pc, #640]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d112      	bne.n	8002b60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b3a:	4b9d      	ldr	r3, [pc, #628]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b46:	d10b      	bne.n	8002b60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b48:	4b99      	ldr	r3, [pc, #612]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d05b      	beq.n	8002c0c <HAL_RCC_OscConfig+0x108>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d157      	bne.n	8002c0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e23f      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b68:	d106      	bne.n	8002b78 <HAL_RCC_OscConfig+0x74>
 8002b6a:	4b91      	ldr	r3, [pc, #580]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a90      	ldr	r2, [pc, #576]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	e01d      	b.n	8002bb4 <HAL_RCC_OscConfig+0xb0>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x98>
 8002b82:	4b8b      	ldr	r3, [pc, #556]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a8a      	ldr	r2, [pc, #552]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	4b88      	ldr	r3, [pc, #544]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a87      	ldr	r2, [pc, #540]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCC_OscConfig+0xb0>
 8002b9c:	4b84      	ldr	r3, [pc, #528]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a83      	ldr	r2, [pc, #524]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	4b81      	ldr	r3, [pc, #516]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a80      	ldr	r2, [pc, #512]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d013      	beq.n	8002be4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fb40 	bl	8001240 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc4:	f7fe fb3c 	bl	8001240 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	; 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e204      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	4b76      	ldr	r3, [pc, #472]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0xc0>
 8002be2:	e014      	b.n	8002c0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe fb2c 	bl	8001240 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bec:	f7fe fb28 	bl	8001240 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	; 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e1f0      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfe:	4b6c      	ldr	r3, [pc, #432]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0xe8>
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d063      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c1a:	4b65      	ldr	r3, [pc, #404]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00b      	beq.n	8002c3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c26:	4b62      	ldr	r3, [pc, #392]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d11c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c32:	4b5f      	ldr	r3, [pc, #380]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d116      	bne.n	8002c6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3e:	4b5c      	ldr	r3, [pc, #368]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_RCC_OscConfig+0x152>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d001      	beq.n	8002c56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e1c4      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c56:	4b56      	ldr	r3, [pc, #344]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4952      	ldr	r1, [pc, #328]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6a:	e03a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d020      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c74:	4b4f      	ldr	r3, [pc, #316]	; (8002db4 <HAL_RCC_OscConfig+0x2b0>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fae1 	bl	8001240 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c82:	f7fe fadd 	bl	8001240 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e1a5      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c94:	4b46      	ldr	r3, [pc, #280]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca0:	4b43      	ldr	r3, [pc, #268]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4940      	ldr	r1, [pc, #256]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	600b      	str	r3, [r1, #0]
 8002cb4:	e015      	b.n	8002ce2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb6:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <HAL_RCC_OscConfig+0x2b0>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fac0 	bl	8001240 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc4:	f7fe fabc 	bl	8001240 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e184      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd6:	4b36      	ldr	r3, [pc, #216]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d030      	beq.n	8002d50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf6:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_RCC_OscConfig+0x2b4>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7fe faa0 	bl	8001240 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d04:	f7fe fa9c 	bl	8001240 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e164      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d16:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x200>
 8002d22:	e015      	b.n	8002d50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d24:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <HAL_RCC_OscConfig+0x2b4>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2a:	f7fe fa89 	bl	8001240 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d32:	f7fe fa85 	bl	8001240 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e14d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80a0 	beq.w	8002e9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d62:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10f      	bne.n	8002d8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	4a0e      	ldr	r2, [pc, #56]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_OscConfig+0x2b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d121      	bne.n	8002dde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <HAL_RCC_OscConfig+0x2b8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <HAL_RCC_OscConfig+0x2b8>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da6:	f7fe fa4b 	bl	8001240 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	e011      	b.n	8002dd2 <HAL_RCC_OscConfig+0x2ce>
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	42470000 	.word	0x42470000
 8002db8:	42470e80 	.word	0x42470e80
 8002dbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc0:	f7fe fa3e 	bl	8001240 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e106      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd2:	4b85      	ldr	r3, [pc, #532]	; (8002fe8 <HAL_RCC_OscConfig+0x4e4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d106      	bne.n	8002df4 <HAL_RCC_OscConfig+0x2f0>
 8002de6:	4b81      	ldr	r3, [pc, #516]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	4a80      	ldr	r2, [pc, #512]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6713      	str	r3, [r2, #112]	; 0x70
 8002df2:	e01c      	b.n	8002e2e <HAL_RCC_OscConfig+0x32a>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	d10c      	bne.n	8002e16 <HAL_RCC_OscConfig+0x312>
 8002dfc:	4b7b      	ldr	r3, [pc, #492]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	4a7a      	ldr	r2, [pc, #488]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002e02:	f043 0304 	orr.w	r3, r3, #4
 8002e06:	6713      	str	r3, [r2, #112]	; 0x70
 8002e08:	4b78      	ldr	r3, [pc, #480]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0c:	4a77      	ldr	r2, [pc, #476]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6713      	str	r3, [r2, #112]	; 0x70
 8002e14:	e00b      	b.n	8002e2e <HAL_RCC_OscConfig+0x32a>
 8002e16:	4b75      	ldr	r3, [pc, #468]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a74      	ldr	r2, [pc, #464]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70
 8002e22:	4b72      	ldr	r3, [pc, #456]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	4a71      	ldr	r2, [pc, #452]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002e28:	f023 0304 	bic.w	r3, r3, #4
 8002e2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d015      	beq.n	8002e62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e36:	f7fe fa03 	bl	8001240 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3e:	f7fe f9ff 	bl	8001240 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e0c5      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e54:	4b65      	ldr	r3, [pc, #404]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0ee      	beq.n	8002e3e <HAL_RCC_OscConfig+0x33a>
 8002e60:	e014      	b.n	8002e8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e62:	f7fe f9ed 	bl	8001240 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fe f9e9 	bl	8001240 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e0af      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e80:	4b5a      	ldr	r3, [pc, #360]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1ee      	bne.n	8002e6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d105      	bne.n	8002e9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e92:	4b56      	ldr	r3, [pc, #344]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a55      	ldr	r2, [pc, #340]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 809b 	beq.w	8002fde <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ea8:	4b50      	ldr	r3, [pc, #320]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d05c      	beq.n	8002f6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d141      	bne.n	8002f40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebc:	4b4c      	ldr	r3, [pc, #304]	; (8002ff0 <HAL_RCC_OscConfig+0x4ec>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec2:	f7fe f9bd 	bl	8001240 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eca:	f7fe f9b9 	bl	8001240 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e081      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002edc:	4b43      	ldr	r3, [pc, #268]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1f0      	bne.n	8002eca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	019b      	lsls	r3, r3, #6
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	3b01      	subs	r3, #1
 8002f02:	041b      	lsls	r3, r3, #16
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	061b      	lsls	r3, r3, #24
 8002f0c:	4937      	ldr	r1, [pc, #220]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f12:	4b37      	ldr	r3, [pc, #220]	; (8002ff0 <HAL_RCC_OscConfig+0x4ec>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fe f992 	bl	8001240 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f20:	f7fe f98e 	bl	8001240 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e056      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f32:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x41c>
 8002f3e:	e04e      	b.n	8002fde <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f40:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <HAL_RCC_OscConfig+0x4ec>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f46:	f7fe f97b 	bl	8001240 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4e:	f7fe f977 	bl	8001240 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e03f      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f60:	4b22      	ldr	r3, [pc, #136]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f0      	bne.n	8002f4e <HAL_RCC_OscConfig+0x44a>
 8002f6c:	e037      	b.n	8002fde <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e032      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f7a:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <HAL_RCC_OscConfig+0x4e8>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d028      	beq.n	8002fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d121      	bne.n	8002fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d11a      	bne.n	8002fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002faa:	4013      	ands	r3, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fb0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d111      	bne.n	8002fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d001      	beq.n	8002fde <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	42470060 	.word	0x42470060

08002ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0cc      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003008:	4b68      	ldr	r3, [pc, #416]	; (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d90c      	bls.n	8003030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003016:	4b65      	ldr	r3, [pc, #404]	; (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b63      	ldr	r3, [pc, #396]	; (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0b8      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003048:	4b59      	ldr	r3, [pc, #356]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4a58      	ldr	r2, [pc, #352]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003052:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003060:	4b53      	ldr	r3, [pc, #332]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4a52      	ldr	r2, [pc, #328]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800306a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b50      	ldr	r3, [pc, #320]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	494d      	ldr	r1, [pc, #308]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d044      	beq.n	8003114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d119      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e07f      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d003      	beq.n	80030b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b2:	4b3f      	ldr	r3, [pc, #252]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e06f      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c2:	4b3b      	ldr	r3, [pc, #236]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e067      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d2:	4b37      	ldr	r3, [pc, #220]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f023 0203 	bic.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4934      	ldr	r1, [pc, #208]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030e4:	f7fe f8ac 	bl	8001240 <HAL_GetTick>
 80030e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ec:	f7fe f8a8 	bl	8001240 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e04f      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003102:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 020c 	and.w	r2, r3, #12
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	429a      	cmp	r2, r3
 8003112:	d1eb      	bne.n	80030ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003114:	4b25      	ldr	r3, [pc, #148]	; (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d20c      	bcs.n	800313c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	4b22      	ldr	r3, [pc, #136]	; (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b20      	ldr	r3, [pc, #128]	; (80031ac <HAL_RCC_ClockConfig+0x1b8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e032      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4916      	ldr	r1, [pc, #88]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	490e      	ldr	r1, [pc, #56]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800317a:	f000 f821 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 800317e:	4602      	mov	r2, r0
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	490a      	ldr	r1, [pc, #40]	; (80031b4 <HAL_RCC_ClockConfig+0x1c0>)
 800318c:	5ccb      	ldrb	r3, [r1, r3]
 800318e:	fa22 f303 	lsr.w	r3, r2, r3
 8003192:	4a09      	ldr	r2, [pc, #36]	; (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe f80c 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023c00 	.word	0x40023c00
 80031b0:	40023800 	.word	0x40023800
 80031b4:	08006e1c 	.word	0x08006e1c
 80031b8:	20000000 	.word	0x20000000
 80031bc:	20000004 	.word	0x20000004

080031c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c0:	b5b0      	push	{r4, r5, r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031c6:	2100      	movs	r1, #0
 80031c8:	6079      	str	r1, [r7, #4]
 80031ca:	2100      	movs	r1, #0
 80031cc:	60f9      	str	r1, [r7, #12]
 80031ce:	2100      	movs	r1, #0
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031d2:	2100      	movs	r1, #0
 80031d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031d6:	4952      	ldr	r1, [pc, #328]	; (8003320 <HAL_RCC_GetSysClockFreq+0x160>)
 80031d8:	6889      	ldr	r1, [r1, #8]
 80031da:	f001 010c 	and.w	r1, r1, #12
 80031de:	2908      	cmp	r1, #8
 80031e0:	d00d      	beq.n	80031fe <HAL_RCC_GetSysClockFreq+0x3e>
 80031e2:	2908      	cmp	r1, #8
 80031e4:	f200 8094 	bhi.w	8003310 <HAL_RCC_GetSysClockFreq+0x150>
 80031e8:	2900      	cmp	r1, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_RCC_GetSysClockFreq+0x32>
 80031ec:	2904      	cmp	r1, #4
 80031ee:	d003      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x38>
 80031f0:	e08e      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031f2:	4b4c      	ldr	r3, [pc, #304]	; (8003324 <HAL_RCC_GetSysClockFreq+0x164>)
 80031f4:	60bb      	str	r3, [r7, #8]
       break;
 80031f6:	e08e      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031f8:	4b4b      	ldr	r3, [pc, #300]	; (8003328 <HAL_RCC_GetSysClockFreq+0x168>)
 80031fa:	60bb      	str	r3, [r7, #8]
      break;
 80031fc:	e08b      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031fe:	4948      	ldr	r1, [pc, #288]	; (8003320 <HAL_RCC_GetSysClockFreq+0x160>)
 8003200:	6849      	ldr	r1, [r1, #4]
 8003202:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003206:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003208:	4945      	ldr	r1, [pc, #276]	; (8003320 <HAL_RCC_GetSysClockFreq+0x160>)
 800320a:	6849      	ldr	r1, [r1, #4]
 800320c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003210:	2900      	cmp	r1, #0
 8003212:	d024      	beq.n	800325e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003214:	4942      	ldr	r1, [pc, #264]	; (8003320 <HAL_RCC_GetSysClockFreq+0x160>)
 8003216:	6849      	ldr	r1, [r1, #4]
 8003218:	0989      	lsrs	r1, r1, #6
 800321a:	4608      	mov	r0, r1
 800321c:	f04f 0100 	mov.w	r1, #0
 8003220:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003224:	f04f 0500 	mov.w	r5, #0
 8003228:	ea00 0204 	and.w	r2, r0, r4
 800322c:	ea01 0305 	and.w	r3, r1, r5
 8003230:	493d      	ldr	r1, [pc, #244]	; (8003328 <HAL_RCC_GetSysClockFreq+0x168>)
 8003232:	fb01 f003 	mul.w	r0, r1, r3
 8003236:	2100      	movs	r1, #0
 8003238:	fb01 f102 	mul.w	r1, r1, r2
 800323c:	1844      	adds	r4, r0, r1
 800323e:	493a      	ldr	r1, [pc, #232]	; (8003328 <HAL_RCC_GetSysClockFreq+0x168>)
 8003240:	fba2 0101 	umull	r0, r1, r2, r1
 8003244:	1863      	adds	r3, r4, r1
 8003246:	4619      	mov	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	461a      	mov	r2, r3
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	f7fc ffc0 	bl	80001d4 <__aeabi_uldivmod>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4613      	mov	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e04a      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325e:	4b30      	ldr	r3, [pc, #192]	; (8003320 <HAL_RCC_GetSysClockFreq+0x160>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	099b      	lsrs	r3, r3, #6
 8003264:	461a      	mov	r2, r3
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800326e:	f04f 0100 	mov.w	r1, #0
 8003272:	ea02 0400 	and.w	r4, r2, r0
 8003276:	ea03 0501 	and.w	r5, r3, r1
 800327a:	4620      	mov	r0, r4
 800327c:	4629      	mov	r1, r5
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	014b      	lsls	r3, r1, #5
 8003288:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800328c:	0142      	lsls	r2, r0, #5
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	1b00      	subs	r0, r0, r4
 8003294:	eb61 0105 	sbc.w	r1, r1, r5
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	018b      	lsls	r3, r1, #6
 80032a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032a6:	0182      	lsls	r2, r0, #6
 80032a8:	1a12      	subs	r2, r2, r0
 80032aa:	eb63 0301 	sbc.w	r3, r3, r1
 80032ae:	f04f 0000 	mov.w	r0, #0
 80032b2:	f04f 0100 	mov.w	r1, #0
 80032b6:	00d9      	lsls	r1, r3, #3
 80032b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032bc:	00d0      	lsls	r0, r2, #3
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	1912      	adds	r2, r2, r4
 80032c4:	eb45 0303 	adc.w	r3, r5, r3
 80032c8:	f04f 0000 	mov.w	r0, #0
 80032cc:	f04f 0100 	mov.w	r1, #0
 80032d0:	0299      	lsls	r1, r3, #10
 80032d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032d6:	0290      	lsls	r0, r2, #10
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	461a      	mov	r2, r3
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	f7fc ff74 	bl	80001d4 <__aeabi_uldivmod>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4613      	mov	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032f4:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_RCC_GetSysClockFreq+0x160>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	0c1b      	lsrs	r3, r3, #16
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	3301      	adds	r3, #1
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	60bb      	str	r3, [r7, #8]
      break;
 800330e:	e002      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <HAL_RCC_GetSysClockFreq+0x164>)
 8003312:	60bb      	str	r3, [r7, #8]
      break;
 8003314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003316:	68bb      	ldr	r3, [r7, #8]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bdb0      	pop	{r4, r5, r7, pc}
 8003320:	40023800 	.word	0x40023800
 8003324:	00f42400 	.word	0x00f42400
 8003328:	017d7840 	.word	0x017d7840

0800332c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003330:	4b03      	ldr	r3, [pc, #12]	; (8003340 <HAL_RCC_GetHCLKFreq+0x14>)
 8003332:	681b      	ldr	r3, [r3, #0]
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20000000 	.word	0x20000000

08003344 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003344:	b084      	sub	sp, #16
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	f107 001c 	add.w	r0, r7, #28
 8003352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	2b01      	cmp	r3, #1
 800335a:	d122      	bne.n	80033a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003386:	2b01      	cmp	r3, #1
 8003388:	d105      	bne.n	8003396 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f001 fb1c 	bl	80049d4 <USB_CoreReset>
 800339c:	4603      	mov	r3, r0
 800339e:	73fb      	strb	r3, [r7, #15]
 80033a0:	e01a      	b.n	80033d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f001 fb10 	bl	80049d4 <USB_CoreReset>
 80033b4:	4603      	mov	r3, r0
 80033b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80033b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38
 80033ca:	e005      	b.n	80033d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80033d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d10b      	bne.n	80033f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f043 0206 	orr.w	r2, r3, #6
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f043 0220 	orr.w	r2, r3, #32
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003402:	b004      	add	sp, #16
 8003404:	4770      	bx	lr
	...

08003408 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	4613      	mov	r3, r2
 8003414:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d165      	bne.n	80034e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4a41      	ldr	r2, [pc, #260]	; (8003524 <USB_SetTurnaroundTime+0x11c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d906      	bls.n	8003432 <USB_SetTurnaroundTime+0x2a>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4a40      	ldr	r2, [pc, #256]	; (8003528 <USB_SetTurnaroundTime+0x120>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d202      	bcs.n	8003432 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800342c:	230f      	movs	r3, #15
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	e062      	b.n	80034f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	4a3c      	ldr	r2, [pc, #240]	; (8003528 <USB_SetTurnaroundTime+0x120>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d306      	bcc.n	8003448 <USB_SetTurnaroundTime+0x40>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4a3b      	ldr	r2, [pc, #236]	; (800352c <USB_SetTurnaroundTime+0x124>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d202      	bcs.n	8003448 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003442:	230e      	movs	r3, #14
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	e057      	b.n	80034f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4a38      	ldr	r2, [pc, #224]	; (800352c <USB_SetTurnaroundTime+0x124>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d306      	bcc.n	800345e <USB_SetTurnaroundTime+0x56>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4a37      	ldr	r2, [pc, #220]	; (8003530 <USB_SetTurnaroundTime+0x128>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d202      	bcs.n	800345e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003458:	230d      	movs	r3, #13
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	e04c      	b.n	80034f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	4a33      	ldr	r2, [pc, #204]	; (8003530 <USB_SetTurnaroundTime+0x128>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d306      	bcc.n	8003474 <USB_SetTurnaroundTime+0x6c>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4a32      	ldr	r2, [pc, #200]	; (8003534 <USB_SetTurnaroundTime+0x12c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d802      	bhi.n	8003474 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800346e:	230c      	movs	r3, #12
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e041      	b.n	80034f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4a2f      	ldr	r2, [pc, #188]	; (8003534 <USB_SetTurnaroundTime+0x12c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d906      	bls.n	800348a <USB_SetTurnaroundTime+0x82>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4a2e      	ldr	r2, [pc, #184]	; (8003538 <USB_SetTurnaroundTime+0x130>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d802      	bhi.n	800348a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003484:	230b      	movs	r3, #11
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	e036      	b.n	80034f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4a2a      	ldr	r2, [pc, #168]	; (8003538 <USB_SetTurnaroundTime+0x130>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d906      	bls.n	80034a0 <USB_SetTurnaroundTime+0x98>
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4a29      	ldr	r2, [pc, #164]	; (800353c <USB_SetTurnaroundTime+0x134>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d802      	bhi.n	80034a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800349a:	230a      	movs	r3, #10
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	e02b      	b.n	80034f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4a26      	ldr	r2, [pc, #152]	; (800353c <USB_SetTurnaroundTime+0x134>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d906      	bls.n	80034b6 <USB_SetTurnaroundTime+0xae>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4a25      	ldr	r2, [pc, #148]	; (8003540 <USB_SetTurnaroundTime+0x138>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d202      	bcs.n	80034b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80034b0:	2309      	movs	r3, #9
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	e020      	b.n	80034f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4a21      	ldr	r2, [pc, #132]	; (8003540 <USB_SetTurnaroundTime+0x138>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d306      	bcc.n	80034cc <USB_SetTurnaroundTime+0xc4>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4a20      	ldr	r2, [pc, #128]	; (8003544 <USB_SetTurnaroundTime+0x13c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d802      	bhi.n	80034cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80034c6:	2308      	movs	r3, #8
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	e015      	b.n	80034f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <USB_SetTurnaroundTime+0x13c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d906      	bls.n	80034e2 <USB_SetTurnaroundTime+0xda>
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <USB_SetTurnaroundTime+0x140>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d202      	bcs.n	80034e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80034dc:	2307      	movs	r3, #7
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e00a      	b.n	80034f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80034e2:	2306      	movs	r3, #6
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e007      	b.n	80034f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80034ee:	2309      	movs	r3, #9
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	e001      	b.n	80034f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80034f4:	2309      	movs	r3, #9
 80034f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	029b      	lsls	r3, r3, #10
 800350c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003510:	431a      	orrs	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	371c      	adds	r7, #28
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	00d8acbf 	.word	0x00d8acbf
 8003528:	00e4e1c0 	.word	0x00e4e1c0
 800352c:	00f42400 	.word	0x00f42400
 8003530:	01067380 	.word	0x01067380
 8003534:	011a499f 	.word	0x011a499f
 8003538:	01312cff 	.word	0x01312cff
 800353c:	014ca43f 	.word	0x014ca43f
 8003540:	016e3600 	.word	0x016e3600
 8003544:	01a6ab1f 	.word	0x01a6ab1f
 8003548:	01e84800 	.word	0x01e84800

0800354c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f043 0201 	orr.w	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f023 0201 	bic.w	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d115      	bne.n	80035de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035be:	2001      	movs	r0, #1
 80035c0:	f7fd fe4a 	bl	8001258 <HAL_Delay>
      ms++;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	3301      	adds	r3, #1
 80035c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f001 f972 	bl	80048b4 <USB_GetMode>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d01e      	beq.n	8003614 <USB_SetCurrentMode+0x84>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b31      	cmp	r3, #49	; 0x31
 80035da:	d9f0      	bls.n	80035be <USB_SetCurrentMode+0x2e>
 80035dc:	e01a      	b.n	8003614 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80035de:	78fb      	ldrb	r3, [r7, #3]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d115      	bne.n	8003610 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035f0:	2001      	movs	r0, #1
 80035f2:	f7fd fe31 	bl	8001258 <HAL_Delay>
      ms++;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	3301      	adds	r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f001 f959 	bl	80048b4 <USB_GetMode>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <USB_SetCurrentMode+0x84>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b31      	cmp	r3, #49	; 0x31
 800360c:	d9f0      	bls.n	80035f0 <USB_SetCurrentMode+0x60>
 800360e:	e001      	b.n	8003614 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e005      	b.n	8003620 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b32      	cmp	r3, #50	; 0x32
 8003618:	d101      	bne.n	800361e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003628:	b084      	sub	sp, #16
 800362a:	b580      	push	{r7, lr}
 800362c:	b086      	sub	sp, #24
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	e009      	b.n	800365c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	3340      	adds	r3, #64	; 0x40
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	2200      	movs	r2, #0
 8003654:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	3301      	adds	r3, #1
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	2b0e      	cmp	r3, #14
 8003660:	d9f2      	bls.n	8003648 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d11c      	bne.n	80036a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003676:	f043 0302 	orr.w	r3, r3, #2
 800367a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	639a      	str	r2, [r3, #56]	; 0x38
 80036a0:	e00b      	b.n	80036ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036c0:	461a      	mov	r2, r3
 80036c2:	2300      	movs	r3, #0
 80036c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036cc:	4619      	mov	r1, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d4:	461a      	mov	r2, r3
 80036d6:	680b      	ldr	r3, [r1, #0]
 80036d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d10c      	bne.n	80036fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036e6:	2100      	movs	r1, #0
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f945 	bl	8003978 <USB_SetDevSpeed>
 80036ee:	e008      	b.n	8003702 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80036f0:	2101      	movs	r1, #1
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f940 	bl	8003978 <USB_SetDevSpeed>
 80036f8:	e003      	b.n	8003702 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80036fa:	2103      	movs	r1, #3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f93b 	bl	8003978 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003702:	2110      	movs	r1, #16
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f8f3 	bl	80038f0 <USB_FlushTxFifo>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f90f 	bl	8003938 <USB_FlushRxFifo>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372a:	461a      	mov	r2, r3
 800372c:	2300      	movs	r3, #0
 800372e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003736:	461a      	mov	r2, r3
 8003738:	2300      	movs	r3, #0
 800373a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003742:	461a      	mov	r2, r3
 8003744:	2300      	movs	r3, #0
 8003746:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003748:	2300      	movs	r3, #0
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	e043      	b.n	80037d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003764:	d118      	bne.n	8003798 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003778:	461a      	mov	r2, r3
 800377a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	e013      	b.n	80037aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4413      	add	r3, r2
 800378a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378e:	461a      	mov	r2, r3
 8003790:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e008      	b.n	80037aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a4:	461a      	mov	r2, r3
 80037a6:	2300      	movs	r3, #0
 80037a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b6:	461a      	mov	r2, r3
 80037b8:	2300      	movs	r3, #0
 80037ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c8:	461a      	mov	r2, r3
 80037ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	3301      	adds	r3, #1
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d3b7      	bcc.n	800374e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	e043      	b.n	800386c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037fa:	d118      	bne.n	800382e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10a      	bne.n	8003818 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380e:	461a      	mov	r2, r3
 8003810:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e013      	b.n	8003840 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003824:	461a      	mov	r2, r3
 8003826:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	e008      	b.n	8003840 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383a:	461a      	mov	r2, r3
 800383c:	2300      	movs	r3, #0
 800383e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384c:	461a      	mov	r2, r3
 800384e:	2300      	movs	r3, #0
 8003850:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385e:	461a      	mov	r2, r3
 8003860:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003864:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3301      	adds	r3, #1
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	429a      	cmp	r2, r3
 8003872:	d3b7      	bcc.n	80037e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003886:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003894:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	2b00      	cmp	r3, #0
 800389a:	d105      	bne.n	80038a8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f043 0210 	orr.w	r2, r3, #16
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <USB_DevInit+0x2c4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	f043 0208 	orr.w	r2, r3, #8
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d107      	bne.n	80038dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038d4:	f043 0304 	orr.w	r3, r3, #4
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038e8:	b004      	add	sp, #16
 80038ea:	4770      	bx	lr
 80038ec:	803c3800 	.word	0x803c3800

080038f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	019b      	lsls	r3, r3, #6
 8003902:	f043 0220 	orr.w	r2, r3, #32
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3301      	adds	r3, #1
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	4a08      	ldr	r2, [pc, #32]	; (8003934 <USB_FlushTxFifo+0x44>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e006      	b.n	8003928 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b20      	cmp	r3, #32
 8003924:	d0f1      	beq.n	800390a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	00030d40 	.word	0x00030d40

08003938 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2210      	movs	r2, #16
 8003948:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3301      	adds	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	4a08      	ldr	r2, [pc, #32]	; (8003974 <USB_FlushRxFifo+0x3c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e006      	b.n	8003968 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b10      	cmp	r3, #16
 8003964:	d0f1      	beq.n	800394a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	00030d40 	.word	0x00030d40

08003978 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	68f9      	ldr	r1, [r7, #12]
 8003994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b087      	sub	sp, #28
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 0306 	and.w	r3, r3, #6
 80039c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80039ca:	2300      	movs	r3, #0
 80039cc:	75fb      	strb	r3, [r7, #23]
 80039ce:	e00a      	b.n	80039e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d002      	beq.n	80039dc <USB_GetDevSpeed+0x32>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b06      	cmp	r3, #6
 80039da:	d102      	bne.n	80039e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80039dc:	2302      	movs	r3, #2
 80039de:	75fb      	strb	r3, [r7, #23]
 80039e0:	e001      	b.n	80039e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80039e2:	230f      	movs	r3, #15
 80039e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	785b      	ldrb	r3, [r3, #1]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d13a      	bne.n	8003a86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	2101      	movs	r1, #1
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	68f9      	ldr	r1, [r7, #12]
 8003a2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d155      	bne.n	8003af4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	78db      	ldrb	r3, [r3, #3]
 8003a62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	059b      	lsls	r3, r3, #22
 8003a6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	0151      	lsls	r1, r2, #5
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	440a      	add	r2, r1
 8003a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	e036      	b.n	8003af4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8c:	69da      	ldr	r2, [r3, #28]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	2101      	movs	r1, #1
 8003a98:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	68f9      	ldr	r1, [r7, #12]
 8003aa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d11a      	bne.n	8003af4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	78db      	ldrb	r3, [r3, #3]
 8003ad8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ada:	430b      	orrs	r3, r1
 8003adc:	4313      	orrs	r3, r2
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	0151      	lsls	r1, r2, #5
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	440a      	add	r2, r1
 8003ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	785b      	ldrb	r3, [r3, #1]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d161      	bne.n	8003be4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b36:	d11f      	bne.n	8003b78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	0151      	lsls	r1, r2, #5
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	0151      	lsls	r1, r2, #5
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	440a      	add	r2, r1
 8003b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	2101      	movs	r1, #1
 8003b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	68f9      	ldr	r1, [r7, #12]
 8003b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b98:	4013      	ands	r3, r2
 8003b9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	2101      	movs	r1, #1
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	68f9      	ldr	r1, [r7, #12]
 8003bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	0159      	lsls	r1, r3, #5
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	440b      	add	r3, r1
 8003bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <USB_DeactivateEndpoint+0x1b0>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]
 8003be2:	e060      	b.n	8003ca6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bfa:	d11f      	bne.n	8003c3c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	0151      	lsls	r1, r2, #5
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	440a      	add	r2, r1
 8003c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c1a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	0151      	lsls	r1, r2, #5
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	440a      	add	r2, r1
 8003c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c52:	041b      	lsls	r3, r3, #16
 8003c54:	43db      	mvns	r3, r3
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	2101      	movs	r1, #1
 8003c72:	fa01 f303 	lsl.w	r3, r1, r3
 8003c76:	041b      	lsls	r3, r3, #16
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c80:	4013      	ands	r3, r2
 8003c82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	0159      	lsls	r1, r3, #5
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	440b      	add	r3, r1
 8003c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <USB_DeactivateEndpoint+0x1b4>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	ec337800 	.word	0xec337800
 8003cb8:	eff37800 	.word	0xeff37800

08003cbc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	785b      	ldrb	r3, [r3, #1]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	f040 815c 	bne.w	8003f96 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d132      	bne.n	8003d4c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	0151      	lsls	r1, r2, #5
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	440a      	add	r2, r1
 8003cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	0151      	lsls	r1, r2, #5
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	440a      	add	r2, r1
 8003d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	0151      	lsls	r1, r2, #5
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	440a      	add	r2, r1
 8003d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d44:	0cdb      	lsrs	r3, r3, #19
 8003d46:	04db      	lsls	r3, r3, #19
 8003d48:	6113      	str	r3, [r2, #16]
 8003d4a:	e074      	b.n	8003e36 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	0151      	lsls	r1, r2, #5
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	440a      	add	r2, r1
 8003d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d66:	0cdb      	lsrs	r3, r3, #19
 8003d68:	04db      	lsls	r3, r3, #19
 8003d6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	0151      	lsls	r1, r2, #5
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	440a      	add	r2, r1
 8003d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	6959      	ldr	r1, [r3, #20]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	440b      	add	r3, r1
 8003da8:	1e59      	subs	r1, r3, #1
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	fbb1 f3f3 	udiv	r3, r1, r3
 8003db2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003db4:	4b9d      	ldr	r3, [pc, #628]	; (800402c <USB_EPStartXfer+0x370>)
 8003db6:	400b      	ands	r3, r1
 8003db8:	69b9      	ldr	r1, [r7, #24]
 8003dba:	0148      	lsls	r0, r1, #5
 8003dbc:	69f9      	ldr	r1, [r7, #28]
 8003dbe:	4401      	add	r1, r0
 8003dc0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dde:	69b9      	ldr	r1, [r7, #24]
 8003de0:	0148      	lsls	r0, r1, #5
 8003de2:	69f9      	ldr	r1, [r7, #28]
 8003de4:	4401      	add	r1, r0
 8003de6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dea:	4313      	orrs	r3, r2
 8003dec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	78db      	ldrb	r3, [r3, #3]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d11f      	bne.n	8003e36 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	0151      	lsls	r1, r2, #5
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	440a      	add	r2, r1
 8003e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e10:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e14:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	0151      	lsls	r1, r2, #5
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	440a      	add	r2, r1
 8003e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e34:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d14b      	bne.n	8003ed4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d009      	beq.n	8003e58 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e50:	461a      	mov	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	78db      	ldrb	r3, [r3, #3]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d128      	bne.n	8003eb2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d110      	bne.n	8003e92 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	0151      	lsls	r1, r2, #5
 8003e82:	69fa      	ldr	r2, [r7, #28]
 8003e84:	440a      	add	r2, r1
 8003e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	e00f      	b.n	8003eb2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	0151      	lsls	r1, r2, #5
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	440a      	add	r2, r1
 8003ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	0151      	lsls	r1, r2, #5
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	440a      	add	r2, r1
 8003ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ecc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	e12f      	b.n	8004134 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	0151      	lsls	r1, r2, #5
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	440a      	add	r2, r1
 8003eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ef2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	78db      	ldrb	r3, [r3, #3]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d015      	beq.n	8003f28 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 8117 	beq.w	8004134 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	2101      	movs	r1, #1
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	69f9      	ldr	r1, [r7, #28]
 8003f1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f22:	4313      	orrs	r3, r2
 8003f24:	634b      	str	r3, [r1, #52]	; 0x34
 8003f26:	e105      	b.n	8004134 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d110      	bne.n	8003f5a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	0151      	lsls	r1, r2, #5
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	440a      	add	r2, r1
 8003f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	e00f      	b.n	8003f7a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	0151      	lsls	r1, r2, #5
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	440a      	add	r2, r1
 8003f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	68d9      	ldr	r1, [r3, #12]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	781a      	ldrb	r2, [r3, #0]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	b298      	uxth	r0, r3
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fa2b 	bl	80043ea <USB_WritePacket>
 8003f94:	e0ce      	b.n	8004134 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	0151      	lsls	r1, r2, #5
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	440a      	add	r2, r1
 8003fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fb0:	0cdb      	lsrs	r3, r3, #19
 8003fb2:	04db      	lsls	r3, r3, #19
 8003fb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	0151      	lsls	r1, r2, #5
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	440a      	add	r2, r1
 8003fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fd8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d126      	bne.n	8004030 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff8:	69b9      	ldr	r1, [r7, #24]
 8003ffa:	0148      	lsls	r0, r1, #5
 8003ffc:	69f9      	ldr	r1, [r7, #28]
 8003ffe:	4401      	add	r1, r0
 8004000:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004004:	4313      	orrs	r3, r2
 8004006:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	440a      	add	r2, r1
 800401e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004022:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004026:	6113      	str	r3, [r2, #16]
 8004028:	e036      	b.n	8004098 <USB_EPStartXfer+0x3dc>
 800402a:	bf00      	nop
 800402c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4413      	add	r3, r2
 800403a:	1e5a      	subs	r2, r3, #1
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	fbb2 f3f3 	udiv	r3, r2, r3
 8004044:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	8afb      	ldrh	r3, [r7, #22]
 8004056:	04d9      	lsls	r1, r3, #19
 8004058:	4b39      	ldr	r3, [pc, #228]	; (8004140 <USB_EPStartXfer+0x484>)
 800405a:	400b      	ands	r3, r1
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	0148      	lsls	r0, r1, #5
 8004060:	69f9      	ldr	r1, [r7, #28]
 8004062:	4401      	add	r1, r0
 8004064:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004068:	4313      	orrs	r3, r2
 800406a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	8af9      	ldrh	r1, [r7, #22]
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004088:	69b9      	ldr	r1, [r7, #24]
 800408a:	0148      	lsls	r0, r1, #5
 800408c:	69f9      	ldr	r1, [r7, #28]
 800408e:	4401      	add	r1, r0
 8004090:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004094:	4313      	orrs	r3, r2
 8004096:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d10d      	bne.n	80040ba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	68d9      	ldr	r1, [r3, #12]
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	460a      	mov	r2, r1
 80040b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	78db      	ldrb	r3, [r3, #3]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d128      	bne.n	8004114 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d110      	bne.n	80040f4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	0151      	lsls	r1, r2, #5
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	440a      	add	r2, r1
 80040e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e00f      	b.n	8004114 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	440a      	add	r2, r1
 800410a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800410e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004112:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	0151      	lsls	r1, r2, #5
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	440a      	add	r2, r1
 800412a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800412e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004132:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	1ff80000 	.word	0x1ff80000

08004144 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	4613      	mov	r3, r2
 8004150:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	2b01      	cmp	r3, #1
 8004162:	f040 80cd 	bne.w	8004300 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d132      	bne.n	80041d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	0151      	lsls	r1, r2, #5
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	440a      	add	r2, r1
 8004184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004188:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800418c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004190:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	0151      	lsls	r1, r2, #5
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	440a      	add	r2, r1
 80041a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	0151      	lsls	r1, r2, #5
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	440a      	add	r2, r1
 80041c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041cc:	0cdb      	lsrs	r3, r3, #19
 80041ce:	04db      	lsls	r3, r3, #19
 80041d0:	6113      	str	r3, [r2, #16]
 80041d2:	e04e      	b.n	8004272 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	0151      	lsls	r1, r2, #5
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	440a      	add	r2, r1
 80041ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ee:	0cdb      	lsrs	r3, r3, #19
 80041f0:	04db      	lsls	r3, r3, #19
 80041f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	440a      	add	r2, r1
 800420a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004212:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004216:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	429a      	cmp	r2, r3
 8004222:	d903      	bls.n	800422c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	0151      	lsls	r1, r2, #5
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	440a      	add	r2, r1
 8004242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004246:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800424a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004262:	6939      	ldr	r1, [r7, #16]
 8004264:	0148      	lsls	r0, r1, #5
 8004266:	6979      	ldr	r1, [r7, #20]
 8004268:	4401      	add	r1, r0
 800426a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800426e:	4313      	orrs	r3, r2
 8004270:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d11e      	bne.n	80042b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428c:	461a      	mov	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	0151      	lsls	r1, r2, #5
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	440a      	add	r2, r1
 80042aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	e092      	b.n	80043dc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	0151      	lsls	r1, r2, #5
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	440a      	add	r2, r1
 80042cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d07e      	beq.n	80043dc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	2101      	movs	r1, #1
 80042f0:	fa01 f303 	lsl.w	r3, r1, r3
 80042f4:	6979      	ldr	r1, [r7, #20]
 80042f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042fa:	4313      	orrs	r3, r2
 80042fc:	634b      	str	r3, [r1, #52]	; 0x34
 80042fe:	e06d      	b.n	80043dc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	0151      	lsls	r1, r2, #5
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	440a      	add	r2, r1
 8004316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800431a:	0cdb      	lsrs	r3, r3, #19
 800431c:	04db      	lsls	r3, r3, #19
 800431e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	0151      	lsls	r1, r2, #5
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	440a      	add	r2, r1
 8004336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800433a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800433e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004342:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	0151      	lsls	r1, r2, #5
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	440a      	add	r2, r1
 800436a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800436e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004372:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004380:	691a      	ldr	r2, [r3, #16]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800438a:	6939      	ldr	r1, [r7, #16]
 800438c:	0148      	lsls	r0, r1, #5
 800438e:	6979      	ldr	r1, [r7, #20]
 8004390:	4401      	add	r1, r0
 8004392:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004396:	4313      	orrs	r3, r2
 8004398:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d10d      	bne.n	80043bc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d009      	beq.n	80043bc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	68d9      	ldr	r1, [r3, #12]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b8:	460a      	mov	r2, r1
 80043ba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	0151      	lsls	r1, r2, #5
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	440a      	add	r2, r1
 80043d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b089      	sub	sp, #36	; 0x24
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	4611      	mov	r1, r2
 80043f6:	461a      	mov	r2, r3
 80043f8:	460b      	mov	r3, r1
 80043fa:	71fb      	strb	r3, [r7, #7]
 80043fc:	4613      	mov	r3, r2
 80043fe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004408:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800440c:	2b00      	cmp	r3, #0
 800440e:	d123      	bne.n	8004458 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004410:	88bb      	ldrh	r3, [r7, #4]
 8004412:	3303      	adds	r3, #3
 8004414:	089b      	lsrs	r3, r3, #2
 8004416:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004418:	2300      	movs	r3, #0
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	e018      	b.n	8004450 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	031a      	lsls	r2, r3, #12
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	4413      	add	r3, r2
 8004426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442a:	461a      	mov	r2, r3
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	3301      	adds	r3, #1
 8004436:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	3301      	adds	r3, #1
 800443c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	3301      	adds	r3, #1
 8004442:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	3301      	adds	r3, #1
 8004448:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	3301      	adds	r3, #1
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	429a      	cmp	r2, r3
 8004456:	d3e2      	bcc.n	800441e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3724      	adds	r7, #36	; 0x24
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004466:	b480      	push	{r7}
 8004468:	b08b      	sub	sp, #44	; 0x2c
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	4613      	mov	r3, r2
 8004472:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	089b      	lsrs	r3, r3, #2
 8004480:	b29b      	uxth	r3, r3
 8004482:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800448c:	2300      	movs	r3, #0
 800448e:	623b      	str	r3, [r7, #32]
 8004490:	e014      	b.n	80044bc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	601a      	str	r2, [r3, #0]
    pDest++;
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	3301      	adds	r3, #1
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	3301      	adds	r3, #1
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	3301      	adds	r3, #1
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	3301      	adds	r3, #1
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	3301      	adds	r3, #1
 80044ba:	623b      	str	r3, [r7, #32]
 80044bc:	6a3a      	ldr	r2, [r7, #32]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d3e6      	bcc.n	8004492 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80044c4:	8bfb      	ldrh	r3, [r7, #30]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d01e      	beq.n	8004508 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d4:	461a      	mov	r2, r3
 80044d6:	f107 0310 	add.w	r3, r7, #16
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	701a      	strb	r2, [r3, #0]
      i++;
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	3301      	adds	r3, #1
 80044f4:	623b      	str	r3, [r7, #32]
      pDest++;
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	3301      	adds	r3, #1
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80044fc:	8bfb      	ldrh	r3, [r7, #30]
 80044fe:	3b01      	subs	r3, #1
 8004500:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004502:	8bfb      	ldrh	r3, [r7, #30]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1ea      	bne.n	80044de <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800450a:	4618      	mov	r0, r3
 800450c:	372c      	adds	r7, #44	; 0x2c
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	785b      	ldrb	r3, [r3, #1]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d12c      	bne.n	800458c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	db12      	blt.n	800456a <USB_EPSetStall+0x54>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00f      	beq.n	800456a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	0151      	lsls	r1, r2, #5
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	440a      	add	r2, r1
 8004560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004564:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004568:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	0151      	lsls	r1, r2, #5
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	440a      	add	r2, r1
 8004580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e02b      	b.n	80045e4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	db12      	blt.n	80045c4 <USB_EPSetStall+0xae>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00f      	beq.n	80045c4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045c2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	0151      	lsls	r1, r2, #5
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	440a      	add	r2, r1
 80045da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	785b      	ldrb	r3, [r3, #1]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d128      	bne.n	8004660 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004628:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800462c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	78db      	ldrb	r3, [r3, #3]
 8004632:	2b03      	cmp	r3, #3
 8004634:	d003      	beq.n	800463e <USB_EPClearStall+0x4c>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	78db      	ldrb	r3, [r3, #3]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d138      	bne.n	80046b0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	0151      	lsls	r1, r2, #5
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	440a      	add	r2, r1
 8004654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e027      	b.n	80046b0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	0151      	lsls	r1, r2, #5
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	440a      	add	r2, r1
 8004676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800467a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800467e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	78db      	ldrb	r3, [r3, #3]
 8004684:	2b03      	cmp	r3, #3
 8004686:	d003      	beq.n	8004690 <USB_EPClearStall+0x9e>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	78db      	ldrb	r3, [r3, #3]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d10f      	bne.n	80046b0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	0151      	lsls	r1, r2, #5
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	440a      	add	r2, r1
 80046a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ae:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	460b      	mov	r3, r1
 80046c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80046e0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	78fb      	ldrb	r3, [r7, #3]
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80046f2:	68f9      	ldr	r1, [r7, #12]
 80046f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046f8:	4313      	orrs	r3, r2
 80046fa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004724:	f023 0303 	bic.w	r3, r3, #3
 8004728:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004738:	f023 0302 	bic.w	r3, r3, #2
 800473c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004766:	f023 0303 	bic.w	r3, r3, #3
 800476a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800477a:	f043 0302 	orr.w	r3, r3, #2
 800477e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800478e:	b480      	push	{r7}
 8004790:	b085      	sub	sp, #20
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4013      	ands	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047a6:	68fb      	ldr	r3, [r7, #12]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	4013      	ands	r3, r2
 80047d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	0c1b      	lsrs	r3, r3, #16
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	4013      	ands	r3, r2
 800480a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	b29b      	uxth	r3, r3
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800482c:	78fb      	ldrb	r3, [r7, #3]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	4013      	ands	r3, r2
 8004848:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800484a:	68bb      	ldr	r3, [r7, #8]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	01db      	lsls	r3, r3, #7
 800488a:	b2db      	uxtb	r3, r3
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4013      	ands	r3, r2
 80048a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048a6:	68bb      	ldr	r3, [r7, #8]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	f003 0301 	and.w	r3, r3, #1
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80048ee:	f023 0307 	bic.w	r3, r3, #7
 80048f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004906:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	460b      	mov	r3, r1
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	333c      	adds	r3, #60	; 0x3c
 800492e:	3304      	adds	r3, #4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	4a26      	ldr	r2, [pc, #152]	; (80049d0 <USB_EP0_OutStart+0xb8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d90a      	bls.n	8004952 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800494c:	d101      	bne.n	8004952 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	e037      	b.n	80049c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004958:	461a      	mov	r2, r3
 800495a:	2300      	movs	r3, #0
 800495c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800496c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004970:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004980:	f043 0318 	orr.w	r3, r3, #24
 8004984:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004994:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004998:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800499a:	7afb      	ldrb	r3, [r7, #11]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d10f      	bne.n	80049c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	461a      	mov	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80049be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	4f54300a 	.word	0x4f54300a

080049d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3301      	adds	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <USB_CoreReset+0x60>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d901      	bls.n	80049f0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e01a      	b.n	8004a26 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	daf3      	bge.n	80049e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f043 0201 	orr.w	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	4a09      	ldr	r2, [pc, #36]	; (8004a34 <USB_CoreReset+0x60>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d901      	bls.n	8004a18 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e006      	b.n	8004a26 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d0f1      	beq.n	8004a08 <USB_CoreReset+0x34>

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	00030d40 	.word	0x00030d40

08004a38 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004a44:	2054      	movs	r0, #84	; 0x54
 8004a46:	f001 ffd3 	bl	80069f0 <USBD_static_malloc>
 8004a4a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d105      	bne.n	8004a5e <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e039      	b.n	8004ad2 <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	7c1b      	ldrb	r3, [r3, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d107      	bne.n	8004a7e <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2205      	movs	r2, #5
 8004a72:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2205      	movs	r2, #5
 8004a78:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8004a7c:	e006      	b.n	8004a8c <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2205      	movs	r2, #5
 8004a82:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2205      	movs	r2, #5
 8004a88:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8004a8c:	2314      	movs	r3, #20
 8004a8e:	2203      	movs	r2, #3
 8004a90:	2181      	movs	r1, #129	; 0x81
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f001 fe89 	bl	80067aa <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8004a9e:	2308      	movs	r3, #8
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f001 fe80 	bl	80067aa <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	2340      	movs	r3, #64	; 0x40
 8004ac8:	2101      	movs	r1, #1
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f001 ff5c 	bl	8006988 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8004ae6:	2181      	movs	r1, #129	; 0x81
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f001 fe84 	bl	80067f6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8004afa:	2101      	movs	r1, #1
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f001 fe7a 	bl	80067f6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00e      	beq.n	8004b3a <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 ff6d 	bl	8006a0c <USBD_static_free>
    pdev->pClassData = NULL;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b54:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e0ed      	b.n	8004d4c <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d052      	beq.n	8004c22 <USBD_CUSTOM_HID_Setup+0xde>
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	f040 80dd 	bne.w	8004d3c <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	785b      	ldrb	r3, [r3, #1]
 8004b86:	3b02      	subs	r3, #2
 8004b88:	2b09      	cmp	r3, #9
 8004b8a:	d842      	bhi.n	8004c12 <USBD_CUSTOM_HID_Setup+0xce>
 8004b8c:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <USBD_CUSTOM_HID_Setup+0x50>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004bed 	.word	0x08004bed
 8004b98:	08004bcb 	.word	0x08004bcb
 8004b9c:	08004c13 	.word	0x08004c13
 8004ba0:	08004c13 	.word	0x08004c13
 8004ba4:	08004c13 	.word	0x08004c13
 8004ba8:	08004c13 	.word	0x08004c13
 8004bac:	08004c13 	.word	0x08004c13
 8004bb0:	08004bfd 	.word	0x08004bfd
 8004bb4:	08004bdb 	.word	0x08004bdb
 8004bb8:	08004bbd 	.word	0x08004bbd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	885b      	ldrh	r3, [r3, #2]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8004bc8:	e02a      	b.n	8004c20 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	3340      	adds	r3, #64	; 0x40
 8004bce:	2201      	movs	r2, #1
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f001 fa67 	bl	80060a6 <USBD_CtlSendData>
          break;
 8004bd8:	e022      	b.n	8004c20 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	885b      	ldrh	r3, [r3, #2]
 8004bde:	0a1b      	lsrs	r3, r3, #8
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8004bea:	e019      	b.n	8004c20 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	3344      	adds	r3, #68	; 0x44
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f001 fa56 	bl	80060a6 <USBD_CtlSendData>
          break;
 8004bfa:	e011      	b.n	8004c20 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8004c02:	6939      	ldr	r1, [r7, #16]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	88db      	ldrh	r3, [r3, #6]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f001 fa77 	bl	80060fe <USBD_CtlPrepareRx>
          break;
 8004c10:	e006      	b.n	8004c20 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 8004c12:	6839      	ldr	r1, [r7, #0]
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f001 f9d5 	bl	8005fc4 <USBD_CtlError>
          ret = USBD_FAIL;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8004c1e:	bf00      	nop
      }
      break;
 8004c20:	e093      	b.n	8004d4a <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	2b0b      	cmp	r3, #11
 8004c28:	d87f      	bhi.n	8004d2a <USBD_CUSTOM_HID_Setup+0x1e6>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <USBD_CUSTOM_HID_Setup+0xec>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c61 	.word	0x08004c61
 8004c34:	08004d39 	.word	0x08004d39
 8004c38:	08004d2b 	.word	0x08004d2b
 8004c3c:	08004d2b 	.word	0x08004d2b
 8004c40:	08004d2b 	.word	0x08004d2b
 8004c44:	08004d2b 	.word	0x08004d2b
 8004c48:	08004c8b 	.word	0x08004c8b
 8004c4c:	08004d2b 	.word	0x08004d2b
 8004c50:	08004d2b 	.word	0x08004d2b
 8004c54:	08004d2b 	.word	0x08004d2b
 8004c58:	08004cd9 	.word	0x08004cd9
 8004c5c:	08004d03 	.word	0x08004d03
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d107      	bne.n	8004c7c <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004c6c:	f107 030e 	add.w	r3, r7, #14
 8004c70:	2202      	movs	r2, #2
 8004c72:	4619      	mov	r1, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f001 fa16 	bl	80060a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c7a:	e05e      	b.n	8004d3a <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f001 f9a0 	bl	8005fc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c84:	2303      	movs	r3, #3
 8004c86:	75fb      	strb	r3, [r7, #23]
          break;
 8004c88:	e057      	b.n	8004d3a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	885b      	ldrh	r3, [r3, #2]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b22      	cmp	r3, #34	; 0x22
 8004c94:	d10b      	bne.n	8004cae <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	88db      	ldrh	r3, [r3, #6]
 8004c9a:	2bc4      	cmp	r3, #196	; 0xc4
 8004c9c:	bf28      	it	cs
 8004c9e:	23c4      	movcs	r3, #196	; 0xc4
 8004ca0:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	e00d      	b.n	8004cca <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	885b      	ldrh	r3, [r3, #2]
 8004cb2:	0a1b      	lsrs	r3, r3, #8
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b21      	cmp	r3, #33	; 0x21
 8004cb8:	d107      	bne.n	8004cca <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8004cba:	4b26      	ldr	r3, [pc, #152]	; (8004d54 <USBD_CUSTOM_HID_Setup+0x210>)
 8004cbc:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	88db      	ldrh	r3, [r3, #6]
 8004cc2:	2b09      	cmp	r3, #9
 8004cc4:	bf28      	it	cs
 8004cc6:	2309      	movcs	r3, #9
 8004cc8:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004cca:	8bfb      	ldrh	r3, [r7, #30]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	69b9      	ldr	r1, [r7, #24]
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f001 f9e8 	bl	80060a6 <USBD_CtlSendData>
          break;
 8004cd6:	e030      	b.n	8004d3a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d107      	bne.n	8004cf4 <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	3348      	adds	r3, #72	; 0x48
 8004ce8:	2201      	movs	r2, #1
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f001 f9da 	bl	80060a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004cf2:	e022      	b.n	8004d3a <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8004cf4:	6839      	ldr	r1, [r7, #0]
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f001 f964 	bl	8005fc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	75fb      	strb	r3, [r7, #23]
          break;
 8004d00:	e01b      	b.n	8004d3a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d106      	bne.n	8004d1c <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	885b      	ldrh	r3, [r3, #2]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d1a:	e00e      	b.n	8004d3a <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8004d1c:	6839      	ldr	r1, [r7, #0]
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f001 f950 	bl	8005fc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d24:	2303      	movs	r3, #3
 8004d26:	75fb      	strb	r3, [r7, #23]
          break;
 8004d28:	e007      	b.n	8004d3a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004d2a:	6839      	ldr	r1, [r7, #0]
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f001 f949 	bl	8005fc4 <USBD_CtlError>
          ret = USBD_FAIL;
 8004d32:	2303      	movs	r3, #3
 8004d34:	75fb      	strb	r3, [r7, #23]
          break;
 8004d36:	e000      	b.n	8004d3a <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 8004d38:	bf00      	nop
      }
      break;
 8004d3a:	e006      	b.n	8004d4a <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8004d3c:	6839      	ldr	r1, [r7, #0]
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f001 f940 	bl	8005fc4 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d44:	2303      	movs	r3, #3
 8004d46:	75fb      	strb	r3, [r7, #23]
      break;
 8004d48:	bf00      	nop
  }
  return (uint8_t)ret;
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3720      	adds	r7, #32
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20000218 	.word	0x20000218

08004d58 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2299      	movs	r2, #153	; 0x99
 8004d64:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8004d66:	4b03      	ldr	r3, [pc, #12]	; (8004d74 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	20000044 	.word	0x20000044

08004d78 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2299      	movs	r2, #153	; 0x99
 8004d84:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8004d86:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	200000e0 	.word	0x200000e0

08004d98 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2299      	movs	r2, #153	; 0x99
 8004da4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8004da6:	4b03      	ldr	r3, [pc, #12]	; (8004db4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	2000017c 	.word	0x2000017c

08004db8 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	460b      	mov	r3, r1
 8004de8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e00b      	b.n	8004e10 <USBD_CUSTOM_HID_DataOut+0x32>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e00a      	b.n	8004e44 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	2340      	movs	r3, #64	; 0x40
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f001 fda3 	bl	8006988 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e5a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e00e      	b.n	8004e84 <USBD_CUSTOM_HID_EP0_RxReady+0x38>
  }

  if (hhid->IsReportAvailable == 1U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d109      	bne.n	8004e82 <USBD_CUSTOM_HID_EP0_RxReady+0x36>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	220a      	movs	r2, #10
 8004e98:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8004e9a:	4b03      	ldr	r3, [pc, #12]	; (8004ea8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	20000224 	.word	0x20000224

08004eac <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e004      	b.n	8004eca <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b086      	sub	sp, #24
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e01f      	b.n	8004f2e <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	79fa      	ldrb	r2, [r7, #7]
 8004f20:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f001 fbda 	bl	80066dc <USBD_LL_Init>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b084      	sub	sp, #16
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e016      	b.n	8004f7c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	f107 020e 	add.w	r2, r7, #14
 8004f6e:	4610      	mov	r0, r2
 8004f70:	4798      	blx	r3
 8004f72:	4602      	mov	r2, r0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f001 fbf1 	bl	8006774 <USBD_LL_Start>
 8004f92:	4603      	mov	r3, r0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d009      	beq.n	8004fe0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	78fa      	ldrb	r2, [r7, #3]
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
 8004fdc:	4603      	mov	r3, r0
 8004fde:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d007      	beq.n	8005010 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	78fa      	ldrb	r2, [r7, #3]
 800500a:	4611      	mov	r1, r2
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	4798      	blx	r3
  }

  return USBD_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800502a:	6839      	ldr	r1, [r7, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f000 ff8f 	bl	8005f50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005040:	461a      	mov	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	2b02      	cmp	r3, #2
 8005054:	d01a      	beq.n	800508c <USBD_LL_SetupStage+0x72>
 8005056:	2b02      	cmp	r3, #2
 8005058:	d822      	bhi.n	80050a0 <USBD_LL_SetupStage+0x86>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <USBD_LL_SetupStage+0x4a>
 800505e:	2b01      	cmp	r3, #1
 8005060:	d00a      	beq.n	8005078 <USBD_LL_SetupStage+0x5e>
 8005062:	e01d      	b.n	80050a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800506a:	4619      	mov	r1, r3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fa61 	bl	8005534 <USBD_StdDevReq>
 8005072:	4603      	mov	r3, r0
 8005074:	73fb      	strb	r3, [r7, #15]
      break;
 8005076:	e020      	b.n	80050ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fac5 	bl	8005610 <USBD_StdItfReq>
 8005086:	4603      	mov	r3, r0
 8005088:	73fb      	strb	r3, [r7, #15]
      break;
 800508a:	e016      	b.n	80050ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fb04 	bl	80056a2 <USBD_StdEPReq>
 800509a:	4603      	mov	r3, r0
 800509c:	73fb      	strb	r3, [r7, #15]
      break;
 800509e:	e00c      	b.n	80050ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80050a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f001 fbc0 	bl	8006834 <USBD_LL_StallEP>
 80050b4:	4603      	mov	r3, r0
 80050b6:	73fb      	strb	r3, [r7, #15]
      break;
 80050b8:	bf00      	nop
  }

  return ret;
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	460b      	mov	r3, r1
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80050d2:	7afb      	ldrb	r3, [r7, #11]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d138      	bne.n	800514a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80050de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d14a      	bne.n	8005180 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d913      	bls.n	800511e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	1ad2      	subs	r2, r2, r3
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	4293      	cmp	r3, r2
 800510e:	bf28      	it	cs
 8005110:	4613      	movcs	r3, r2
 8005112:	461a      	mov	r2, r3
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f001 f80e 	bl	8006138 <USBD_CtlContinueRx>
 800511c:	e030      	b.n	8005180 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b03      	cmp	r3, #3
 8005128:	d10b      	bne.n	8005142 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d005      	beq.n	8005142 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f001 f809 	bl	800615a <USBD_CtlSendStatus>
 8005148:	e01a      	b.n	8005180 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b03      	cmp	r3, #3
 8005154:	d114      	bne.n	8005180 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00e      	beq.n	8005180 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	7afa      	ldrb	r2, [r7, #11]
 800516c:	4611      	mov	r1, r2
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	4798      	blx	r3
 8005172:	4603      	mov	r3, r0
 8005174:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800517c:	7dfb      	ldrb	r3, [r7, #23]
 800517e:	e000      	b.n	8005182 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b086      	sub	sp, #24
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	460b      	mov	r3, r1
 8005194:	607a      	str	r2, [r7, #4]
 8005196:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005198:	7afb      	ldrb	r3, [r7, #11]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d16b      	bne.n	8005276 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3314      	adds	r3, #20
 80051a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d156      	bne.n	800525c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d914      	bls.n	80051e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	1ad2      	subs	r2, r2, r3
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	461a      	mov	r2, r3
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 ff83 	bl	80060dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80051d6:	2300      	movs	r3, #0
 80051d8:	2200      	movs	r2, #0
 80051da:	2100      	movs	r1, #0
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f001 fbd3 	bl	8006988 <USBD_LL_PrepareReceive>
 80051e2:	e03b      	b.n	800525c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d11c      	bne.n	800522a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d316      	bcc.n	800522a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005206:	429a      	cmp	r2, r3
 8005208:	d20f      	bcs.n	800522a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800520a:	2200      	movs	r2, #0
 800520c:	2100      	movs	r1, #0
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 ff64 	bl	80060dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800521c:	2300      	movs	r3, #0
 800521e:	2200      	movs	r2, #0
 8005220:	2100      	movs	r1, #0
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f001 fbb0 	bl	8006988 <USBD_LL_PrepareReceive>
 8005228:	e018      	b.n	800525c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b03      	cmp	r3, #3
 8005234:	d10b      	bne.n	800524e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800524e:	2180      	movs	r1, #128	; 0x80
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f001 faef 	bl	8006834 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 ff92 	bl	8006180 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005262:	2b01      	cmp	r3, #1
 8005264:	d122      	bne.n	80052ac <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f7ff fe98 	bl	8004f9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005274:	e01a      	b.n	80052ac <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b03      	cmp	r3, #3
 8005280:	d114      	bne.n	80052ac <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00e      	beq.n	80052ac <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	7afa      	ldrb	r2, [r7, #11]
 8005298:	4611      	mov	r1, r2
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	4798      	blx	r3
 800529e:	4603      	mov	r3, r0
 80052a0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
 80052aa:	e000      	b.n	80052ae <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b082      	sub	sp, #8
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e02f      	b.n	800534a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00f      	beq.n	8005314 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d009      	beq.n	8005314 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6852      	ldr	r2, [r2, #4]
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	4611      	mov	r1, r2
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005314:	2308      	movs	r3, #8
 8005316:	2200      	movs	r2, #0
 8005318:	2100      	movs	r1, #0
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f001 fa45 	bl	80067aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2208      	movs	r2, #8
 800532c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005330:	2308      	movs	r3, #8
 8005332:	2200      	movs	r2, #0
 8005334:	2180      	movs	r1, #128	; 0x80
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f001 fa37 	bl	80067aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2208      	movs	r2, #8
 8005346:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	460b      	mov	r3, r1
 800535c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	78fa      	ldrb	r2, [r7, #3]
 8005362:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005380:	b2da      	uxtb	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2204      	movs	r2, #4
 800538c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d106      	bne.n	80053c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e012      	b.n	800540a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d10b      	bne.n	8005408 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	460b      	mov	r3, r1
 800541c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005428:	2303      	movs	r3, #3
 800542a:	e014      	b.n	8005456 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b03      	cmp	r3, #3
 8005436:	d10d      	bne.n	8005454 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	78fa      	ldrb	r2, [r7, #3]
 800544e:	4611      	mov	r1, r2
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	460b      	mov	r3, r1
 8005468:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005474:	2303      	movs	r3, #3
 8005476:	e014      	b.n	80054a2 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b03      	cmp	r3, #3
 8005482:	d10d      	bne.n	80054a0 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	4611      	mov	r1, r2
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d009      	beq.n	80054ee <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6852      	ldr	r2, [r2, #4]
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	4611      	mov	r1, r2
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	4798      	blx	r3
  }

  return USBD_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	3301      	adds	r3, #1
 800550e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005516:	8a3b      	ldrh	r3, [r7, #16]
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	b21a      	sxth	r2, r3
 800551c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005520:	4313      	orrs	r3, r2
 8005522:	b21b      	sxth	r3, r3
 8005524:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005526:	89fb      	ldrh	r3, [r7, #14]
}
 8005528:	4618      	mov	r0, r3
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800554a:	2b40      	cmp	r3, #64	; 0x40
 800554c:	d005      	beq.n	800555a <USBD_StdDevReq+0x26>
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	d853      	bhi.n	80055fa <USBD_StdDevReq+0xc6>
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <USBD_StdDevReq+0x3a>
 8005556:	2b20      	cmp	r3, #32
 8005558:	d14f      	bne.n	80055fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	6839      	ldr	r1, [r7, #0]
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	4798      	blx	r3
 8005568:	4603      	mov	r3, r0
 800556a:	73fb      	strb	r3, [r7, #15]
      break;
 800556c:	e04a      	b.n	8005604 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	785b      	ldrb	r3, [r3, #1]
 8005572:	2b09      	cmp	r3, #9
 8005574:	d83b      	bhi.n	80055ee <USBD_StdDevReq+0xba>
 8005576:	a201      	add	r2, pc, #4	; (adr r2, 800557c <USBD_StdDevReq+0x48>)
 8005578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557c:	080055d1 	.word	0x080055d1
 8005580:	080055e5 	.word	0x080055e5
 8005584:	080055ef 	.word	0x080055ef
 8005588:	080055db 	.word	0x080055db
 800558c:	080055ef 	.word	0x080055ef
 8005590:	080055af 	.word	0x080055af
 8005594:	080055a5 	.word	0x080055a5
 8005598:	080055ef 	.word	0x080055ef
 800559c:	080055c7 	.word	0x080055c7
 80055a0:	080055b9 	.word	0x080055b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80055a4:	6839      	ldr	r1, [r7, #0]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f9de 	bl	8005968 <USBD_GetDescriptor>
          break;
 80055ac:	e024      	b.n	80055f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fb43 	bl	8005c3c <USBD_SetAddress>
          break;
 80055b6:	e01f      	b.n	80055f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fb82 	bl	8005cc4 <USBD_SetConfig>
 80055c0:	4603      	mov	r3, r0
 80055c2:	73fb      	strb	r3, [r7, #15]
          break;
 80055c4:	e018      	b.n	80055f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80055c6:	6839      	ldr	r1, [r7, #0]
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fc21 	bl	8005e10 <USBD_GetConfig>
          break;
 80055ce:	e013      	b.n	80055f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80055d0:	6839      	ldr	r1, [r7, #0]
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fc52 	bl	8005e7c <USBD_GetStatus>
          break;
 80055d8:	e00e      	b.n	80055f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80055da:	6839      	ldr	r1, [r7, #0]
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fc81 	bl	8005ee4 <USBD_SetFeature>
          break;
 80055e2:	e009      	b.n	80055f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fc90 	bl	8005f0c <USBD_ClrFeature>
          break;
 80055ec:	e004      	b.n	80055f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80055ee:	6839      	ldr	r1, [r7, #0]
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fce7 	bl	8005fc4 <USBD_CtlError>
          break;
 80055f6:	bf00      	nop
      }
      break;
 80055f8:	e004      	b.n	8005604 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fce1 	bl	8005fc4 <USBD_CtlError>
      break;
 8005602:	bf00      	nop
  }

  return ret;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop

08005610 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d005      	beq.n	8005636 <USBD_StdItfReq+0x26>
 800562a:	2b40      	cmp	r3, #64	; 0x40
 800562c:	d82f      	bhi.n	800568e <USBD_StdItfReq+0x7e>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <USBD_StdItfReq+0x26>
 8005632:	2b20      	cmp	r3, #32
 8005634:	d12b      	bne.n	800568e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800563c:	b2db      	uxtb	r3, r3
 800563e:	3b01      	subs	r3, #1
 8005640:	2b02      	cmp	r3, #2
 8005642:	d81d      	bhi.n	8005680 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	889b      	ldrh	r3, [r3, #4]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b01      	cmp	r3, #1
 800564c:	d813      	bhi.n	8005676 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	88db      	ldrh	r3, [r3, #6]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d110      	bne.n	800568a <USBD_StdItfReq+0x7a>
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10d      	bne.n	800568a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fd73 	bl	800615a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005674:	e009      	b.n	800568a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fca3 	bl	8005fc4 <USBD_CtlError>
          break;
 800567e:	e004      	b.n	800568a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fc9e 	bl	8005fc4 <USBD_CtlError>
          break;
 8005688:	e000      	b.n	800568c <USBD_StdItfReq+0x7c>
          break;
 800568a:	bf00      	nop
      }
      break;
 800568c:	e004      	b.n	8005698 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fc97 	bl	8005fc4 <USBD_CtlError>
      break;
 8005696:	bf00      	nop
  }

  return ret;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	889b      	ldrh	r3, [r3, #4]
 80056b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056be:	2b40      	cmp	r3, #64	; 0x40
 80056c0:	d007      	beq.n	80056d2 <USBD_StdEPReq+0x30>
 80056c2:	2b40      	cmp	r3, #64	; 0x40
 80056c4:	f200 8145 	bhi.w	8005952 <USBD_StdEPReq+0x2b0>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00c      	beq.n	80056e6 <USBD_StdEPReq+0x44>
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	f040 8140 	bne.w	8005952 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	6839      	ldr	r1, [r7, #0]
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	4798      	blx	r3
 80056e0:	4603      	mov	r3, r0
 80056e2:	73fb      	strb	r3, [r7, #15]
      break;
 80056e4:	e13a      	b.n	800595c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d007      	beq.n	80056fe <USBD_StdEPReq+0x5c>
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	f300 8129 	bgt.w	8005946 <USBD_StdEPReq+0x2a4>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d07f      	beq.n	80057f8 <USBD_StdEPReq+0x156>
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d03c      	beq.n	8005776 <USBD_StdEPReq+0xd4>
 80056fc:	e123      	b.n	8005946 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d002      	beq.n	8005710 <USBD_StdEPReq+0x6e>
 800570a:	2b03      	cmp	r3, #3
 800570c:	d016      	beq.n	800573c <USBD_StdEPReq+0x9a>
 800570e:	e02c      	b.n	800576a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005710:	7bbb      	ldrb	r3, [r7, #14]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00d      	beq.n	8005732 <USBD_StdEPReq+0x90>
 8005716:	7bbb      	ldrb	r3, [r7, #14]
 8005718:	2b80      	cmp	r3, #128	; 0x80
 800571a:	d00a      	beq.n	8005732 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800571c:	7bbb      	ldrb	r3, [r7, #14]
 800571e:	4619      	mov	r1, r3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f001 f887 	bl	8006834 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005726:	2180      	movs	r1, #128	; 0x80
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f001 f883 	bl	8006834 <USBD_LL_StallEP>
 800572e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005730:	e020      	b.n	8005774 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005732:	6839      	ldr	r1, [r7, #0]
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fc45 	bl	8005fc4 <USBD_CtlError>
              break;
 800573a:	e01b      	b.n	8005774 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	885b      	ldrh	r3, [r3, #2]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10e      	bne.n	8005762 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005744:	7bbb      	ldrb	r3, [r7, #14]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00b      	beq.n	8005762 <USBD_StdEPReq+0xc0>
 800574a:	7bbb      	ldrb	r3, [r7, #14]
 800574c:	2b80      	cmp	r3, #128	; 0x80
 800574e:	d008      	beq.n	8005762 <USBD_StdEPReq+0xc0>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	88db      	ldrh	r3, [r3, #6]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d104      	bne.n	8005762 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005758:	7bbb      	ldrb	r3, [r7, #14]
 800575a:	4619      	mov	r1, r3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f001 f869 	bl	8006834 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fcf9 	bl	800615a <USBD_CtlSendStatus>

              break;
 8005768:	e004      	b.n	8005774 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fc29 	bl	8005fc4 <USBD_CtlError>
              break;
 8005772:	bf00      	nop
          }
          break;
 8005774:	e0ec      	b.n	8005950 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d002      	beq.n	8005788 <USBD_StdEPReq+0xe6>
 8005782:	2b03      	cmp	r3, #3
 8005784:	d016      	beq.n	80057b4 <USBD_StdEPReq+0x112>
 8005786:	e030      	b.n	80057ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005788:	7bbb      	ldrb	r3, [r7, #14]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00d      	beq.n	80057aa <USBD_StdEPReq+0x108>
 800578e:	7bbb      	ldrb	r3, [r7, #14]
 8005790:	2b80      	cmp	r3, #128	; 0x80
 8005792:	d00a      	beq.n	80057aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005794:	7bbb      	ldrb	r3, [r7, #14]
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 f84b 	bl	8006834 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800579e:	2180      	movs	r1, #128	; 0x80
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f001 f847 	bl	8006834 <USBD_LL_StallEP>
 80057a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057a8:	e025      	b.n	80057f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80057aa:	6839      	ldr	r1, [r7, #0]
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fc09 	bl	8005fc4 <USBD_CtlError>
              break;
 80057b2:	e020      	b.n	80057f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	885b      	ldrh	r3, [r3, #2]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d11b      	bne.n	80057f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80057bc:	7bbb      	ldrb	r3, [r7, #14]
 80057be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80057c6:	7bbb      	ldrb	r3, [r7, #14]
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f001 f851 	bl	8006872 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fcc2 	bl	800615a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	4798      	blx	r3
 80057e4:	4603      	mov	r3, r0
 80057e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80057e8:	e004      	b.n	80057f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fbe9 	bl	8005fc4 <USBD_CtlError>
              break;
 80057f2:	e000      	b.n	80057f6 <USBD_StdEPReq+0x154>
              break;
 80057f4:	bf00      	nop
          }
          break;
 80057f6:	e0ab      	b.n	8005950 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d002      	beq.n	800580a <USBD_StdEPReq+0x168>
 8005804:	2b03      	cmp	r3, #3
 8005806:	d032      	beq.n	800586e <USBD_StdEPReq+0x1cc>
 8005808:	e097      	b.n	800593a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800580a:	7bbb      	ldrb	r3, [r7, #14]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d007      	beq.n	8005820 <USBD_StdEPReq+0x17e>
 8005810:	7bbb      	ldrb	r3, [r7, #14]
 8005812:	2b80      	cmp	r3, #128	; 0x80
 8005814:	d004      	beq.n	8005820 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005816:	6839      	ldr	r1, [r7, #0]
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fbd3 	bl	8005fc4 <USBD_CtlError>
                break;
 800581e:	e091      	b.n	8005944 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005824:	2b00      	cmp	r3, #0
 8005826:	da0b      	bge.n	8005840 <USBD_StdEPReq+0x19e>
 8005828:	7bbb      	ldrb	r3, [r7, #14]
 800582a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	3310      	adds	r3, #16
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	4413      	add	r3, r2
 800583c:	3304      	adds	r3, #4
 800583e:	e00b      	b.n	8005858 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005840:	7bbb      	ldrb	r3, [r7, #14]
 8005842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	4413      	add	r3, r2
 8005856:	3304      	adds	r3, #4
 8005858:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2202      	movs	r2, #2
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fc1d 	bl	80060a6 <USBD_CtlSendData>
              break;
 800586c:	e06a      	b.n	8005944 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800586e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005872:	2b00      	cmp	r3, #0
 8005874:	da11      	bge.n	800589a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005876:	7bbb      	ldrb	r3, [r7, #14]
 8005878:	f003 020f 	and.w	r2, r3, #15
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	4613      	mov	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	440b      	add	r3, r1
 8005888:	3324      	adds	r3, #36	; 0x24
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d117      	bne.n	80058c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fb96 	bl	8005fc4 <USBD_CtlError>
                  break;
 8005898:	e054      	b.n	8005944 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800589a:	7bbb      	ldrb	r3, [r7, #14]
 800589c:	f003 020f 	and.w	r2, r3, #15
 80058a0:	6879      	ldr	r1, [r7, #4]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	440b      	add	r3, r1
 80058ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d104      	bne.n	80058c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fb83 	bl	8005fc4 <USBD_CtlError>
                  break;
 80058be:	e041      	b.n	8005944 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	da0b      	bge.n	80058e0 <USBD_StdEPReq+0x23e>
 80058c8:	7bbb      	ldrb	r3, [r7, #14]
 80058ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	3310      	adds	r3, #16
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	4413      	add	r3, r2
 80058dc:	3304      	adds	r3, #4
 80058de:	e00b      	b.n	80058f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058e0:	7bbb      	ldrb	r3, [r7, #14]
 80058e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	4413      	add	r3, r2
 80058f6:	3304      	adds	r3, #4
 80058f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80058fa:	7bbb      	ldrb	r3, [r7, #14]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <USBD_StdEPReq+0x264>
 8005900:	7bbb      	ldrb	r3, [r7, #14]
 8005902:	2b80      	cmp	r3, #128	; 0x80
 8005904:	d103      	bne.n	800590e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e00e      	b.n	800592c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 ffcc 	bl	80068b0 <USBD_LL_IsStallEP>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2201      	movs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	e002      	b.n	800592c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2202      	movs	r2, #2
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fbb7 	bl	80060a6 <USBD_CtlSendData>
              break;
 8005938:	e004      	b.n	8005944 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800593a:	6839      	ldr	r1, [r7, #0]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fb41 	bl	8005fc4 <USBD_CtlError>
              break;
 8005942:	bf00      	nop
          }
          break;
 8005944:	e004      	b.n	8005950 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fb3b 	bl	8005fc4 <USBD_CtlError>
          break;
 800594e:	bf00      	nop
      }
      break;
 8005950:	e004      	b.n	800595c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fb35 	bl	8005fc4 <USBD_CtlError>
      break;
 800595a:	bf00      	nop
  }

  return ret;
 800595c:	7bfb      	ldrb	r3, [r7, #15]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	885b      	ldrh	r3, [r3, #2]
 8005982:	0a1b      	lsrs	r3, r3, #8
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b01      	subs	r3, #1
 8005988:	2b06      	cmp	r3, #6
 800598a:	f200 8128 	bhi.w	8005bde <USBD_GetDescriptor+0x276>
 800598e:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <USBD_GetDescriptor+0x2c>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	080059b1 	.word	0x080059b1
 8005998:	080059c9 	.word	0x080059c9
 800599c:	08005a09 	.word	0x08005a09
 80059a0:	08005bdf 	.word	0x08005bdf
 80059a4:	08005bdf 	.word	0x08005bdf
 80059a8:	08005b7f 	.word	0x08005b7f
 80059ac:	08005bab 	.word	0x08005bab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	7c12      	ldrb	r2, [r2, #16]
 80059bc:	f107 0108 	add.w	r1, r7, #8
 80059c0:	4610      	mov	r0, r2
 80059c2:	4798      	blx	r3
 80059c4:	60f8      	str	r0, [r7, #12]
      break;
 80059c6:	e112      	b.n	8005bee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	7c1b      	ldrb	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10d      	bne.n	80059ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d8:	f107 0208 	add.w	r2, r7, #8
 80059dc:	4610      	mov	r0, r2
 80059de:	4798      	blx	r3
 80059e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3301      	adds	r3, #1
 80059e6:	2202      	movs	r2, #2
 80059e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80059ea:	e100      	b.n	8005bee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	f107 0208 	add.w	r2, r7, #8
 80059f8:	4610      	mov	r0, r2
 80059fa:	4798      	blx	r3
 80059fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3301      	adds	r3, #1
 8005a02:	2202      	movs	r2, #2
 8005a04:	701a      	strb	r2, [r3, #0]
      break;
 8005a06:	e0f2      	b.n	8005bee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	885b      	ldrh	r3, [r3, #2]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b05      	cmp	r3, #5
 8005a10:	f200 80ac 	bhi.w	8005b6c <USBD_GetDescriptor+0x204>
 8005a14:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <USBD_GetDescriptor+0xb4>)
 8005a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1a:	bf00      	nop
 8005a1c:	08005a35 	.word	0x08005a35
 8005a20:	08005a69 	.word	0x08005a69
 8005a24:	08005a9d 	.word	0x08005a9d
 8005a28:	08005ad1 	.word	0x08005ad1
 8005a2c:	08005b05 	.word	0x08005b05
 8005a30:	08005b39 	.word	0x08005b39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00b      	beq.n	8005a58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	7c12      	ldrb	r2, [r2, #16]
 8005a4c:	f107 0108 	add.w	r1, r7, #8
 8005a50:	4610      	mov	r0, r2
 8005a52:	4798      	blx	r3
 8005a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a56:	e091      	b.n	8005b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a58:	6839      	ldr	r1, [r7, #0]
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fab2 	bl	8005fc4 <USBD_CtlError>
            err++;
 8005a60:	7afb      	ldrb	r3, [r7, #11]
 8005a62:	3301      	adds	r3, #1
 8005a64:	72fb      	strb	r3, [r7, #11]
          break;
 8005a66:	e089      	b.n	8005b7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00b      	beq.n	8005a8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	7c12      	ldrb	r2, [r2, #16]
 8005a80:	f107 0108 	add.w	r1, r7, #8
 8005a84:	4610      	mov	r0, r2
 8005a86:	4798      	blx	r3
 8005a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a8a:	e077      	b.n	8005b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a8c:	6839      	ldr	r1, [r7, #0]
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fa98 	bl	8005fc4 <USBD_CtlError>
            err++;
 8005a94:	7afb      	ldrb	r3, [r7, #11]
 8005a96:	3301      	adds	r3, #1
 8005a98:	72fb      	strb	r3, [r7, #11]
          break;
 8005a9a:	e06f      	b.n	8005b7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00b      	beq.n	8005ac0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	7c12      	ldrb	r2, [r2, #16]
 8005ab4:	f107 0108 	add.w	r1, r7, #8
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4798      	blx	r3
 8005abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005abe:	e05d      	b.n	8005b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fa7e 	bl	8005fc4 <USBD_CtlError>
            err++;
 8005ac8:	7afb      	ldrb	r3, [r7, #11]
 8005aca:	3301      	adds	r3, #1
 8005acc:	72fb      	strb	r3, [r7, #11]
          break;
 8005ace:	e055      	b.n	8005b7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00b      	beq.n	8005af4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	7c12      	ldrb	r2, [r2, #16]
 8005ae8:	f107 0108 	add.w	r1, r7, #8
 8005aec:	4610      	mov	r0, r2
 8005aee:	4798      	blx	r3
 8005af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005af2:	e043      	b.n	8005b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fa64 	bl	8005fc4 <USBD_CtlError>
            err++;
 8005afc:	7afb      	ldrb	r3, [r7, #11]
 8005afe:	3301      	adds	r3, #1
 8005b00:	72fb      	strb	r3, [r7, #11]
          break;
 8005b02:	e03b      	b.n	8005b7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00b      	beq.n	8005b28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	7c12      	ldrb	r2, [r2, #16]
 8005b1c:	f107 0108 	add.w	r1, r7, #8
 8005b20:	4610      	mov	r0, r2
 8005b22:	4798      	blx	r3
 8005b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b26:	e029      	b.n	8005b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fa4a 	bl	8005fc4 <USBD_CtlError>
            err++;
 8005b30:	7afb      	ldrb	r3, [r7, #11]
 8005b32:	3301      	adds	r3, #1
 8005b34:	72fb      	strb	r3, [r7, #11]
          break;
 8005b36:	e021      	b.n	8005b7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00b      	beq.n	8005b5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	7c12      	ldrb	r2, [r2, #16]
 8005b50:	f107 0108 	add.w	r1, r7, #8
 8005b54:	4610      	mov	r0, r2
 8005b56:	4798      	blx	r3
 8005b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b5a:	e00f      	b.n	8005b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fa30 	bl	8005fc4 <USBD_CtlError>
            err++;
 8005b64:	7afb      	ldrb	r3, [r7, #11]
 8005b66:	3301      	adds	r3, #1
 8005b68:	72fb      	strb	r3, [r7, #11]
          break;
 8005b6a:	e007      	b.n	8005b7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fa28 	bl	8005fc4 <USBD_CtlError>
          err++;
 8005b74:	7afb      	ldrb	r3, [r7, #11]
 8005b76:	3301      	adds	r3, #1
 8005b78:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005b7a:	bf00      	nop
      }
      break;
 8005b7c:	e037      	b.n	8005bee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	7c1b      	ldrb	r3, [r3, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d109      	bne.n	8005b9a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8e:	f107 0208 	add.w	r2, r7, #8
 8005b92:	4610      	mov	r0, r2
 8005b94:	4798      	blx	r3
 8005b96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b98:	e029      	b.n	8005bee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005b9a:	6839      	ldr	r1, [r7, #0]
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fa11 	bl	8005fc4 <USBD_CtlError>
        err++;
 8005ba2:	7afb      	ldrb	r3, [r7, #11]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	72fb      	strb	r3, [r7, #11]
      break;
 8005ba8:	e021      	b.n	8005bee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	7c1b      	ldrb	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10d      	bne.n	8005bce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	f107 0208 	add.w	r2, r7, #8
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	4798      	blx	r3
 8005bc2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	2207      	movs	r2, #7
 8005bca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bcc:	e00f      	b.n	8005bee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f9f7 	bl	8005fc4 <USBD_CtlError>
        err++;
 8005bd6:	7afb      	ldrb	r3, [r7, #11]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	72fb      	strb	r3, [r7, #11]
      break;
 8005bdc:	e007      	b.n	8005bee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005bde:	6839      	ldr	r1, [r7, #0]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f9ef 	bl	8005fc4 <USBD_CtlError>
      err++;
 8005be6:	7afb      	ldrb	r3, [r7, #11]
 8005be8:	3301      	adds	r3, #1
 8005bea:	72fb      	strb	r3, [r7, #11]
      break;
 8005bec:	bf00      	nop
  }

  if (err != 0U)
 8005bee:	7afb      	ldrb	r3, [r7, #11]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d11e      	bne.n	8005c32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	88db      	ldrh	r3, [r3, #6]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d016      	beq.n	8005c2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005bfc:	893b      	ldrh	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00e      	beq.n	8005c20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	88da      	ldrh	r2, [r3, #6]
 8005c06:	893b      	ldrh	r3, [r7, #8]
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	bf28      	it	cs
 8005c0c:	4613      	movcs	r3, r2
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c12:	893b      	ldrh	r3, [r7, #8]
 8005c14:	461a      	mov	r2, r3
 8005c16:	68f9      	ldr	r1, [r7, #12]
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fa44 	bl	80060a6 <USBD_CtlSendData>
 8005c1e:	e009      	b.n	8005c34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f9ce 	bl	8005fc4 <USBD_CtlError>
 8005c28:	e004      	b.n	8005c34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fa95 	bl	800615a <USBD_CtlSendStatus>
 8005c30:	e000      	b.n	8005c34 <USBD_GetDescriptor+0x2cc>
    return;
 8005c32:	bf00      	nop
  }
}
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop

08005c3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	889b      	ldrh	r3, [r3, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d131      	bne.n	8005cb2 <USBD_SetAddress+0x76>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	88db      	ldrh	r3, [r3, #6]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d12d      	bne.n	8005cb2 <USBD_SetAddress+0x76>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	885b      	ldrh	r3, [r3, #2]
 8005c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c5c:	d829      	bhi.n	8005cb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	885b      	ldrh	r3, [r3, #2]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d104      	bne.n	8005c80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005c76:	6839      	ldr	r1, [r7, #0]
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f9a3 	bl	8005fc4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c7e:	e01d      	b.n	8005cbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	7bfa      	ldrb	r2, [r7, #15]
 8005c84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fe3b 	bl	8006908 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fa61 	bl	800615a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d004      	beq.n	8005ca8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca6:	e009      	b.n	8005cbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cb0:	e004      	b.n	8005cbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f985 	bl	8005fc4 <USBD_CtlError>
  }
}
 8005cba:	bf00      	nop
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	885b      	ldrh	r3, [r3, #2]
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	4b4c      	ldr	r3, [pc, #304]	; (8005e0c <USBD_SetConfig+0x148>)
 8005cda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005cdc:	4b4b      	ldr	r3, [pc, #300]	; (8005e0c <USBD_SetConfig+0x148>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d905      	bls.n	8005cf0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005ce4:	6839      	ldr	r1, [r7, #0]
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f96c 	bl	8005fc4 <USBD_CtlError>
    return USBD_FAIL;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e088      	b.n	8005e02 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d002      	beq.n	8005d02 <USBD_SetConfig+0x3e>
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d025      	beq.n	8005d4c <USBD_SetConfig+0x88>
 8005d00:	e071      	b.n	8005de6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005d02:	4b42      	ldr	r3, [pc, #264]	; (8005e0c <USBD_SetConfig+0x148>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d01c      	beq.n	8005d44 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005d0a:	4b40      	ldr	r3, [pc, #256]	; (8005e0c <USBD_SetConfig+0x148>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d14:	4b3d      	ldr	r3, [pc, #244]	; (8005e0c <USBD_SetConfig+0x148>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff f949 	bl	8004fb2 <USBD_SetClassConfig>
 8005d20:	4603      	mov	r3, r0
 8005d22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d004      	beq.n	8005d34 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f949 	bl	8005fc4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005d32:	e065      	b.n	8005e00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fa10 	bl	800615a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005d42:	e05d      	b.n	8005e00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fa08 	bl	800615a <USBD_CtlSendStatus>
      break;
 8005d4a:	e059      	b.n	8005e00 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005d4c:	4b2f      	ldr	r3, [pc, #188]	; (8005e0c <USBD_SetConfig+0x148>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d112      	bne.n	8005d7a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005d5c:	4b2b      	ldr	r3, [pc, #172]	; (8005e0c <USBD_SetConfig+0x148>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005d66:	4b29      	ldr	r3, [pc, #164]	; (8005e0c <USBD_SetConfig+0x148>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff f93c 	bl	8004fea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f9f1 	bl	800615a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005d78:	e042      	b.n	8005e00 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005d7a:	4b24      	ldr	r3, [pc, #144]	; (8005e0c <USBD_SetConfig+0x148>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d02a      	beq.n	8005dde <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff f92a 	bl	8004fea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005d96:	4b1d      	ldr	r3, [pc, #116]	; (8005e0c <USBD_SetConfig+0x148>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005da0:	4b1a      	ldr	r3, [pc, #104]	; (8005e0c <USBD_SetConfig+0x148>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	4619      	mov	r1, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff f903 	bl	8004fb2 <USBD_SetClassConfig>
 8005dac:	4603      	mov	r3, r0
 8005dae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00f      	beq.n	8005dd6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f903 	bl	8005fc4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff f90f 	bl	8004fea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005dd4:	e014      	b.n	8005e00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f9bf 	bl	800615a <USBD_CtlSendStatus>
      break;
 8005ddc:	e010      	b.n	8005e00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f9bb 	bl	800615a <USBD_CtlSendStatus>
      break;
 8005de4:	e00c      	b.n	8005e00 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f8eb 	bl	8005fc4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005dee:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <USBD_SetConfig+0x148>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff f8f8 	bl	8004fea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8005dfe:	bf00      	nop
  }

  return ret;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	200003dc 	.word	0x200003dc

08005e10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	88db      	ldrh	r3, [r3, #6]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d004      	beq.n	8005e2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f8cd 	bl	8005fc4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e2a:	e023      	b.n	8005e74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	dc02      	bgt.n	8005e3e <USBD_GetConfig+0x2e>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	dc03      	bgt.n	8005e44 <USBD_GetConfig+0x34>
 8005e3c:	e015      	b.n	8005e6a <USBD_GetConfig+0x5a>
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d00b      	beq.n	8005e5a <USBD_GetConfig+0x4a>
 8005e42:	e012      	b.n	8005e6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	2201      	movs	r2, #1
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f927 	bl	80060a6 <USBD_CtlSendData>
        break;
 8005e58:	e00c      	b.n	8005e74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	2201      	movs	r2, #1
 8005e60:	4619      	mov	r1, r3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f91f 	bl	80060a6 <USBD_CtlSendData>
        break;
 8005e68:	e004      	b.n	8005e74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f8a9 	bl	8005fc4 <USBD_CtlError>
        break;
 8005e72:	bf00      	nop
}
 8005e74:	bf00      	nop
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d81e      	bhi.n	8005ed2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	88db      	ldrh	r3, [r3, #6]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d004      	beq.n	8005ea6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f890 	bl	8005fc4 <USBD_CtlError>
        break;
 8005ea4:	e01a      	b.n	8005edc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f043 0202 	orr.w	r2, r3, #2
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	330c      	adds	r3, #12
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f8eb 	bl	80060a6 <USBD_CtlSendData>
      break;
 8005ed0:	e004      	b.n	8005edc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f875 	bl	8005fc4 <USBD_CtlError>
      break;
 8005eda:	bf00      	nop
  }
}
 8005edc:	bf00      	nop
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	885b      	ldrh	r3, [r3, #2]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d106      	bne.n	8005f04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f92b 	bl	800615a <USBD_CtlSendStatus>
  }
}
 8005f04:	bf00      	nop
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d80b      	bhi.n	8005f3c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	885b      	ldrh	r3, [r3, #2]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d10c      	bne.n	8005f46 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f910 	bl	800615a <USBD_CtlSendStatus>
      }
      break;
 8005f3a:	e004      	b.n	8005f46 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f840 	bl	8005fc4 <USBD_CtlError>
      break;
 8005f44:	e000      	b.n	8005f48 <USBD_ClrFeature+0x3c>
      break;
 8005f46:	bf00      	nop
  }
}
 8005f48:	bf00      	nop
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	781a      	ldrb	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3301      	adds	r3, #1
 8005f78:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff fabc 	bl	80054f8 <SWAPBYTE>
 8005f80:	4603      	mov	r3, r0
 8005f82:	461a      	mov	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3301      	adds	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f7ff faaf 	bl	80054f8 <SWAPBYTE>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3301      	adds	r3, #1
 8005fac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7ff faa2 	bl	80054f8 <SWAPBYTE>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	80da      	strh	r2, [r3, #6]
}
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fce:	2180      	movs	r1, #128	; 0x80
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fc2f 	bl	8006834 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fc2b 	bl	8006834 <USBD_LL_StallEP>
}
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b086      	sub	sp, #24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d036      	beq.n	800606a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006000:	6938      	ldr	r0, [r7, #16]
 8006002:	f000 f836 	bl	8006072 <USBD_GetLen>
 8006006:	4603      	mov	r3, r0
 8006008:	3301      	adds	r3, #1
 800600a:	b29b      	uxth	r3, r3
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	4413      	add	r3, r2
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	7812      	ldrb	r2, [r2, #0]
 800601e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	3301      	adds	r3, #1
 8006024:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006026:	7dfb      	ldrb	r3, [r7, #23]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	4413      	add	r3, r2
 800602c:	2203      	movs	r2, #3
 800602e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006030:	7dfb      	ldrb	r3, [r7, #23]
 8006032:	3301      	adds	r3, #1
 8006034:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006036:	e013      	b.n	8006060 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006038:	7dfb      	ldrb	r3, [r7, #23]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	4413      	add	r3, r2
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	3301      	adds	r3, #1
 8006048:	613b      	str	r3, [r7, #16]
    idx++;
 800604a:	7dfb      	ldrb	r3, [r7, #23]
 800604c:	3301      	adds	r3, #1
 800604e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006050:	7dfb      	ldrb	r3, [r7, #23]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	4413      	add	r3, r2
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
    idx++;
 800605a:	7dfb      	ldrb	r3, [r7, #23]
 800605c:	3301      	adds	r3, #1
 800605e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e7      	bne.n	8006038 <USBD_GetString+0x52>
 8006068:	e000      	b.n	800606c <USBD_GetString+0x86>
    return;
 800606a:	bf00      	nop
  }
}
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006072:	b480      	push	{r7}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006082:	e005      	b.n	8006090 <USBD_GetLen+0x1e>
  {
    len++;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	3301      	adds	r3, #1
 8006088:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	3301      	adds	r3, #1
 800608e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1f5      	bne.n	8006084 <USBD_GetLen+0x12>
  }

  return len;
 8006098:	7bfb      	ldrb	r3, [r7, #15]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2202      	movs	r2, #2
 80060b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	2100      	movs	r1, #0
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 fc3a 	bl	8006946 <USBD_LL_Transmit>

  return USBD_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	2100      	movs	r1, #0
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fc29 	bl	8006946 <USBD_LL_Transmit>

  return USBD_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2203      	movs	r2, #3
 800610e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	2100      	movs	r1, #0
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 fc2d 	bl	8006988 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	2100      	movs	r1, #0
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 fc1c 	bl	8006988 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b082      	sub	sp, #8
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2204      	movs	r2, #4
 8006166:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800616a:	2300      	movs	r3, #0
 800616c:	2200      	movs	r2, #0
 800616e:	2100      	movs	r1, #0
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fbe8 	bl	8006946 <USBD_LL_Transmit>

  return USBD_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2205      	movs	r2, #5
 800618c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006190:	2300      	movs	r3, #0
 8006192:	2200      	movs	r2, #0
 8006194:	2100      	movs	r1, #0
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fbf6 	bl	8006988 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80061ac:	2200      	movs	r2, #0
 80061ae:	4912      	ldr	r1, [pc, #72]	; (80061f8 <MX_USB_DEVICE_Init+0x50>)
 80061b0:	4812      	ldr	r0, [pc, #72]	; (80061fc <MX_USB_DEVICE_Init+0x54>)
 80061b2:	f7fe fe90 	bl	8004ed6 <USBD_Init>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80061bc:	f7fa fe88 	bl	8000ed0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80061c0:	490f      	ldr	r1, [pc, #60]	; (8006200 <MX_USB_DEVICE_Init+0x58>)
 80061c2:	480e      	ldr	r0, [pc, #56]	; (80061fc <MX_USB_DEVICE_Init+0x54>)
 80061c4:	f7fe feb7 	bl	8004f36 <USBD_RegisterClass>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80061ce:	f7fa fe7f 	bl	8000ed0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80061d2:	490c      	ldr	r1, [pc, #48]	; (8006204 <MX_USB_DEVICE_Init+0x5c>)
 80061d4:	4809      	ldr	r0, [pc, #36]	; (80061fc <MX_USB_DEVICE_Init+0x54>)
 80061d6:	f7fe fe69 	bl	8004eac <USBD_CUSTOM_HID_RegisterInterface>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80061e0:	f7fa fe76 	bl	8000ed0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80061e4:	4805      	ldr	r0, [pc, #20]	; (80061fc <MX_USB_DEVICE_Init+0x54>)
 80061e6:	f7fe fecd 	bl	8004f84 <USBD_Start>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80061f0:	f7fa fe6e 	bl	8000ed0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80061f4:	bf00      	nop
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20000304 	.word	0x20000304
 80061fc:	20000448 	.word	0x20000448
 8006200:	2000000c 	.word	0x2000000c
 8006204:	200002f4 	.word	0x200002f4

08006208 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006208:	b480      	push	{r7}
 800620a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800620c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800620e:	4618      	mov	r0, r3
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800621c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800621e:	4618      	mov	r0, r3
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS( uint8_t* state)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
//memcpy(buffer,state,64);

	//USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,buffer,64);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8006230:	4803      	ldr	r0, [pc, #12]	; (8006240 <CUSTOM_HID_OutEvent_FS+0x18>)
 8006232:	f7fe fdf1 	bl	8004e18 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 8006236:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20000448 	.word	0x20000448

08006244 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	4603      	mov	r3, r0
 800624c:	6039      	str	r1, [r7, #0]
 800624e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2212      	movs	r2, #18
 8006254:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006256:	4b03      	ldr	r3, [pc, #12]	; (8006264 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006258:	4618      	mov	r0, r3
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	20000320 	.word	0x20000320

08006268 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	4603      	mov	r3, r0
 8006270:	6039      	str	r1, [r7, #0]
 8006272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2204      	movs	r2, #4
 8006278:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800627a:	4b03      	ldr	r3, [pc, #12]	; (8006288 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800627c:	4618      	mov	r0, r3
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	20000334 	.word	0x20000334

0800628c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	4603      	mov	r3, r0
 8006294:	6039      	str	r1, [r7, #0]
 8006296:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d105      	bne.n	80062aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	4907      	ldr	r1, [pc, #28]	; (80062c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80062a2:	4808      	ldr	r0, [pc, #32]	; (80062c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80062a4:	f7ff fe9f 	bl	8005fe6 <USBD_GetString>
 80062a8:	e004      	b.n	80062b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	4904      	ldr	r1, [pc, #16]	; (80062c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80062ae:	4805      	ldr	r0, [pc, #20]	; (80062c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80062b0:	f7ff fe99 	bl	8005fe6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80062b4:	4b02      	ldr	r3, [pc, #8]	; (80062c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000718 	.word	0x20000718
 80062c4:	08006d78 	.word	0x08006d78

080062c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	4603      	mov	r3, r0
 80062d0:	6039      	str	r1, [r7, #0]
 80062d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	4904      	ldr	r1, [pc, #16]	; (80062e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80062d8:	4804      	ldr	r0, [pc, #16]	; (80062ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80062da:	f7ff fe84 	bl	8005fe6 <USBD_GetString>
  return USBD_StrDesc;
 80062de:	4b02      	ldr	r3, [pc, #8]	; (80062e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20000718 	.word	0x20000718
 80062ec:	08006d84 	.word	0x08006d84

080062f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	4603      	mov	r3, r0
 80062f8:	6039      	str	r1, [r7, #0]
 80062fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	221a      	movs	r2, #26
 8006300:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006302:	f000 f843 	bl	800638c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006306:	4b02      	ldr	r3, [pc, #8]	; (8006310 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006308:	4618      	mov	r0, r3
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20000338 	.word	0x20000338

08006314 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	4603      	mov	r3, r0
 800631c:	6039      	str	r1, [r7, #0]
 800631e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006320:	79fb      	ldrb	r3, [r7, #7]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d105      	bne.n	8006332 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	4907      	ldr	r1, [pc, #28]	; (8006348 <USBD_FS_ConfigStrDescriptor+0x34>)
 800632a:	4808      	ldr	r0, [pc, #32]	; (800634c <USBD_FS_ConfigStrDescriptor+0x38>)
 800632c:	f7ff fe5b 	bl	8005fe6 <USBD_GetString>
 8006330:	e004      	b.n	800633c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	4904      	ldr	r1, [pc, #16]	; (8006348 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006336:	4805      	ldr	r0, [pc, #20]	; (800634c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006338:	f7ff fe55 	bl	8005fe6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800633c:	4b02      	ldr	r3, [pc, #8]	; (8006348 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000718 	.word	0x20000718
 800634c:	08006d94 	.word	0x08006d94

08006350 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	6039      	str	r1, [r7, #0]
 800635a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d105      	bne.n	800636e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	4907      	ldr	r1, [pc, #28]	; (8006384 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006366:	4808      	ldr	r0, [pc, #32]	; (8006388 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006368:	f7ff fe3d 	bl	8005fe6 <USBD_GetString>
 800636c:	e004      	b.n	8006378 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	4904      	ldr	r1, [pc, #16]	; (8006384 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006372:	4805      	ldr	r0, [pc, #20]	; (8006388 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006374:	f7ff fe37 	bl	8005fe6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006378:	4b02      	ldr	r3, [pc, #8]	; (8006384 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000718 	.word	0x20000718
 8006388:	08006da8 	.word	0x08006da8

0800638c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006392:	4b0f      	ldr	r3, [pc, #60]	; (80063d0 <Get_SerialNum+0x44>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006398:	4b0e      	ldr	r3, [pc, #56]	; (80063d4 <Get_SerialNum+0x48>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800639e:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <Get_SerialNum+0x4c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4413      	add	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80063b2:	2208      	movs	r2, #8
 80063b4:	4909      	ldr	r1, [pc, #36]	; (80063dc <Get_SerialNum+0x50>)
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 f814 	bl	80063e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80063bc:	2204      	movs	r2, #4
 80063be:	4908      	ldr	r1, [pc, #32]	; (80063e0 <Get_SerialNum+0x54>)
 80063c0:	68b8      	ldr	r0, [r7, #8]
 80063c2:	f000 f80f 	bl	80063e4 <IntToUnicode>
  }
}
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	1fff7a10 	.word	0x1fff7a10
 80063d4:	1fff7a14 	.word	0x1fff7a14
 80063d8:	1fff7a18 	.word	0x1fff7a18
 80063dc:	2000033a 	.word	0x2000033a
 80063e0:	2000034a 	.word	0x2000034a

080063e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	4613      	mov	r3, r2
 80063f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80063f6:	2300      	movs	r3, #0
 80063f8:	75fb      	strb	r3, [r7, #23]
 80063fa:	e027      	b.n	800644c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	0f1b      	lsrs	r3, r3, #28
 8006400:	2b09      	cmp	r3, #9
 8006402:	d80b      	bhi.n	800641c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	0f1b      	lsrs	r3, r3, #28
 8006408:	b2da      	uxtb	r2, r3
 800640a:	7dfb      	ldrb	r3, [r7, #23]
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	4619      	mov	r1, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	440b      	add	r3, r1
 8006414:	3230      	adds	r2, #48	; 0x30
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	e00a      	b.n	8006432 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	0f1b      	lsrs	r3, r3, #28
 8006420:	b2da      	uxtb	r2, r3
 8006422:	7dfb      	ldrb	r3, [r7, #23]
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	4619      	mov	r1, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	440b      	add	r3, r1
 800642c:	3237      	adds	r2, #55	; 0x37
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	3301      	adds	r3, #1
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	4413      	add	r3, r2
 8006442:	2200      	movs	r2, #0
 8006444:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006446:	7dfb      	ldrb	r3, [r7, #23]
 8006448:	3301      	adds	r3, #1
 800644a:	75fb      	strb	r3, [r7, #23]
 800644c:	7dfa      	ldrb	r2, [r7, #23]
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	429a      	cmp	r2, r3
 8006452:	d3d3      	bcc.n	80063fc <IntToUnicode+0x18>
  }
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08a      	sub	sp, #40	; 0x28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800646c:	f107 0314 	add.w	r3, r7, #20
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	605a      	str	r2, [r3, #4]
 8006476:	609a      	str	r2, [r3, #8]
 8006478:	60da      	str	r2, [r3, #12]
 800647a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006484:	d13a      	bne.n	80064fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006486:	2300      	movs	r3, #0
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	4b1e      	ldr	r3, [pc, #120]	; (8006504 <HAL_PCD_MspInit+0xa0>)
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	4a1d      	ldr	r2, [pc, #116]	; (8006504 <HAL_PCD_MspInit+0xa0>)
 8006490:	f043 0301 	orr.w	r3, r3, #1
 8006494:	6313      	str	r3, [r2, #48]	; 0x30
 8006496:	4b1b      	ldr	r3, [pc, #108]	; (8006504 <HAL_PCD_MspInit+0xa0>)
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	613b      	str	r3, [r7, #16]
 80064a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80064a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80064a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064a8:	2302      	movs	r3, #2
 80064aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064b0:	2303      	movs	r3, #3
 80064b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80064b4:	230a      	movs	r3, #10
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064b8:	f107 0314 	add.w	r3, r7, #20
 80064bc:	4619      	mov	r1, r3
 80064be:	4812      	ldr	r0, [pc, #72]	; (8006508 <HAL_PCD_MspInit+0xa4>)
 80064c0:	f7fb f800 	bl	80014c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80064c4:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <HAL_PCD_MspInit+0xa0>)
 80064c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c8:	4a0e      	ldr	r2, [pc, #56]	; (8006504 <HAL_PCD_MspInit+0xa0>)
 80064ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ce:	6353      	str	r3, [r2, #52]	; 0x34
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <HAL_PCD_MspInit+0xa0>)
 80064d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d8:	4a0a      	ldr	r2, [pc, #40]	; (8006504 <HAL_PCD_MspInit+0xa0>)
 80064da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064de:	6453      	str	r3, [r2, #68]	; 0x44
 80064e0:	4b08      	ldr	r3, [pc, #32]	; (8006504 <HAL_PCD_MspInit+0xa0>)
 80064e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80064ec:	2200      	movs	r2, #0
 80064ee:	2100      	movs	r1, #0
 80064f0:	2043      	movs	r0, #67	; 0x43
 80064f2:	f7fa ffb0 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80064f6:	2043      	movs	r0, #67	; 0x43
 80064f8:	f7fa ffc9 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80064fc:	bf00      	nop
 80064fe:	3728      	adds	r7, #40	; 0x28
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40023800 	.word	0x40023800
 8006508:	40020000 	.word	0x40020000

0800650c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006520:	4619      	mov	r1, r3
 8006522:	4610      	mov	r0, r2
 8006524:	f7fe fd79 	bl	800501a <USBD_LL_SetupStage>
}
 8006528:	bf00      	nop
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006542:	78fa      	ldrb	r2, [r7, #3]
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	1a9b      	subs	r3, r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	4619      	mov	r1, r3
 800655a:	f7fe fdb3 	bl	80050c4 <USBD_LL_DataOutStage>
}
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b082      	sub	sp, #8
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	460b      	mov	r3, r1
 8006570:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006578:	78fa      	ldrb	r2, [r7, #3]
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	4613      	mov	r3, r2
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	1a9b      	subs	r3, r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	440b      	add	r3, r1
 8006586:	3348      	adds	r3, #72	; 0x48
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	4619      	mov	r1, r3
 800658e:	f7fe fdfc 	bl	800518a <USBD_LL_DataInStage>
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b082      	sub	sp, #8
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fe ff10 	bl	80053ce <USBD_LL_SOF>
}
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80065be:	2301      	movs	r3, #1
 80065c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d001      	beq.n	80065ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80065ca:	f7fa fc81 	bl	8000ed0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065d4:	7bfa      	ldrb	r2, [r7, #15]
 80065d6:	4611      	mov	r1, r2
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fe feba 	bl	8005352 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe fe66 	bl	80052b6 <USBD_LL_Reset>
}
 80065ea:	bf00      	nop
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe feb5 	bl	8005372 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800661a:	f043 0301 	orr.w	r3, r3, #1
 800661e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006628:	4b04      	ldr	r3, [pc, #16]	; (800663c <HAL_PCD_SuspendCallback+0x48>)
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	4a03      	ldr	r2, [pc, #12]	; (800663c <HAL_PCD_SuspendCallback+0x48>)
 800662e:	f043 0306 	orr.w	r3, r3, #6
 8006632:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006634:	bf00      	nop
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	e000ed00 	.word	0xe000ed00

08006640 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe fea5 	bl	800539e <USBD_LL_Resume>
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800666e:	78fa      	ldrb	r2, [r7, #3]
 8006670:	4611      	mov	r1, r2
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe fef3 	bl	800545e <USBD_LL_IsoOUTIncomplete>
}
 8006678:	bf00      	nop
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	460b      	mov	r3, r1
 800668a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006692:	78fa      	ldrb	r2, [r7, #3]
 8006694:	4611      	mov	r1, r2
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe febb 	bl	8005412 <USBD_LL_IsoINIncomplete>
}
 800669c:	bf00      	nop
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fe fef9 	bl	80054aa <USBD_LL_DevConnected>
}
 80066b8:	bf00      	nop
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fe fef6 	bl	80054c0 <USBD_LL_DevDisconnected>
}
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d13c      	bne.n	8006766 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80066ec:	4a20      	ldr	r2, [pc, #128]	; (8006770 <USBD_LL_Init+0x94>)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a1e      	ldr	r2, [pc, #120]	; (8006770 <USBD_LL_Init+0x94>)
 80066f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80066fc:	4b1c      	ldr	r3, [pc, #112]	; (8006770 <USBD_LL_Init+0x94>)
 80066fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006702:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006704:	4b1a      	ldr	r3, [pc, #104]	; (8006770 <USBD_LL_Init+0x94>)
 8006706:	2204      	movs	r2, #4
 8006708:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800670a:	4b19      	ldr	r3, [pc, #100]	; (8006770 <USBD_LL_Init+0x94>)
 800670c:	2202      	movs	r2, #2
 800670e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006710:	4b17      	ldr	r3, [pc, #92]	; (8006770 <USBD_LL_Init+0x94>)
 8006712:	2200      	movs	r2, #0
 8006714:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006716:	4b16      	ldr	r3, [pc, #88]	; (8006770 <USBD_LL_Init+0x94>)
 8006718:	2202      	movs	r2, #2
 800671a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800671c:	4b14      	ldr	r3, [pc, #80]	; (8006770 <USBD_LL_Init+0x94>)
 800671e:	2200      	movs	r2, #0
 8006720:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006722:	4b13      	ldr	r3, [pc, #76]	; (8006770 <USBD_LL_Init+0x94>)
 8006724:	2200      	movs	r2, #0
 8006726:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006728:	4b11      	ldr	r3, [pc, #68]	; (8006770 <USBD_LL_Init+0x94>)
 800672a:	2200      	movs	r2, #0
 800672c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800672e:	4b10      	ldr	r3, [pc, #64]	; (8006770 <USBD_LL_Init+0x94>)
 8006730:	2200      	movs	r2, #0
 8006732:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006734:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <USBD_LL_Init+0x94>)
 8006736:	2200      	movs	r2, #0
 8006738:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800673a:	480d      	ldr	r0, [pc, #52]	; (8006770 <USBD_LL_Init+0x94>)
 800673c:	f7fb f85f 	bl	80017fe <HAL_PCD_Init>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006746:	f7fa fbc3 	bl	8000ed0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800674a:	2180      	movs	r1, #128	; 0x80
 800674c:	4808      	ldr	r0, [pc, #32]	; (8006770 <USBD_LL_Init+0x94>)
 800674e:	f7fc f9bc 	bl	8002aca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006752:	2240      	movs	r2, #64	; 0x40
 8006754:	2100      	movs	r1, #0
 8006756:	4806      	ldr	r0, [pc, #24]	; (8006770 <USBD_LL_Init+0x94>)
 8006758:	f7fc f970 	bl	8002a3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800675c:	2280      	movs	r2, #128	; 0x80
 800675e:	2101      	movs	r1, #1
 8006760:	4803      	ldr	r0, [pc, #12]	; (8006770 <USBD_LL_Init+0x94>)
 8006762:	f7fc f96b 	bl	8002a3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	20000918 	.word	0x20000918

08006774 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800678a:	4618      	mov	r0, r3
 800678c:	f7fb f954 	bl	8001a38 <HAL_PCD_Start>
 8006790:	4603      	mov	r3, r0
 8006792:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	4618      	mov	r0, r3
 8006798:	f000 f942 	bl	8006a20 <USBD_Get_USB_Status>
 800679c:	4603      	mov	r3, r0
 800679e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	4608      	mov	r0, r1
 80067b4:	4611      	mov	r1, r2
 80067b6:	461a      	mov	r2, r3
 80067b8:	4603      	mov	r3, r0
 80067ba:	70fb      	strb	r3, [r7, #3]
 80067bc:	460b      	mov	r3, r1
 80067be:	70bb      	strb	r3, [r7, #2]
 80067c0:	4613      	mov	r3, r2
 80067c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80067d2:	78bb      	ldrb	r3, [r7, #2]
 80067d4:	883a      	ldrh	r2, [r7, #0]
 80067d6:	78f9      	ldrb	r1, [r7, #3]
 80067d8:	f7fb fd38 	bl	800224c <HAL_PCD_EP_Open>
 80067dc:	4603      	mov	r3, r0
 80067de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f91c 	bl	8006a20 <USBD_Get_USB_Status>
 80067e8:	4603      	mov	r3, r0
 80067ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	460b      	mov	r3, r1
 8006800:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006810:	78fa      	ldrb	r2, [r7, #3]
 8006812:	4611      	mov	r1, r2
 8006814:	4618      	mov	r0, r3
 8006816:	f7fb fd81 	bl	800231c <HAL_PCD_EP_Close>
 800681a:	4603      	mov	r3, r0
 800681c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800681e:	7bfb      	ldrb	r3, [r7, #15]
 8006820:	4618      	mov	r0, r3
 8006822:	f000 f8fd 	bl	8006a20 <USBD_Get_USB_Status>
 8006826:	4603      	mov	r3, r0
 8006828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800682a:	7bbb      	ldrb	r3, [r7, #14]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800684e:	78fa      	ldrb	r2, [r7, #3]
 8006850:	4611      	mov	r1, r2
 8006852:	4618      	mov	r0, r3
 8006854:	f7fb fe59 	bl	800250a <HAL_PCD_EP_SetStall>
 8006858:	4603      	mov	r3, r0
 800685a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	4618      	mov	r0, r3
 8006860:	f000 f8de 	bl	8006a20 <USBD_Get_USB_Status>
 8006864:	4603      	mov	r3, r0
 8006866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006868:	7bbb      	ldrb	r3, [r7, #14]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	460b      	mov	r3, r1
 800687c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800688c:	78fa      	ldrb	r2, [r7, #3]
 800688e:	4611      	mov	r1, r2
 8006890:	4618      	mov	r0, r3
 8006892:	f7fb fe9e 	bl	80025d2 <HAL_PCD_EP_ClrStall>
 8006896:	4603      	mov	r3, r0
 8006898:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800689a:	7bfb      	ldrb	r3, [r7, #15]
 800689c:	4618      	mov	r0, r3
 800689e:	f000 f8bf 	bl	8006a20 <USBD_Get_USB_Status>
 80068a2:	4603      	mov	r3, r0
 80068a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80068c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80068c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	da0b      	bge.n	80068e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068d2:	68f9      	ldr	r1, [r7, #12]
 80068d4:	4613      	mov	r3, r2
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	1a9b      	subs	r3, r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	333e      	adds	r3, #62	; 0x3e
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	e00b      	b.n	80068fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80068e4:	78fb      	ldrb	r3, [r7, #3]
 80068e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	4613      	mov	r3, r2
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	1a9b      	subs	r3, r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80068fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006922:	78fa      	ldrb	r2, [r7, #3]
 8006924:	4611      	mov	r1, r2
 8006926:	4618      	mov	r0, r3
 8006928:	f7fb fc6b 	bl	8002202 <HAL_PCD_SetAddress>
 800692c:	4603      	mov	r3, r0
 800692e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	4618      	mov	r0, r3
 8006934:	f000 f874 	bl	8006a20 <USBD_Get_USB_Status>
 8006938:	4603      	mov	r3, r0
 800693a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800693c:	7bbb      	ldrb	r3, [r7, #14]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b086      	sub	sp, #24
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
 8006952:	460b      	mov	r3, r1
 8006954:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006964:	7af9      	ldrb	r1, [r7, #11]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	f7fb fd84 	bl	8002476 <HAL_PCD_EP_Transmit>
 800696e:	4603      	mov	r3, r0
 8006970:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006972:	7dfb      	ldrb	r3, [r7, #23]
 8006974:	4618      	mov	r0, r3
 8006976:	f000 f853 	bl	8006a20 <USBD_Get_USB_Status>
 800697a:	4603      	mov	r3, r0
 800697c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800697e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	607a      	str	r2, [r7, #4]
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	460b      	mov	r3, r1
 8006996:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80069a6:	7af9      	ldrb	r1, [r7, #11]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	f7fb fd00 	bl	80023b0 <HAL_PCD_EP_Receive>
 80069b0:	4603      	mov	r3, r0
 80069b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069b4:	7dfb      	ldrb	r3, [r7, #23]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 f832 	bl	8006a20 <USBD_Get_USB_Status>
 80069bc:	4603      	mov	r3, r0
 80069be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80069c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b082      	sub	sp, #8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	460b      	mov	r3, r1
 80069d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	4611      	mov	r1, r2
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fb fd30 	bl	8002446 <HAL_PCD_EP_GetRxCount>
 80069e6:	4603      	mov	r3, r0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80069f8:	4b03      	ldr	r3, [pc, #12]	; (8006a08 <USBD_static_malloc+0x18>)
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	200003e0 	.word	0x200003e0

08006a0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]

}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d817      	bhi.n	8006a64 <USBD_Get_USB_Status+0x44>
 8006a34:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <USBD_Get_USB_Status+0x1c>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006a4d 	.word	0x08006a4d
 8006a40:	08006a53 	.word	0x08006a53
 8006a44:	08006a59 	.word	0x08006a59
 8006a48:	08006a5f 	.word	0x08006a5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8006a50:	e00b      	b.n	8006a6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006a52:	2303      	movs	r3, #3
 8006a54:	73fb      	strb	r3, [r7, #15]
    break;
 8006a56:	e008      	b.n	8006a6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a5c:	e005      	b.n	8006a6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	73fb      	strb	r3, [r7, #15]
    break;
 8006a62:	e002      	b.n	8006a6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006a64:	2303      	movs	r3, #3
 8006a66:	73fb      	strb	r3, [r7, #15]
    break;
 8006a68:	bf00      	nop
  }
  return usb_status;
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <_ZdlPvj>:
 8006a78:	f000 b811 	b.w	8006a9e <_ZdlPv>

08006a7c <_Znwj>:
 8006a7c:	2801      	cmp	r0, #1
 8006a7e:	bf38      	it	cc
 8006a80:	2001      	movcc	r0, #1
 8006a82:	b510      	push	{r4, lr}
 8006a84:	4604      	mov	r4, r0
 8006a86:	4620      	mov	r0, r4
 8006a88:	f000 f846 	bl	8006b18 <malloc>
 8006a8c:	b930      	cbnz	r0, 8006a9c <_Znwj+0x20>
 8006a8e:	f000 f809 	bl	8006aa4 <_ZSt15get_new_handlerv>
 8006a92:	b908      	cbnz	r0, 8006a98 <_Znwj+0x1c>
 8006a94:	f000 f80e 	bl	8006ab4 <abort>
 8006a98:	4780      	blx	r0
 8006a9a:	e7f4      	b.n	8006a86 <_Znwj+0xa>
 8006a9c:	bd10      	pop	{r4, pc}

08006a9e <_ZdlPv>:
 8006a9e:	f000 b843 	b.w	8006b28 <free>
	...

08006aa4 <_ZSt15get_new_handlerv>:
 8006aa4:	4b02      	ldr	r3, [pc, #8]	; (8006ab0 <_ZSt15get_new_handlerv+0xc>)
 8006aa6:	6818      	ldr	r0, [r3, #0]
 8006aa8:	f3bf 8f5b 	dmb	ish
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	20000438 	.word	0x20000438

08006ab4 <abort>:
 8006ab4:	b508      	push	{r3, lr}
 8006ab6:	2006      	movs	r0, #6
 8006ab8:	f000 f928 	bl	8006d0c <raise>
 8006abc:	2001      	movs	r0, #1
 8006abe:	f7fa fa81 	bl	8000fc4 <_exit>
	...

08006ac4 <__errno>:
 8006ac4:	4b01      	ldr	r3, [pc, #4]	; (8006acc <__errno+0x8>)
 8006ac6:	6818      	ldr	r0, [r3, #0]
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	20000354 	.word	0x20000354

08006ad0 <__libc_init_array>:
 8006ad0:	b570      	push	{r4, r5, r6, lr}
 8006ad2:	4d0d      	ldr	r5, [pc, #52]	; (8006b08 <__libc_init_array+0x38>)
 8006ad4:	4c0d      	ldr	r4, [pc, #52]	; (8006b0c <__libc_init_array+0x3c>)
 8006ad6:	1b64      	subs	r4, r4, r5
 8006ad8:	10a4      	asrs	r4, r4, #2
 8006ada:	2600      	movs	r6, #0
 8006adc:	42a6      	cmp	r6, r4
 8006ade:	d109      	bne.n	8006af4 <__libc_init_array+0x24>
 8006ae0:	4d0b      	ldr	r5, [pc, #44]	; (8006b10 <__libc_init_array+0x40>)
 8006ae2:	4c0c      	ldr	r4, [pc, #48]	; (8006b14 <__libc_init_array+0x44>)
 8006ae4:	f000 f93c 	bl	8006d60 <_init>
 8006ae8:	1b64      	subs	r4, r4, r5
 8006aea:	10a4      	asrs	r4, r4, #2
 8006aec:	2600      	movs	r6, #0
 8006aee:	42a6      	cmp	r6, r4
 8006af0:	d105      	bne.n	8006afe <__libc_init_array+0x2e>
 8006af2:	bd70      	pop	{r4, r5, r6, pc}
 8006af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af8:	4798      	blx	r3
 8006afa:	3601      	adds	r6, #1
 8006afc:	e7ee      	b.n	8006adc <__libc_init_array+0xc>
 8006afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b02:	4798      	blx	r3
 8006b04:	3601      	adds	r6, #1
 8006b06:	e7f2      	b.n	8006aee <__libc_init_array+0x1e>
 8006b08:	08006e34 	.word	0x08006e34
 8006b0c:	08006e34 	.word	0x08006e34
 8006b10:	08006e34 	.word	0x08006e34
 8006b14:	08006e38 	.word	0x08006e38

08006b18 <malloc>:
 8006b18:	4b02      	ldr	r3, [pc, #8]	; (8006b24 <malloc+0xc>)
 8006b1a:	4601      	mov	r1, r0
 8006b1c:	6818      	ldr	r0, [r3, #0]
 8006b1e:	f000 b863 	b.w	8006be8 <_malloc_r>
 8006b22:	bf00      	nop
 8006b24:	20000354 	.word	0x20000354

08006b28 <free>:
 8006b28:	4b02      	ldr	r3, [pc, #8]	; (8006b34 <free+0xc>)
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	f000 b80b 	b.w	8006b48 <_free_r>
 8006b32:	bf00      	nop
 8006b34:	20000354 	.word	0x20000354

08006b38 <memset>:
 8006b38:	4402      	add	r2, r0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d100      	bne.n	8006b42 <memset+0xa>
 8006b40:	4770      	bx	lr
 8006b42:	f803 1b01 	strb.w	r1, [r3], #1
 8006b46:	e7f9      	b.n	8006b3c <memset+0x4>

08006b48 <_free_r>:
 8006b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b4a:	2900      	cmp	r1, #0
 8006b4c:	d048      	beq.n	8006be0 <_free_r+0x98>
 8006b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b52:	9001      	str	r0, [sp, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f1a1 0404 	sub.w	r4, r1, #4
 8006b5a:	bfb8      	it	lt
 8006b5c:	18e4      	addlt	r4, r4, r3
 8006b5e:	f000 f8f1 	bl	8006d44 <__malloc_lock>
 8006b62:	4a20      	ldr	r2, [pc, #128]	; (8006be4 <_free_r+0x9c>)
 8006b64:	9801      	ldr	r0, [sp, #4]
 8006b66:	6813      	ldr	r3, [r2, #0]
 8006b68:	4615      	mov	r5, r2
 8006b6a:	b933      	cbnz	r3, 8006b7a <_free_r+0x32>
 8006b6c:	6063      	str	r3, [r4, #4]
 8006b6e:	6014      	str	r4, [r2, #0]
 8006b70:	b003      	add	sp, #12
 8006b72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b76:	f000 b8eb 	b.w	8006d50 <__malloc_unlock>
 8006b7a:	42a3      	cmp	r3, r4
 8006b7c:	d90b      	bls.n	8006b96 <_free_r+0x4e>
 8006b7e:	6821      	ldr	r1, [r4, #0]
 8006b80:	1862      	adds	r2, r4, r1
 8006b82:	4293      	cmp	r3, r2
 8006b84:	bf04      	itt	eq
 8006b86:	681a      	ldreq	r2, [r3, #0]
 8006b88:	685b      	ldreq	r3, [r3, #4]
 8006b8a:	6063      	str	r3, [r4, #4]
 8006b8c:	bf04      	itt	eq
 8006b8e:	1852      	addeq	r2, r2, r1
 8006b90:	6022      	streq	r2, [r4, #0]
 8006b92:	602c      	str	r4, [r5, #0]
 8006b94:	e7ec      	b.n	8006b70 <_free_r+0x28>
 8006b96:	461a      	mov	r2, r3
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	b10b      	cbz	r3, 8006ba0 <_free_r+0x58>
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d9fa      	bls.n	8006b96 <_free_r+0x4e>
 8006ba0:	6811      	ldr	r1, [r2, #0]
 8006ba2:	1855      	adds	r5, r2, r1
 8006ba4:	42a5      	cmp	r5, r4
 8006ba6:	d10b      	bne.n	8006bc0 <_free_r+0x78>
 8006ba8:	6824      	ldr	r4, [r4, #0]
 8006baa:	4421      	add	r1, r4
 8006bac:	1854      	adds	r4, r2, r1
 8006bae:	42a3      	cmp	r3, r4
 8006bb0:	6011      	str	r1, [r2, #0]
 8006bb2:	d1dd      	bne.n	8006b70 <_free_r+0x28>
 8006bb4:	681c      	ldr	r4, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	6053      	str	r3, [r2, #4]
 8006bba:	4421      	add	r1, r4
 8006bbc:	6011      	str	r1, [r2, #0]
 8006bbe:	e7d7      	b.n	8006b70 <_free_r+0x28>
 8006bc0:	d902      	bls.n	8006bc8 <_free_r+0x80>
 8006bc2:	230c      	movs	r3, #12
 8006bc4:	6003      	str	r3, [r0, #0]
 8006bc6:	e7d3      	b.n	8006b70 <_free_r+0x28>
 8006bc8:	6825      	ldr	r5, [r4, #0]
 8006bca:	1961      	adds	r1, r4, r5
 8006bcc:	428b      	cmp	r3, r1
 8006bce:	bf04      	itt	eq
 8006bd0:	6819      	ldreq	r1, [r3, #0]
 8006bd2:	685b      	ldreq	r3, [r3, #4]
 8006bd4:	6063      	str	r3, [r4, #4]
 8006bd6:	bf04      	itt	eq
 8006bd8:	1949      	addeq	r1, r1, r5
 8006bda:	6021      	streq	r1, [r4, #0]
 8006bdc:	6054      	str	r4, [r2, #4]
 8006bde:	e7c7      	b.n	8006b70 <_free_r+0x28>
 8006be0:	b003      	add	sp, #12
 8006be2:	bd30      	pop	{r4, r5, pc}
 8006be4:	2000043c 	.word	0x2000043c

08006be8 <_malloc_r>:
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	1ccd      	adds	r5, r1, #3
 8006bec:	f025 0503 	bic.w	r5, r5, #3
 8006bf0:	3508      	adds	r5, #8
 8006bf2:	2d0c      	cmp	r5, #12
 8006bf4:	bf38      	it	cc
 8006bf6:	250c      	movcc	r5, #12
 8006bf8:	2d00      	cmp	r5, #0
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	db01      	blt.n	8006c02 <_malloc_r+0x1a>
 8006bfe:	42a9      	cmp	r1, r5
 8006c00:	d903      	bls.n	8006c0a <_malloc_r+0x22>
 8006c02:	230c      	movs	r3, #12
 8006c04:	6033      	str	r3, [r6, #0]
 8006c06:	2000      	movs	r0, #0
 8006c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c0a:	f000 f89b 	bl	8006d44 <__malloc_lock>
 8006c0e:	4921      	ldr	r1, [pc, #132]	; (8006c94 <_malloc_r+0xac>)
 8006c10:	680a      	ldr	r2, [r1, #0]
 8006c12:	4614      	mov	r4, r2
 8006c14:	b99c      	cbnz	r4, 8006c3e <_malloc_r+0x56>
 8006c16:	4f20      	ldr	r7, [pc, #128]	; (8006c98 <_malloc_r+0xb0>)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	b923      	cbnz	r3, 8006c26 <_malloc_r+0x3e>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f000 f83c 	bl	8006c9c <_sbrk_r>
 8006c24:	6038      	str	r0, [r7, #0]
 8006c26:	4629      	mov	r1, r5
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f000 f837 	bl	8006c9c <_sbrk_r>
 8006c2e:	1c43      	adds	r3, r0, #1
 8006c30:	d123      	bne.n	8006c7a <_malloc_r+0x92>
 8006c32:	230c      	movs	r3, #12
 8006c34:	6033      	str	r3, [r6, #0]
 8006c36:	4630      	mov	r0, r6
 8006c38:	f000 f88a 	bl	8006d50 <__malloc_unlock>
 8006c3c:	e7e3      	b.n	8006c06 <_malloc_r+0x1e>
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	1b5b      	subs	r3, r3, r5
 8006c42:	d417      	bmi.n	8006c74 <_malloc_r+0x8c>
 8006c44:	2b0b      	cmp	r3, #11
 8006c46:	d903      	bls.n	8006c50 <_malloc_r+0x68>
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	441c      	add	r4, r3
 8006c4c:	6025      	str	r5, [r4, #0]
 8006c4e:	e004      	b.n	8006c5a <_malloc_r+0x72>
 8006c50:	6863      	ldr	r3, [r4, #4]
 8006c52:	42a2      	cmp	r2, r4
 8006c54:	bf0c      	ite	eq
 8006c56:	600b      	streq	r3, [r1, #0]
 8006c58:	6053      	strne	r3, [r2, #4]
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f000 f878 	bl	8006d50 <__malloc_unlock>
 8006c60:	f104 000b 	add.w	r0, r4, #11
 8006c64:	1d23      	adds	r3, r4, #4
 8006c66:	f020 0007 	bic.w	r0, r0, #7
 8006c6a:	1ac2      	subs	r2, r0, r3
 8006c6c:	d0cc      	beq.n	8006c08 <_malloc_r+0x20>
 8006c6e:	1a1b      	subs	r3, r3, r0
 8006c70:	50a3      	str	r3, [r4, r2]
 8006c72:	e7c9      	b.n	8006c08 <_malloc_r+0x20>
 8006c74:	4622      	mov	r2, r4
 8006c76:	6864      	ldr	r4, [r4, #4]
 8006c78:	e7cc      	b.n	8006c14 <_malloc_r+0x2c>
 8006c7a:	1cc4      	adds	r4, r0, #3
 8006c7c:	f024 0403 	bic.w	r4, r4, #3
 8006c80:	42a0      	cmp	r0, r4
 8006c82:	d0e3      	beq.n	8006c4c <_malloc_r+0x64>
 8006c84:	1a21      	subs	r1, r4, r0
 8006c86:	4630      	mov	r0, r6
 8006c88:	f000 f808 	bl	8006c9c <_sbrk_r>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d1dd      	bne.n	8006c4c <_malloc_r+0x64>
 8006c90:	e7cf      	b.n	8006c32 <_malloc_r+0x4a>
 8006c92:	bf00      	nop
 8006c94:	2000043c 	.word	0x2000043c
 8006c98:	20000440 	.word	0x20000440

08006c9c <_sbrk_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	4d06      	ldr	r5, [pc, #24]	; (8006cb8 <_sbrk_r+0x1c>)
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	602b      	str	r3, [r5, #0]
 8006ca8:	f7fa f996 	bl	8000fd8 <_sbrk>
 8006cac:	1c43      	adds	r3, r0, #1
 8006cae:	d102      	bne.n	8006cb6 <_sbrk_r+0x1a>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	b103      	cbz	r3, 8006cb6 <_sbrk_r+0x1a>
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}
 8006cb8:	20000d20 	.word	0x20000d20

08006cbc <_raise_r>:
 8006cbc:	291f      	cmp	r1, #31
 8006cbe:	b538      	push	{r3, r4, r5, lr}
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	460d      	mov	r5, r1
 8006cc4:	d904      	bls.n	8006cd0 <_raise_r+0x14>
 8006cc6:	2316      	movs	r3, #22
 8006cc8:	6003      	str	r3, [r0, #0]
 8006cca:	f04f 30ff 	mov.w	r0, #4294967295
 8006cce:	bd38      	pop	{r3, r4, r5, pc}
 8006cd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006cd2:	b112      	cbz	r2, 8006cda <_raise_r+0x1e>
 8006cd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cd8:	b94b      	cbnz	r3, 8006cee <_raise_r+0x32>
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 f830 	bl	8006d40 <_getpid_r>
 8006ce0:	462a      	mov	r2, r5
 8006ce2:	4601      	mov	r1, r0
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cea:	f000 b817 	b.w	8006d1c <_kill_r>
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d00a      	beq.n	8006d08 <_raise_r+0x4c>
 8006cf2:	1c59      	adds	r1, r3, #1
 8006cf4:	d103      	bne.n	8006cfe <_raise_r+0x42>
 8006cf6:	2316      	movs	r3, #22
 8006cf8:	6003      	str	r3, [r0, #0]
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	e7e7      	b.n	8006cce <_raise_r+0x12>
 8006cfe:	2400      	movs	r4, #0
 8006d00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d04:	4628      	mov	r0, r5
 8006d06:	4798      	blx	r3
 8006d08:	2000      	movs	r0, #0
 8006d0a:	e7e0      	b.n	8006cce <_raise_r+0x12>

08006d0c <raise>:
 8006d0c:	4b02      	ldr	r3, [pc, #8]	; (8006d18 <raise+0xc>)
 8006d0e:	4601      	mov	r1, r0
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	f7ff bfd3 	b.w	8006cbc <_raise_r>
 8006d16:	bf00      	nop
 8006d18:	20000354 	.word	0x20000354

08006d1c <_kill_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4d07      	ldr	r5, [pc, #28]	; (8006d3c <_kill_r+0x20>)
 8006d20:	2300      	movs	r3, #0
 8006d22:	4604      	mov	r4, r0
 8006d24:	4608      	mov	r0, r1
 8006d26:	4611      	mov	r1, r2
 8006d28:	602b      	str	r3, [r5, #0]
 8006d2a:	f7fa f93b 	bl	8000fa4 <_kill>
 8006d2e:	1c43      	adds	r3, r0, #1
 8006d30:	d102      	bne.n	8006d38 <_kill_r+0x1c>
 8006d32:	682b      	ldr	r3, [r5, #0]
 8006d34:	b103      	cbz	r3, 8006d38 <_kill_r+0x1c>
 8006d36:	6023      	str	r3, [r4, #0]
 8006d38:	bd38      	pop	{r3, r4, r5, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20000d20 	.word	0x20000d20

08006d40 <_getpid_r>:
 8006d40:	f7fa b928 	b.w	8000f94 <_getpid>

08006d44 <__malloc_lock>:
 8006d44:	4801      	ldr	r0, [pc, #4]	; (8006d4c <__malloc_lock+0x8>)
 8006d46:	f000 b809 	b.w	8006d5c <__retarget_lock_acquire_recursive>
 8006d4a:	bf00      	nop
 8006d4c:	20000d28 	.word	0x20000d28

08006d50 <__malloc_unlock>:
 8006d50:	4801      	ldr	r0, [pc, #4]	; (8006d58 <__malloc_unlock+0x8>)
 8006d52:	f000 b804 	b.w	8006d5e <__retarget_lock_release_recursive>
 8006d56:	bf00      	nop
 8006d58:	20000d28 	.word	0x20000d28

08006d5c <__retarget_lock_acquire_recursive>:
 8006d5c:	4770      	bx	lr

08006d5e <__retarget_lock_release_recursive>:
 8006d5e:	4770      	bx	lr

08006d60 <_init>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	bf00      	nop
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr

08006d6c <_fini>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	bf00      	nop
 8006d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d72:	bc08      	pop	{r3}
 8006d74:	469e      	mov	lr, r3
 8006d76:	4770      	bx	lr
